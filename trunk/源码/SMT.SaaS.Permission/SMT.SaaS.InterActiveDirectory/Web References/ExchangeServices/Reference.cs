//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.225
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 4.0.30319.225 版自动生成。
// 
#pragma warning disable 1591

namespace InterActiveDirectory.ExchangeServices {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ExchangeServicesSoap", Namespace="http://tempuri.org/")]
    public partial class ExchangeServices : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback AddUserMailOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddUserMailBoxOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetUserEnableOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public ExchangeServices() {
            this.Url = global::InterActiveDirectory.Properties.Settings.Default.InterActiveDirectory_ExchangeServices_ExchangeServices;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event AddUserMailCompletedEventHandler AddUserMailCompleted;
        
        /// <remarks/>
        public event AddUserMailBoxCompletedEventHandler AddUserMailBoxCompleted;
        
        /// <remarks/>
        public event SetUserEnableCompletedEventHandler SetUserEnableCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddUserMail", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddUserMail(string userPath, string usrAlias, string EmailSuffix, string usrPasswd) {
            object[] results = this.Invoke("AddUserMail", new object[] {
                        userPath,
                        usrAlias,
                        EmailSuffix,
                        usrPasswd});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddUserMail(string userPath, string usrAlias, string EmailSuffix, string usrPasswd, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddUserMail", new object[] {
                        userPath,
                        usrAlias,
                        EmailSuffix,
                        usrPasswd}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndAddUserMail(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AddUserMailAsync(string userPath, string usrAlias, string EmailSuffix, string usrPasswd) {
            this.AddUserMailAsync(userPath, usrAlias, EmailSuffix, usrPasswd, null);
        }
        
        /// <remarks/>
        public void AddUserMailAsync(string userPath, string usrAlias, string EmailSuffix, string usrPasswd, object userState) {
            if ((this.AddUserMailOperationCompleted == null)) {
                this.AddUserMailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddUserMailOperationCompleted);
            }
            this.InvokeAsync("AddUserMail", new object[] {
                        userPath,
                        usrAlias,
                        EmailSuffix,
                        usrPasswd}, this.AddUserMailOperationCompleted, userState);
        }
        
        private void OnAddUserMailOperationCompleted(object arg) {
            if ((this.AddUserMailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddUserMailCompleted(this, new AddUserMailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddUserMailBox", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddUserMailBox(string userID, ref string errStr) {
            object[] results = this.Invoke("AddUserMailBox", new object[] {
                        userID,
                        errStr});
            errStr = ((string)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddUserMailBox(string userID, string errStr, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddUserMailBox", new object[] {
                        userID,
                        errStr}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndAddUserMailBox(System.IAsyncResult asyncResult, out string errStr) {
            object[] results = this.EndInvoke(asyncResult);
            errStr = ((string)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddUserMailBoxAsync(string userID, string errStr) {
            this.AddUserMailBoxAsync(userID, errStr, null);
        }
        
        /// <remarks/>
        public void AddUserMailBoxAsync(string userID, string errStr, object userState) {
            if ((this.AddUserMailBoxOperationCompleted == null)) {
                this.AddUserMailBoxOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddUserMailBoxOperationCompleted);
            }
            this.InvokeAsync("AddUserMailBox", new object[] {
                        userID,
                        errStr}, this.AddUserMailBoxOperationCompleted, userState);
        }
        
        private void OnAddUserMailBoxOperationCompleted(object arg) {
            if ((this.AddUserMailBoxCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddUserMailBoxCompleted(this, new AddUserMailBoxCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetUserEnable", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetUserEnable(string account, out string xx) {
            object[] results = this.Invoke("SetUserEnable", new object[] {
                        account});
            xx = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSetUserEnable(string account, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SetUserEnable", new object[] {
                        account}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndSetUserEnable(System.IAsyncResult asyncResult, out string xx) {
            object[] results = this.EndInvoke(asyncResult);
            xx = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetUserEnableAsync(string account) {
            this.SetUserEnableAsync(account, null);
        }
        
        /// <remarks/>
        public void SetUserEnableAsync(string account, object userState) {
            if ((this.SetUserEnableOperationCompleted == null)) {
                this.SetUserEnableOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetUserEnableOperationCompleted);
            }
            this.InvokeAsync("SetUserEnable", new object[] {
                        account}, this.SetUserEnableOperationCompleted, userState);
        }
        
        private void OnSetUserEnableOperationCompleted(object arg) {
            if ((this.SetUserEnableCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetUserEnableCompleted(this, new SetUserEnableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AddUserMailCompletedEventHandler(object sender, AddUserMailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddUserMailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddUserMailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AddUserMailBoxCompletedEventHandler(object sender, AddUserMailBoxCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddUserMailBoxCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddUserMailBoxCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string errStr {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SetUserEnableCompletedEventHandler(object sender, SetUserEnableCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetUserEnableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetUserEnableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string xx {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
}

#pragma warning restore 1591