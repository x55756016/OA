//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.296
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.50826.0
// 
namespace SMT.Saas.Tools.FileUploadWS {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="T_SYS_FILEUPLOAD", Namespace="http://schemas.datacontract.org/2004/07/SMT_System_EFModel", IsReference=true)]
    public partial class T_SYS_FILEUPLOAD : SMT.Saas.Tools.FileUploadWS.EntityObject {
        
        private string COMPANYIDField;
        
        private string CREATECOMPANYIDField;
        
        private System.DateTime CREATEDATEField;
        
        private string CREATEDEPARTMENTIDField;
        
        private string CREATEPOSTIDField;
        
        private string CREATEUSERIDField;
        
        private string CREATEUSERNAMEField;
        
        private string FILENAMEField;
        
        private string FILEUPLOADIDField;
        
        private string FORMIDField;
        
        private string MODELNAMEField;
        
        private string OWNERCOMPANYIDField;
        
        private string OWNERDEPARTMENTIDField;
        
        private string OWNERIDField;
        
        private string OWNERNAMEField;
        
        private string OWNERPOSTIDField;
        
        private string SYSTEMCODEField;
        
        private System.Nullable<System.DateTime> UPDATEDATEField;
        
        private string UPDATEUSERIDField;
        
        private string UPDATEUSERNAMEField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string COMPANYID {
            get {
                return this.COMPANYIDField;
            }
            set {
                if ((object.ReferenceEquals(this.COMPANYIDField, value) != true)) {
                    this.COMPANYIDField = value;
                    this.RaisePropertyChanged("COMPANYID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CREATECOMPANYID {
            get {
                return this.CREATECOMPANYIDField;
            }
            set {
                if ((object.ReferenceEquals(this.CREATECOMPANYIDField, value) != true)) {
                    this.CREATECOMPANYIDField = value;
                    this.RaisePropertyChanged("CREATECOMPANYID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CREATEDATE {
            get {
                return this.CREATEDATEField;
            }
            set {
                if ((this.CREATEDATEField.Equals(value) != true)) {
                    this.CREATEDATEField = value;
                    this.RaisePropertyChanged("CREATEDATE");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CREATEDEPARTMENTID {
            get {
                return this.CREATEDEPARTMENTIDField;
            }
            set {
                if ((object.ReferenceEquals(this.CREATEDEPARTMENTIDField, value) != true)) {
                    this.CREATEDEPARTMENTIDField = value;
                    this.RaisePropertyChanged("CREATEDEPARTMENTID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CREATEPOSTID {
            get {
                return this.CREATEPOSTIDField;
            }
            set {
                if ((object.ReferenceEquals(this.CREATEPOSTIDField, value) != true)) {
                    this.CREATEPOSTIDField = value;
                    this.RaisePropertyChanged("CREATEPOSTID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CREATEUSERID {
            get {
                return this.CREATEUSERIDField;
            }
            set {
                if ((object.ReferenceEquals(this.CREATEUSERIDField, value) != true)) {
                    this.CREATEUSERIDField = value;
                    this.RaisePropertyChanged("CREATEUSERID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CREATEUSERNAME {
            get {
                return this.CREATEUSERNAMEField;
            }
            set {
                if ((object.ReferenceEquals(this.CREATEUSERNAMEField, value) != true)) {
                    this.CREATEUSERNAMEField = value;
                    this.RaisePropertyChanged("CREATEUSERNAME");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FILENAME {
            get {
                return this.FILENAMEField;
            }
            set {
                if ((object.ReferenceEquals(this.FILENAMEField, value) != true)) {
                    this.FILENAMEField = value;
                    this.RaisePropertyChanged("FILENAME");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FILEUPLOADID {
            get {
                return this.FILEUPLOADIDField;
            }
            set {
                if ((object.ReferenceEquals(this.FILEUPLOADIDField, value) != true)) {
                    this.FILEUPLOADIDField = value;
                    this.RaisePropertyChanged("FILEUPLOADID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FORMID {
            get {
                return this.FORMIDField;
            }
            set {
                if ((object.ReferenceEquals(this.FORMIDField, value) != true)) {
                    this.FORMIDField = value;
                    this.RaisePropertyChanged("FORMID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MODELNAME {
            get {
                return this.MODELNAMEField;
            }
            set {
                if ((object.ReferenceEquals(this.MODELNAMEField, value) != true)) {
                    this.MODELNAMEField = value;
                    this.RaisePropertyChanged("MODELNAME");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OWNERCOMPANYID {
            get {
                return this.OWNERCOMPANYIDField;
            }
            set {
                if ((object.ReferenceEquals(this.OWNERCOMPANYIDField, value) != true)) {
                    this.OWNERCOMPANYIDField = value;
                    this.RaisePropertyChanged("OWNERCOMPANYID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OWNERDEPARTMENTID {
            get {
                return this.OWNERDEPARTMENTIDField;
            }
            set {
                if ((object.ReferenceEquals(this.OWNERDEPARTMENTIDField, value) != true)) {
                    this.OWNERDEPARTMENTIDField = value;
                    this.RaisePropertyChanged("OWNERDEPARTMENTID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OWNERID {
            get {
                return this.OWNERIDField;
            }
            set {
                if ((object.ReferenceEquals(this.OWNERIDField, value) != true)) {
                    this.OWNERIDField = value;
                    this.RaisePropertyChanged("OWNERID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OWNERNAME {
            get {
                return this.OWNERNAMEField;
            }
            set {
                if ((object.ReferenceEquals(this.OWNERNAMEField, value) != true)) {
                    this.OWNERNAMEField = value;
                    this.RaisePropertyChanged("OWNERNAME");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OWNERPOSTID {
            get {
                return this.OWNERPOSTIDField;
            }
            set {
                if ((object.ReferenceEquals(this.OWNERPOSTIDField, value) != true)) {
                    this.OWNERPOSTIDField = value;
                    this.RaisePropertyChanged("OWNERPOSTID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SYSTEMCODE {
            get {
                return this.SYSTEMCODEField;
            }
            set {
                if ((object.ReferenceEquals(this.SYSTEMCODEField, value) != true)) {
                    this.SYSTEMCODEField = value;
                    this.RaisePropertyChanged("SYSTEMCODE");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> UPDATEDATE {
            get {
                return this.UPDATEDATEField;
            }
            set {
                if ((this.UPDATEDATEField.Equals(value) != true)) {
                    this.UPDATEDATEField = value;
                    this.RaisePropertyChanged("UPDATEDATE");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UPDATEUSERID {
            get {
                return this.UPDATEUSERIDField;
            }
            set {
                if ((object.ReferenceEquals(this.UPDATEUSERIDField, value) != true)) {
                    this.UPDATEUSERIDField = value;
                    this.RaisePropertyChanged("UPDATEUSERID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UPDATEUSERNAME {
            get {
                return this.UPDATEUSERNAMEField;
            }
            set {
                if ((object.ReferenceEquals(this.UPDATEUSERNAMEField, value) != true)) {
                    this.UPDATEUSERNAMEField = value;
                    this.RaisePropertyChanged("UPDATEUSERNAME");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StructuralObject", Namespace="http://schemas.datacontract.org/2004/07/System.Data.Objects.DataClasses", IsReference=true)]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SMT.Saas.Tools.FileUploadWS.EntityObject))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SMT.Saas.Tools.FileUploadWS.T_SYS_FILEUPLOAD))]
    public partial class StructuralObject : object, System.ComponentModel.INotifyPropertyChanged {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EntityObject", Namespace="http://schemas.datacontract.org/2004/07/System.Data.Objects.DataClasses", IsReference=true)]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SMT.Saas.Tools.FileUploadWS.T_SYS_FILEUPLOAD))]
    public partial class EntityObject : SMT.Saas.Tools.FileUploadWS.StructuralObject {
        
        private SMT.Saas.Tools.FileUploadWS.EntityKey EntityKeyField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SMT.Saas.Tools.FileUploadWS.EntityKey EntityKey {
            get {
                return this.EntityKeyField;
            }
            set {
                if ((object.ReferenceEquals(this.EntityKeyField, value) != true)) {
                    this.EntityKeyField = value;
                    this.RaisePropertyChanged("EntityKey");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EntityKey", Namespace="http://schemas.datacontract.org/2004/07/System.Data", IsReference=true)]
    public partial class EntityKey : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string EntityContainerNameField;
        
        private System.Collections.ObjectModel.ObservableCollection<SMT.Saas.Tools.FileUploadWS.EntityKeyMember> EntityKeyValuesField;
        
        private string EntitySetNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EntityContainerName {
            get {
                return this.EntityContainerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.EntityContainerNameField, value) != true)) {
                    this.EntityContainerNameField = value;
                    this.RaisePropertyChanged("EntityContainerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<SMT.Saas.Tools.FileUploadWS.EntityKeyMember> EntityKeyValues {
            get {
                return this.EntityKeyValuesField;
            }
            set {
                if ((object.ReferenceEquals(this.EntityKeyValuesField, value) != true)) {
                    this.EntityKeyValuesField = value;
                    this.RaisePropertyChanged("EntityKeyValues");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EntitySetName {
            get {
                return this.EntitySetNameField;
            }
            set {
                if ((object.ReferenceEquals(this.EntitySetNameField, value) != true)) {
                    this.EntitySetNameField = value;
                    this.RaisePropertyChanged("EntitySetName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EntityKeyMember", Namespace="http://schemas.datacontract.org/2004/07/System.Data")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SMT.Saas.Tools.FileUploadWS.EntityKey))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<SMT.Saas.Tools.FileUploadWS.EntityKeyMember>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SMT.Saas.Tools.FileUploadWS.EntityObject))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SMT.Saas.Tools.FileUploadWS.StructuralObject))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<SMT.Saas.Tools.FileUploadWS.T_SYS_FILEUPLOAD>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SMT.Saas.Tools.FileUploadWS.T_SYS_FILEUPLOAD))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<string>))]
    public partial class EntityKeyMember : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string KeyField;
        
        private object ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Key {
            get {
                return this.KeyField;
            }
            set {
                if ((object.ReferenceEquals(this.KeyField, value) != true)) {
                    this.KeyField = value;
                    this.RaisePropertyChanged("Key");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="", ConfigurationName="FileUploadWS.FileUploadManager")]
    public interface FileUploadManager {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:FileUploadManager/Get_ParentID", ReplyAction="urn:FileUploadManager/Get_ParentIDResponse")]
        System.IAsyncResult BeginGet_ParentID(string parentID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<SMT.Saas.Tools.FileUploadWS.T_SYS_FILEUPLOAD> EndGet_ParentID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:FileUploadManager/Add", ReplyAction="urn:FileUploadManager/AddResponse")]
        System.IAsyncResult BeginAdd(SMT.Saas.Tools.FileUploadWS.T_SYS_FILEUPLOAD obj, System.AsyncCallback callback, object asyncState);
        
        void EndAdd(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:FileUploadManager/Delete", ReplyAction="urn:FileUploadManager/DeleteResponse")]
        System.IAsyncResult BeginDelete(SMT.Saas.Tools.FileUploadWS.T_SYS_FILEUPLOAD obj, System.AsyncCallback callback, object asyncState);
        
        int EndDelete(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:FileUploadManager/Del", ReplyAction="urn:FileUploadManager/DelResponse")]
        System.IAsyncResult BeginDel(string id, System.AsyncCallback callback, object asyncState);
        
        int EndDel(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:FileUploadManager/DelTB", ReplyAction="urn:FileUploadManager/DelTBResponse")]
        System.IAsyncResult BeginDelTB(System.Collections.ObjectModel.ObservableCollection<string> ids, System.AsyncCallback callback, object asyncState);
        
        int EndDelTB(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:FileUploadManager/DelTB_ParentID", ReplyAction="urn:FileUploadManager/DelTB_ParentIDResponse")]
        System.IAsyncResult BeginDelTB_ParentID(System.Collections.ObjectModel.ObservableCollection<string> parentIDs, System.AsyncCallback callback, object asyncState);
        
        int EndDelTB_ParentID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:FileUploadManager/Upd", ReplyAction="urn:FileUploadManager/UpdResponse")]
        System.IAsyncResult BeginUpd(SMT.Saas.Tools.FileUploadWS.T_SYS_FILEUPLOAD obj, System.AsyncCallback callback, object asyncState);
        
        void EndUpd(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:FileUploadManager/FileUpLoad", ReplyAction="urn:FileUploadManager/FileUpLoadResponse")]
        System.IAsyncResult BeginFileUpLoad(string UploadFolder, byte[] FileByte, System.AsyncCallback callback, object asyncState);
        
        int EndFileUpLoad(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:FileUploadManager/AddFile", ReplyAction="urn:FileUploadManager/AddFileResponse")]
        System.IAsyncResult BeginAddFile(string fileName, byte[] data, int dataLength, string parameters, bool firstChunk, bool lastChunk, System.AsyncCallback callback, object asyncState);
        
        string EndAddFile(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:FileUploadManager/CancelUpload", ReplyAction="urn:FileUploadManager/CancelUploadResponse")]
        System.IAsyncResult BeginCancelUpload(string fileName, System.AsyncCallback callback, object asyncState);
        
        bool EndCancelUpload(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:FileUploadManager/DeleteUploadedFile", ReplyAction="urn:FileUploadManager/DeleteUploadedFileResponse")]
        System.IAsyncResult BeginDeleteUploadedFile(string fileName, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteUploadedFile(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:FileUploadManager/Del_FileAndID", ReplyAction="urn:FileUploadManager/Del_FileAndIDResponse")]
        System.IAsyncResult BeginDel_FileAndID(string fileName, string ID, System.AsyncCallback callback, object asyncState);
        
        void EndDel_FileAndID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:FileUploadManager/FinishedFileUpload", ReplyAction="urn:FileUploadManager/FinishedFileUploadResponse")]
        System.IAsyncResult BeginFinishedFileUpload(string fileName, string parameters, System.AsyncCallback callback, object asyncState);
        
        void EndFinishedFileUpload(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:FileUploadManager/Download", ReplyAction="urn:FileUploadManager/DownloadResponse")]
        System.IAsyncResult BeginDownload(string fileName, System.AsyncCallback callback, object asyncState);
        
        byte[] EndDownload(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:FileUploadManager/Download_va", ReplyAction="urn:FileUploadManager/Download_vaResponse")]
        System.IAsyncResult BeginDownload_va(string fileName, string username, string pwd, System.AsyncCallback callback, object asyncState);
        
        byte[] EndDownload_va(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface FileUploadManagerChannel : SMT.Saas.Tools.FileUploadWS.FileUploadManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Get_ParentIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Get_ParentIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<SMT.Saas.Tools.FileUploadWS.T_SYS_FILEUPLOAD> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<SMT.Saas.Tools.FileUploadWS.T_SYS_FILEUPLOAD>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DelTBCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DelTBCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DelTB_ParentIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DelTB_ParentIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FileUpLoadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public FileUpLoadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CancelUploadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CancelUploadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DownloadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DownloadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Download_vaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Download_vaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FileUploadManagerClient : System.ServiceModel.ClientBase<SMT.Saas.Tools.FileUploadWS.FileUploadManager>, SMT.Saas.Tools.FileUploadWS.FileUploadManager {
        
        private BeginOperationDelegate onBeginGet_ParentIDDelegate;
        
        private EndOperationDelegate onEndGet_ParentIDDelegate;
        
        private System.Threading.SendOrPostCallback onGet_ParentIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddDelegate;
        
        private EndOperationDelegate onEndAddDelegate;
        
        private System.Threading.SendOrPostCallback onAddCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteDelegate;
        
        private EndOperationDelegate onEndDeleteDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteCompletedDelegate;
        
        private BeginOperationDelegate onBeginDelDelegate;
        
        private EndOperationDelegate onEndDelDelegate;
        
        private System.Threading.SendOrPostCallback onDelCompletedDelegate;
        
        private BeginOperationDelegate onBeginDelTBDelegate;
        
        private EndOperationDelegate onEndDelTBDelegate;
        
        private System.Threading.SendOrPostCallback onDelTBCompletedDelegate;
        
        private BeginOperationDelegate onBeginDelTB_ParentIDDelegate;
        
        private EndOperationDelegate onEndDelTB_ParentIDDelegate;
        
        private System.Threading.SendOrPostCallback onDelTB_ParentIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdDelegate;
        
        private EndOperationDelegate onEndUpdDelegate;
        
        private System.Threading.SendOrPostCallback onUpdCompletedDelegate;
        
        private BeginOperationDelegate onBeginFileUpLoadDelegate;
        
        private EndOperationDelegate onEndFileUpLoadDelegate;
        
        private System.Threading.SendOrPostCallback onFileUpLoadCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddFileDelegate;
        
        private EndOperationDelegate onEndAddFileDelegate;
        
        private System.Threading.SendOrPostCallback onAddFileCompletedDelegate;
        
        private BeginOperationDelegate onBeginCancelUploadDelegate;
        
        private EndOperationDelegate onEndCancelUploadDelegate;
        
        private System.Threading.SendOrPostCallback onCancelUploadCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteUploadedFileDelegate;
        
        private EndOperationDelegate onEndDeleteUploadedFileDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteUploadedFileCompletedDelegate;
        
        private BeginOperationDelegate onBeginDel_FileAndIDDelegate;
        
        private EndOperationDelegate onEndDel_FileAndIDDelegate;
        
        private System.Threading.SendOrPostCallback onDel_FileAndIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginFinishedFileUploadDelegate;
        
        private EndOperationDelegate onEndFinishedFileUploadDelegate;
        
        private System.Threading.SendOrPostCallback onFinishedFileUploadCompletedDelegate;
        
        private BeginOperationDelegate onBeginDownloadDelegate;
        
        private EndOperationDelegate onEndDownloadDelegate;
        
        private System.Threading.SendOrPostCallback onDownloadCompletedDelegate;
        
        private BeginOperationDelegate onBeginDownload_vaDelegate;
        
        private EndOperationDelegate onEndDownload_vaDelegate;
        
        private System.Threading.SendOrPostCallback onDownload_vaCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public FileUploadManagerClient() {
        }
        
        public FileUploadManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FileUploadManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileUploadManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileUploadManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("无法设置 CookieContainer。请确保绑定包含 HttpCookieContainerBindingElement。");
                }
            }
        }
        
        public event System.EventHandler<Get_ParentIDCompletedEventArgs> Get_ParentIDCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AddCompleted;
        
        public event System.EventHandler<DeleteCompletedEventArgs> DeleteCompleted;
        
        public event System.EventHandler<DelCompletedEventArgs> DelCompleted;
        
        public event System.EventHandler<DelTBCompletedEventArgs> DelTBCompleted;
        
        public event System.EventHandler<DelTB_ParentIDCompletedEventArgs> DelTB_ParentIDCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdCompleted;
        
        public event System.EventHandler<FileUpLoadCompletedEventArgs> FileUpLoadCompleted;
        
        public event System.EventHandler<AddFileCompletedEventArgs> AddFileCompleted;
        
        public event System.EventHandler<CancelUploadCompletedEventArgs> CancelUploadCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteUploadedFileCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> Del_FileAndIDCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> FinishedFileUploadCompleted;
        
        public event System.EventHandler<DownloadCompletedEventArgs> DownloadCompleted;
        
        public event System.EventHandler<Download_vaCompletedEventArgs> Download_vaCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SMT.Saas.Tools.FileUploadWS.FileUploadManager.BeginGet_ParentID(string parentID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGet_ParentID(parentID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<SMT.Saas.Tools.FileUploadWS.T_SYS_FILEUPLOAD> SMT.Saas.Tools.FileUploadWS.FileUploadManager.EndGet_ParentID(System.IAsyncResult result) {
            return base.Channel.EndGet_ParentID(result);
        }
        
        private System.IAsyncResult OnBeginGet_ParentID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string parentID = ((string)(inValues[0]));
            return ((SMT.Saas.Tools.FileUploadWS.FileUploadManager)(this)).BeginGet_ParentID(parentID, callback, asyncState);
        }
        
        private object[] OnEndGet_ParentID(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<SMT.Saas.Tools.FileUploadWS.T_SYS_FILEUPLOAD> retVal = ((SMT.Saas.Tools.FileUploadWS.FileUploadManager)(this)).EndGet_ParentID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGet_ParentIDCompleted(object state) {
            if ((this.Get_ParentIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Get_ParentIDCompleted(this, new Get_ParentIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Get_ParentIDAsync(string parentID) {
            this.Get_ParentIDAsync(parentID, null);
        }
        
        public void Get_ParentIDAsync(string parentID, object userState) {
            if ((this.onBeginGet_ParentIDDelegate == null)) {
                this.onBeginGet_ParentIDDelegate = new BeginOperationDelegate(this.OnBeginGet_ParentID);
            }
            if ((this.onEndGet_ParentIDDelegate == null)) {
                this.onEndGet_ParentIDDelegate = new EndOperationDelegate(this.OnEndGet_ParentID);
            }
            if ((this.onGet_ParentIDCompletedDelegate == null)) {
                this.onGet_ParentIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGet_ParentIDCompleted);
            }
            base.InvokeAsync(this.onBeginGet_ParentIDDelegate, new object[] {
                        parentID}, this.onEndGet_ParentIDDelegate, this.onGet_ParentIDCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SMT.Saas.Tools.FileUploadWS.FileUploadManager.BeginAdd(SMT.Saas.Tools.FileUploadWS.T_SYS_FILEUPLOAD obj, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAdd(obj, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void SMT.Saas.Tools.FileUploadWS.FileUploadManager.EndAdd(System.IAsyncResult result) {
            base.Channel.EndAdd(result);
        }
        
        private System.IAsyncResult OnBeginAdd(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SMT.Saas.Tools.FileUploadWS.T_SYS_FILEUPLOAD obj = ((SMT.Saas.Tools.FileUploadWS.T_SYS_FILEUPLOAD)(inValues[0]));
            return ((SMT.Saas.Tools.FileUploadWS.FileUploadManager)(this)).BeginAdd(obj, callback, asyncState);
        }
        
        private object[] OnEndAdd(System.IAsyncResult result) {
            ((SMT.Saas.Tools.FileUploadWS.FileUploadManager)(this)).EndAdd(result);
            return null;
        }
        
        private void OnAddCompleted(object state) {
            if ((this.AddCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddAsync(SMT.Saas.Tools.FileUploadWS.T_SYS_FILEUPLOAD obj) {
            this.AddAsync(obj, null);
        }
        
        public void AddAsync(SMT.Saas.Tools.FileUploadWS.T_SYS_FILEUPLOAD obj, object userState) {
            if ((this.onBeginAddDelegate == null)) {
                this.onBeginAddDelegate = new BeginOperationDelegate(this.OnBeginAdd);
            }
            if ((this.onEndAddDelegate == null)) {
                this.onEndAddDelegate = new EndOperationDelegate(this.OnEndAdd);
            }
            if ((this.onAddCompletedDelegate == null)) {
                this.onAddCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddCompleted);
            }
            base.InvokeAsync(this.onBeginAddDelegate, new object[] {
                        obj}, this.onEndAddDelegate, this.onAddCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SMT.Saas.Tools.FileUploadWS.FileUploadManager.BeginDelete(SMT.Saas.Tools.FileUploadWS.T_SYS_FILEUPLOAD obj, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDelete(obj, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int SMT.Saas.Tools.FileUploadWS.FileUploadManager.EndDelete(System.IAsyncResult result) {
            return base.Channel.EndDelete(result);
        }
        
        private System.IAsyncResult OnBeginDelete(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SMT.Saas.Tools.FileUploadWS.T_SYS_FILEUPLOAD obj = ((SMT.Saas.Tools.FileUploadWS.T_SYS_FILEUPLOAD)(inValues[0]));
            return ((SMT.Saas.Tools.FileUploadWS.FileUploadManager)(this)).BeginDelete(obj, callback, asyncState);
        }
        
        private object[] OnEndDelete(System.IAsyncResult result) {
            int retVal = ((SMT.Saas.Tools.FileUploadWS.FileUploadManager)(this)).EndDelete(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteCompleted(object state) {
            if ((this.DeleteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteCompleted(this, new DeleteCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteAsync(SMT.Saas.Tools.FileUploadWS.T_SYS_FILEUPLOAD obj) {
            this.DeleteAsync(obj, null);
        }
        
        public void DeleteAsync(SMT.Saas.Tools.FileUploadWS.T_SYS_FILEUPLOAD obj, object userState) {
            if ((this.onBeginDeleteDelegate == null)) {
                this.onBeginDeleteDelegate = new BeginOperationDelegate(this.OnBeginDelete);
            }
            if ((this.onEndDeleteDelegate == null)) {
                this.onEndDeleteDelegate = new EndOperationDelegate(this.OnEndDelete);
            }
            if ((this.onDeleteCompletedDelegate == null)) {
                this.onDeleteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteDelegate, new object[] {
                        obj}, this.onEndDeleteDelegate, this.onDeleteCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SMT.Saas.Tools.FileUploadWS.FileUploadManager.BeginDel(string id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDel(id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int SMT.Saas.Tools.FileUploadWS.FileUploadManager.EndDel(System.IAsyncResult result) {
            return base.Channel.EndDel(result);
        }
        
        private System.IAsyncResult OnBeginDel(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string id = ((string)(inValues[0]));
            return ((SMT.Saas.Tools.FileUploadWS.FileUploadManager)(this)).BeginDel(id, callback, asyncState);
        }
        
        private object[] OnEndDel(System.IAsyncResult result) {
            int retVal = ((SMT.Saas.Tools.FileUploadWS.FileUploadManager)(this)).EndDel(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDelCompleted(object state) {
            if ((this.DelCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DelCompleted(this, new DelCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DelAsync(string id) {
            this.DelAsync(id, null);
        }
        
        public void DelAsync(string id, object userState) {
            if ((this.onBeginDelDelegate == null)) {
                this.onBeginDelDelegate = new BeginOperationDelegate(this.OnBeginDel);
            }
            if ((this.onEndDelDelegate == null)) {
                this.onEndDelDelegate = new EndOperationDelegate(this.OnEndDel);
            }
            if ((this.onDelCompletedDelegate == null)) {
                this.onDelCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDelCompleted);
            }
            base.InvokeAsync(this.onBeginDelDelegate, new object[] {
                        id}, this.onEndDelDelegate, this.onDelCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SMT.Saas.Tools.FileUploadWS.FileUploadManager.BeginDelTB(System.Collections.ObjectModel.ObservableCollection<string> ids, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDelTB(ids, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int SMT.Saas.Tools.FileUploadWS.FileUploadManager.EndDelTB(System.IAsyncResult result) {
            return base.Channel.EndDelTB(result);
        }
        
        private System.IAsyncResult OnBeginDelTB(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.ObjectModel.ObservableCollection<string> ids = ((System.Collections.ObjectModel.ObservableCollection<string>)(inValues[0]));
            return ((SMT.Saas.Tools.FileUploadWS.FileUploadManager)(this)).BeginDelTB(ids, callback, asyncState);
        }
        
        private object[] OnEndDelTB(System.IAsyncResult result) {
            int retVal = ((SMT.Saas.Tools.FileUploadWS.FileUploadManager)(this)).EndDelTB(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDelTBCompleted(object state) {
            if ((this.DelTBCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DelTBCompleted(this, new DelTBCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DelTBAsync(System.Collections.ObjectModel.ObservableCollection<string> ids) {
            this.DelTBAsync(ids, null);
        }
        
        public void DelTBAsync(System.Collections.ObjectModel.ObservableCollection<string> ids, object userState) {
            if ((this.onBeginDelTBDelegate == null)) {
                this.onBeginDelTBDelegate = new BeginOperationDelegate(this.OnBeginDelTB);
            }
            if ((this.onEndDelTBDelegate == null)) {
                this.onEndDelTBDelegate = new EndOperationDelegate(this.OnEndDelTB);
            }
            if ((this.onDelTBCompletedDelegate == null)) {
                this.onDelTBCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDelTBCompleted);
            }
            base.InvokeAsync(this.onBeginDelTBDelegate, new object[] {
                        ids}, this.onEndDelTBDelegate, this.onDelTBCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SMT.Saas.Tools.FileUploadWS.FileUploadManager.BeginDelTB_ParentID(System.Collections.ObjectModel.ObservableCollection<string> parentIDs, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDelTB_ParentID(parentIDs, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int SMT.Saas.Tools.FileUploadWS.FileUploadManager.EndDelTB_ParentID(System.IAsyncResult result) {
            return base.Channel.EndDelTB_ParentID(result);
        }
        
        private System.IAsyncResult OnBeginDelTB_ParentID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.ObjectModel.ObservableCollection<string> parentIDs = ((System.Collections.ObjectModel.ObservableCollection<string>)(inValues[0]));
            return ((SMT.Saas.Tools.FileUploadWS.FileUploadManager)(this)).BeginDelTB_ParentID(parentIDs, callback, asyncState);
        }
        
        private object[] OnEndDelTB_ParentID(System.IAsyncResult result) {
            int retVal = ((SMT.Saas.Tools.FileUploadWS.FileUploadManager)(this)).EndDelTB_ParentID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDelTB_ParentIDCompleted(object state) {
            if ((this.DelTB_ParentIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DelTB_ParentIDCompleted(this, new DelTB_ParentIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DelTB_ParentIDAsync(System.Collections.ObjectModel.ObservableCollection<string> parentIDs) {
            this.DelTB_ParentIDAsync(parentIDs, null);
        }
        
        public void DelTB_ParentIDAsync(System.Collections.ObjectModel.ObservableCollection<string> parentIDs, object userState) {
            if ((this.onBeginDelTB_ParentIDDelegate == null)) {
                this.onBeginDelTB_ParentIDDelegate = new BeginOperationDelegate(this.OnBeginDelTB_ParentID);
            }
            if ((this.onEndDelTB_ParentIDDelegate == null)) {
                this.onEndDelTB_ParentIDDelegate = new EndOperationDelegate(this.OnEndDelTB_ParentID);
            }
            if ((this.onDelTB_ParentIDCompletedDelegate == null)) {
                this.onDelTB_ParentIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDelTB_ParentIDCompleted);
            }
            base.InvokeAsync(this.onBeginDelTB_ParentIDDelegate, new object[] {
                        parentIDs}, this.onEndDelTB_ParentIDDelegate, this.onDelTB_ParentIDCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SMT.Saas.Tools.FileUploadWS.FileUploadManager.BeginUpd(SMT.Saas.Tools.FileUploadWS.T_SYS_FILEUPLOAD obj, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpd(obj, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void SMT.Saas.Tools.FileUploadWS.FileUploadManager.EndUpd(System.IAsyncResult result) {
            base.Channel.EndUpd(result);
        }
        
        private System.IAsyncResult OnBeginUpd(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SMT.Saas.Tools.FileUploadWS.T_SYS_FILEUPLOAD obj = ((SMT.Saas.Tools.FileUploadWS.T_SYS_FILEUPLOAD)(inValues[0]));
            return ((SMT.Saas.Tools.FileUploadWS.FileUploadManager)(this)).BeginUpd(obj, callback, asyncState);
        }
        
        private object[] OnEndUpd(System.IAsyncResult result) {
            ((SMT.Saas.Tools.FileUploadWS.FileUploadManager)(this)).EndUpd(result);
            return null;
        }
        
        private void OnUpdCompleted(object state) {
            if ((this.UpdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdAsync(SMT.Saas.Tools.FileUploadWS.T_SYS_FILEUPLOAD obj) {
            this.UpdAsync(obj, null);
        }
        
        public void UpdAsync(SMT.Saas.Tools.FileUploadWS.T_SYS_FILEUPLOAD obj, object userState) {
            if ((this.onBeginUpdDelegate == null)) {
                this.onBeginUpdDelegate = new BeginOperationDelegate(this.OnBeginUpd);
            }
            if ((this.onEndUpdDelegate == null)) {
                this.onEndUpdDelegate = new EndOperationDelegate(this.OnEndUpd);
            }
            if ((this.onUpdCompletedDelegate == null)) {
                this.onUpdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdCompleted);
            }
            base.InvokeAsync(this.onBeginUpdDelegate, new object[] {
                        obj}, this.onEndUpdDelegate, this.onUpdCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SMT.Saas.Tools.FileUploadWS.FileUploadManager.BeginFileUpLoad(string UploadFolder, byte[] FileByte, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFileUpLoad(UploadFolder, FileByte, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int SMT.Saas.Tools.FileUploadWS.FileUploadManager.EndFileUpLoad(System.IAsyncResult result) {
            return base.Channel.EndFileUpLoad(result);
        }
        
        private System.IAsyncResult OnBeginFileUpLoad(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string UploadFolder = ((string)(inValues[0]));
            byte[] FileByte = ((byte[])(inValues[1]));
            return ((SMT.Saas.Tools.FileUploadWS.FileUploadManager)(this)).BeginFileUpLoad(UploadFolder, FileByte, callback, asyncState);
        }
        
        private object[] OnEndFileUpLoad(System.IAsyncResult result) {
            int retVal = ((SMT.Saas.Tools.FileUploadWS.FileUploadManager)(this)).EndFileUpLoad(result);
            return new object[] {
                    retVal};
        }
        
        private void OnFileUpLoadCompleted(object state) {
            if ((this.FileUpLoadCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FileUpLoadCompleted(this, new FileUpLoadCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FileUpLoadAsync(string UploadFolder, byte[] FileByte) {
            this.FileUpLoadAsync(UploadFolder, FileByte, null);
        }
        
        public void FileUpLoadAsync(string UploadFolder, byte[] FileByte, object userState) {
            if ((this.onBeginFileUpLoadDelegate == null)) {
                this.onBeginFileUpLoadDelegate = new BeginOperationDelegate(this.OnBeginFileUpLoad);
            }
            if ((this.onEndFileUpLoadDelegate == null)) {
                this.onEndFileUpLoadDelegate = new EndOperationDelegate(this.OnEndFileUpLoad);
            }
            if ((this.onFileUpLoadCompletedDelegate == null)) {
                this.onFileUpLoadCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFileUpLoadCompleted);
            }
            base.InvokeAsync(this.onBeginFileUpLoadDelegate, new object[] {
                        UploadFolder,
                        FileByte}, this.onEndFileUpLoadDelegate, this.onFileUpLoadCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SMT.Saas.Tools.FileUploadWS.FileUploadManager.BeginAddFile(string fileName, byte[] data, int dataLength, string parameters, bool firstChunk, bool lastChunk, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddFile(fileName, data, dataLength, parameters, firstChunk, lastChunk, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string SMT.Saas.Tools.FileUploadWS.FileUploadManager.EndAddFile(System.IAsyncResult result) {
            return base.Channel.EndAddFile(result);
        }
        
        private System.IAsyncResult OnBeginAddFile(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string fileName = ((string)(inValues[0]));
            byte[] data = ((byte[])(inValues[1]));
            int dataLength = ((int)(inValues[2]));
            string parameters = ((string)(inValues[3]));
            bool firstChunk = ((bool)(inValues[4]));
            bool lastChunk = ((bool)(inValues[5]));
            return ((SMT.Saas.Tools.FileUploadWS.FileUploadManager)(this)).BeginAddFile(fileName, data, dataLength, parameters, firstChunk, lastChunk, callback, asyncState);
        }
        
        private object[] OnEndAddFile(System.IAsyncResult result) {
            string retVal = ((SMT.Saas.Tools.FileUploadWS.FileUploadManager)(this)).EndAddFile(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddFileCompleted(object state) {
            if ((this.AddFileCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddFileCompleted(this, new AddFileCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddFileAsync(string fileName, byte[] data, int dataLength, string parameters, bool firstChunk, bool lastChunk) {
            this.AddFileAsync(fileName, data, dataLength, parameters, firstChunk, lastChunk, null);
        }
        
        public void AddFileAsync(string fileName, byte[] data, int dataLength, string parameters, bool firstChunk, bool lastChunk, object userState) {
            if ((this.onBeginAddFileDelegate == null)) {
                this.onBeginAddFileDelegate = new BeginOperationDelegate(this.OnBeginAddFile);
            }
            if ((this.onEndAddFileDelegate == null)) {
                this.onEndAddFileDelegate = new EndOperationDelegate(this.OnEndAddFile);
            }
            if ((this.onAddFileCompletedDelegate == null)) {
                this.onAddFileCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddFileCompleted);
            }
            base.InvokeAsync(this.onBeginAddFileDelegate, new object[] {
                        fileName,
                        data,
                        dataLength,
                        parameters,
                        firstChunk,
                        lastChunk}, this.onEndAddFileDelegate, this.onAddFileCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SMT.Saas.Tools.FileUploadWS.FileUploadManager.BeginCancelUpload(string fileName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCancelUpload(fileName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool SMT.Saas.Tools.FileUploadWS.FileUploadManager.EndCancelUpload(System.IAsyncResult result) {
            return base.Channel.EndCancelUpload(result);
        }
        
        private System.IAsyncResult OnBeginCancelUpload(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string fileName = ((string)(inValues[0]));
            return ((SMT.Saas.Tools.FileUploadWS.FileUploadManager)(this)).BeginCancelUpload(fileName, callback, asyncState);
        }
        
        private object[] OnEndCancelUpload(System.IAsyncResult result) {
            bool retVal = ((SMT.Saas.Tools.FileUploadWS.FileUploadManager)(this)).EndCancelUpload(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCancelUploadCompleted(object state) {
            if ((this.CancelUploadCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CancelUploadCompleted(this, new CancelUploadCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CancelUploadAsync(string fileName) {
            this.CancelUploadAsync(fileName, null);
        }
        
        public void CancelUploadAsync(string fileName, object userState) {
            if ((this.onBeginCancelUploadDelegate == null)) {
                this.onBeginCancelUploadDelegate = new BeginOperationDelegate(this.OnBeginCancelUpload);
            }
            if ((this.onEndCancelUploadDelegate == null)) {
                this.onEndCancelUploadDelegate = new EndOperationDelegate(this.OnEndCancelUpload);
            }
            if ((this.onCancelUploadCompletedDelegate == null)) {
                this.onCancelUploadCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCancelUploadCompleted);
            }
            base.InvokeAsync(this.onBeginCancelUploadDelegate, new object[] {
                        fileName}, this.onEndCancelUploadDelegate, this.onCancelUploadCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SMT.Saas.Tools.FileUploadWS.FileUploadManager.BeginDeleteUploadedFile(string fileName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteUploadedFile(fileName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void SMT.Saas.Tools.FileUploadWS.FileUploadManager.EndDeleteUploadedFile(System.IAsyncResult result) {
            base.Channel.EndDeleteUploadedFile(result);
        }
        
        private System.IAsyncResult OnBeginDeleteUploadedFile(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string fileName = ((string)(inValues[0]));
            return ((SMT.Saas.Tools.FileUploadWS.FileUploadManager)(this)).BeginDeleteUploadedFile(fileName, callback, asyncState);
        }
        
        private object[] OnEndDeleteUploadedFile(System.IAsyncResult result) {
            ((SMT.Saas.Tools.FileUploadWS.FileUploadManager)(this)).EndDeleteUploadedFile(result);
            return null;
        }
        
        private void OnDeleteUploadedFileCompleted(object state) {
            if ((this.DeleteUploadedFileCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteUploadedFileCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteUploadedFileAsync(string fileName) {
            this.DeleteUploadedFileAsync(fileName, null);
        }
        
        public void DeleteUploadedFileAsync(string fileName, object userState) {
            if ((this.onBeginDeleteUploadedFileDelegate == null)) {
                this.onBeginDeleteUploadedFileDelegate = new BeginOperationDelegate(this.OnBeginDeleteUploadedFile);
            }
            if ((this.onEndDeleteUploadedFileDelegate == null)) {
                this.onEndDeleteUploadedFileDelegate = new EndOperationDelegate(this.OnEndDeleteUploadedFile);
            }
            if ((this.onDeleteUploadedFileCompletedDelegate == null)) {
                this.onDeleteUploadedFileCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteUploadedFileCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteUploadedFileDelegate, new object[] {
                        fileName}, this.onEndDeleteUploadedFileDelegate, this.onDeleteUploadedFileCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SMT.Saas.Tools.FileUploadWS.FileUploadManager.BeginDel_FileAndID(string fileName, string ID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDel_FileAndID(fileName, ID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void SMT.Saas.Tools.FileUploadWS.FileUploadManager.EndDel_FileAndID(System.IAsyncResult result) {
            base.Channel.EndDel_FileAndID(result);
        }
        
        private System.IAsyncResult OnBeginDel_FileAndID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string fileName = ((string)(inValues[0]));
            string ID = ((string)(inValues[1]));
            return ((SMT.Saas.Tools.FileUploadWS.FileUploadManager)(this)).BeginDel_FileAndID(fileName, ID, callback, asyncState);
        }
        
        private object[] OnEndDel_FileAndID(System.IAsyncResult result) {
            ((SMT.Saas.Tools.FileUploadWS.FileUploadManager)(this)).EndDel_FileAndID(result);
            return null;
        }
        
        private void OnDel_FileAndIDCompleted(object state) {
            if ((this.Del_FileAndIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Del_FileAndIDCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Del_FileAndIDAsync(string fileName, string ID) {
            this.Del_FileAndIDAsync(fileName, ID, null);
        }
        
        public void Del_FileAndIDAsync(string fileName, string ID, object userState) {
            if ((this.onBeginDel_FileAndIDDelegate == null)) {
                this.onBeginDel_FileAndIDDelegate = new BeginOperationDelegate(this.OnBeginDel_FileAndID);
            }
            if ((this.onEndDel_FileAndIDDelegate == null)) {
                this.onEndDel_FileAndIDDelegate = new EndOperationDelegate(this.OnEndDel_FileAndID);
            }
            if ((this.onDel_FileAndIDCompletedDelegate == null)) {
                this.onDel_FileAndIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDel_FileAndIDCompleted);
            }
            base.InvokeAsync(this.onBeginDel_FileAndIDDelegate, new object[] {
                        fileName,
                        ID}, this.onEndDel_FileAndIDDelegate, this.onDel_FileAndIDCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SMT.Saas.Tools.FileUploadWS.FileUploadManager.BeginFinishedFileUpload(string fileName, string parameters, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFinishedFileUpload(fileName, parameters, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void SMT.Saas.Tools.FileUploadWS.FileUploadManager.EndFinishedFileUpload(System.IAsyncResult result) {
            base.Channel.EndFinishedFileUpload(result);
        }
        
        private System.IAsyncResult OnBeginFinishedFileUpload(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string fileName = ((string)(inValues[0]));
            string parameters = ((string)(inValues[1]));
            return ((SMT.Saas.Tools.FileUploadWS.FileUploadManager)(this)).BeginFinishedFileUpload(fileName, parameters, callback, asyncState);
        }
        
        private object[] OnEndFinishedFileUpload(System.IAsyncResult result) {
            ((SMT.Saas.Tools.FileUploadWS.FileUploadManager)(this)).EndFinishedFileUpload(result);
            return null;
        }
        
        private void OnFinishedFileUploadCompleted(object state) {
            if ((this.FinishedFileUploadCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FinishedFileUploadCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FinishedFileUploadAsync(string fileName, string parameters) {
            this.FinishedFileUploadAsync(fileName, parameters, null);
        }
        
        public void FinishedFileUploadAsync(string fileName, string parameters, object userState) {
            if ((this.onBeginFinishedFileUploadDelegate == null)) {
                this.onBeginFinishedFileUploadDelegate = new BeginOperationDelegate(this.OnBeginFinishedFileUpload);
            }
            if ((this.onEndFinishedFileUploadDelegate == null)) {
                this.onEndFinishedFileUploadDelegate = new EndOperationDelegate(this.OnEndFinishedFileUpload);
            }
            if ((this.onFinishedFileUploadCompletedDelegate == null)) {
                this.onFinishedFileUploadCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFinishedFileUploadCompleted);
            }
            base.InvokeAsync(this.onBeginFinishedFileUploadDelegate, new object[] {
                        fileName,
                        parameters}, this.onEndFinishedFileUploadDelegate, this.onFinishedFileUploadCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SMT.Saas.Tools.FileUploadWS.FileUploadManager.BeginDownload(string fileName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDownload(fileName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        byte[] SMT.Saas.Tools.FileUploadWS.FileUploadManager.EndDownload(System.IAsyncResult result) {
            return base.Channel.EndDownload(result);
        }
        
        private System.IAsyncResult OnBeginDownload(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string fileName = ((string)(inValues[0]));
            return ((SMT.Saas.Tools.FileUploadWS.FileUploadManager)(this)).BeginDownload(fileName, callback, asyncState);
        }
        
        private object[] OnEndDownload(System.IAsyncResult result) {
            byte[] retVal = ((SMT.Saas.Tools.FileUploadWS.FileUploadManager)(this)).EndDownload(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDownloadCompleted(object state) {
            if ((this.DownloadCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DownloadCompleted(this, new DownloadCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DownloadAsync(string fileName) {
            this.DownloadAsync(fileName, null);
        }
        
        public void DownloadAsync(string fileName, object userState) {
            if ((this.onBeginDownloadDelegate == null)) {
                this.onBeginDownloadDelegate = new BeginOperationDelegate(this.OnBeginDownload);
            }
            if ((this.onEndDownloadDelegate == null)) {
                this.onEndDownloadDelegate = new EndOperationDelegate(this.OnEndDownload);
            }
            if ((this.onDownloadCompletedDelegate == null)) {
                this.onDownloadCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDownloadCompleted);
            }
            base.InvokeAsync(this.onBeginDownloadDelegate, new object[] {
                        fileName}, this.onEndDownloadDelegate, this.onDownloadCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SMT.Saas.Tools.FileUploadWS.FileUploadManager.BeginDownload_va(string fileName, string username, string pwd, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDownload_va(fileName, username, pwd, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        byte[] SMT.Saas.Tools.FileUploadWS.FileUploadManager.EndDownload_va(System.IAsyncResult result) {
            return base.Channel.EndDownload_va(result);
        }
        
        private System.IAsyncResult OnBeginDownload_va(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string fileName = ((string)(inValues[0]));
            string username = ((string)(inValues[1]));
            string pwd = ((string)(inValues[2]));
            return ((SMT.Saas.Tools.FileUploadWS.FileUploadManager)(this)).BeginDownload_va(fileName, username, pwd, callback, asyncState);
        }
        
        private object[] OnEndDownload_va(System.IAsyncResult result) {
            byte[] retVal = ((SMT.Saas.Tools.FileUploadWS.FileUploadManager)(this)).EndDownload_va(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDownload_vaCompleted(object state) {
            if ((this.Download_vaCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Download_vaCompleted(this, new Download_vaCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Download_vaAsync(string fileName, string username, string pwd) {
            this.Download_vaAsync(fileName, username, pwd, null);
        }
        
        public void Download_vaAsync(string fileName, string username, string pwd, object userState) {
            if ((this.onBeginDownload_vaDelegate == null)) {
                this.onBeginDownload_vaDelegate = new BeginOperationDelegate(this.OnBeginDownload_va);
            }
            if ((this.onEndDownload_vaDelegate == null)) {
                this.onEndDownload_vaDelegate = new EndOperationDelegate(this.OnEndDownload_va);
            }
            if ((this.onDownload_vaCompletedDelegate == null)) {
                this.onDownload_vaCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDownload_vaCompleted);
            }
            base.InvokeAsync(this.onBeginDownload_vaDelegate, new object[] {
                        fileName,
                        username,
                        pwd}, this.onEndDownload_vaDelegate, this.onDownload_vaCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override SMT.Saas.Tools.FileUploadWS.FileUploadManager CreateChannel() {
            return new FileUploadManagerClientChannel(this);
        }
        
        private class FileUploadManagerClientChannel : ChannelBase<SMT.Saas.Tools.FileUploadWS.FileUploadManager>, SMT.Saas.Tools.FileUploadWS.FileUploadManager {
            
            public FileUploadManagerClientChannel(System.ServiceModel.ClientBase<SMT.Saas.Tools.FileUploadWS.FileUploadManager> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGet_ParentID(string parentID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = parentID;
                System.IAsyncResult _result = base.BeginInvoke("Get_ParentID", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<SMT.Saas.Tools.FileUploadWS.T_SYS_FILEUPLOAD> EndGet_ParentID(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<SMT.Saas.Tools.FileUploadWS.T_SYS_FILEUPLOAD> _result = ((System.Collections.ObjectModel.ObservableCollection<SMT.Saas.Tools.FileUploadWS.T_SYS_FILEUPLOAD>)(base.EndInvoke("Get_ParentID", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAdd(SMT.Saas.Tools.FileUploadWS.T_SYS_FILEUPLOAD obj, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = obj;
                System.IAsyncResult _result = base.BeginInvoke("Add", _args, callback, asyncState);
                return _result;
            }
            
            public void EndAdd(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("Add", _args, result);
            }
            
            public System.IAsyncResult BeginDelete(SMT.Saas.Tools.FileUploadWS.T_SYS_FILEUPLOAD obj, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = obj;
                System.IAsyncResult _result = base.BeginInvoke("Delete", _args, callback, asyncState);
                return _result;
            }
            
            public int EndDelete(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("Delete", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDel(string id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = id;
                System.IAsyncResult _result = base.BeginInvoke("Del", _args, callback, asyncState);
                return _result;
            }
            
            public int EndDel(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("Del", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDelTB(System.Collections.ObjectModel.ObservableCollection<string> ids, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = ids;
                System.IAsyncResult _result = base.BeginInvoke("DelTB", _args, callback, asyncState);
                return _result;
            }
            
            public int EndDelTB(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("DelTB", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDelTB_ParentID(System.Collections.ObjectModel.ObservableCollection<string> parentIDs, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = parentIDs;
                System.IAsyncResult _result = base.BeginInvoke("DelTB_ParentID", _args, callback, asyncState);
                return _result;
            }
            
            public int EndDelTB_ParentID(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("DelTB_ParentID", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUpd(SMT.Saas.Tools.FileUploadWS.T_SYS_FILEUPLOAD obj, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = obj;
                System.IAsyncResult _result = base.BeginInvoke("Upd", _args, callback, asyncState);
                return _result;
            }
            
            public void EndUpd(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("Upd", _args, result);
            }
            
            public System.IAsyncResult BeginFileUpLoad(string UploadFolder, byte[] FileByte, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = UploadFolder;
                _args[1] = FileByte;
                System.IAsyncResult _result = base.BeginInvoke("FileUpLoad", _args, callback, asyncState);
                return _result;
            }
            
            public int EndFileUpLoad(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("FileUpLoad", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddFile(string fileName, byte[] data, int dataLength, string parameters, bool firstChunk, bool lastChunk, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[6];
                _args[0] = fileName;
                _args[1] = data;
                _args[2] = dataLength;
                _args[3] = parameters;
                _args[4] = firstChunk;
                _args[5] = lastChunk;
                System.IAsyncResult _result = base.BeginInvoke("AddFile", _args, callback, asyncState);
                return _result;
            }
            
            public string EndAddFile(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("AddFile", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCancelUpload(string fileName, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = fileName;
                System.IAsyncResult _result = base.BeginInvoke("CancelUpload", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndCancelUpload(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("CancelUpload", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteUploadedFile(string fileName, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = fileName;
                System.IAsyncResult _result = base.BeginInvoke("DeleteUploadedFile", _args, callback, asyncState);
                return _result;
            }
            
            public void EndDeleteUploadedFile(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("DeleteUploadedFile", _args, result);
            }
            
            public System.IAsyncResult BeginDel_FileAndID(string fileName, string ID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = fileName;
                _args[1] = ID;
                System.IAsyncResult _result = base.BeginInvoke("Del_FileAndID", _args, callback, asyncState);
                return _result;
            }
            
            public void EndDel_FileAndID(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("Del_FileAndID", _args, result);
            }
            
            public System.IAsyncResult BeginFinishedFileUpload(string fileName, string parameters, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = fileName;
                _args[1] = parameters;
                System.IAsyncResult _result = base.BeginInvoke("FinishedFileUpload", _args, callback, asyncState);
                return _result;
            }
            
            public void EndFinishedFileUpload(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("FinishedFileUpload", _args, result);
            }
            
            public System.IAsyncResult BeginDownload(string fileName, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = fileName;
                System.IAsyncResult _result = base.BeginInvoke("Download", _args, callback, asyncState);
                return _result;
            }
            
            public byte[] EndDownload(System.IAsyncResult result) {
                object[] _args = new object[0];
                byte[] _result = ((byte[])(base.EndInvoke("Download", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDownload_va(string fileName, string username, string pwd, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = fileName;
                _args[1] = username;
                _args[2] = pwd;
                System.IAsyncResult _result = base.BeginInvoke("Download_va", _args, callback, asyncState);
                return _result;
            }
            
            public byte[] EndDownload_va(System.IAsyncResult result) {
                object[] _args = new object[0];
                byte[] _result = ((byte[])(base.EndInvoke("Download_va", _args, result)));
                return _result;
            }
        }
    }
}
