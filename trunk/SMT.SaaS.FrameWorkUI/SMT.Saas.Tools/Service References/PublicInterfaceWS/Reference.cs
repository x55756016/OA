//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.269
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.50401.0
// 
namespace SMT.Saas.Tools.PublicInterfaceWS {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserInfo", Namespace="http://schemas.datacontract.org/2004/07/SMT.SaaS.PublicInterface.BLL")]
    public partial class UserInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string COMPANYIDField;
        
        private string DEPARTMENTIDField;
        
        private string POSTIDField;
        
        private string USERIDField;
        
        private string USERNAMEField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string COMPANYID {
            get {
                return this.COMPANYIDField;
            }
            set {
                if ((object.ReferenceEquals(this.COMPANYIDField, value) != true)) {
                    this.COMPANYIDField = value;
                    this.RaisePropertyChanged("COMPANYID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DEPARTMENTID {
            get {
                return this.DEPARTMENTIDField;
            }
            set {
                if ((object.ReferenceEquals(this.DEPARTMENTIDField, value) != true)) {
                    this.DEPARTMENTIDField = value;
                    this.RaisePropertyChanged("DEPARTMENTID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string POSTID {
            get {
                return this.POSTIDField;
            }
            set {
                if ((object.ReferenceEquals(this.POSTIDField, value) != true)) {
                    this.POSTIDField = value;
                    this.RaisePropertyChanged("POSTID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string USERID {
            get {
                return this.USERIDField;
            }
            set {
                if ((object.ReferenceEquals(this.USERIDField, value) != true)) {
                    this.USERIDField = value;
                    this.RaisePropertyChanged("USERID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string USERNAME {
            get {
                return this.USERNAMEField;
            }
            set {
                if ((object.ReferenceEquals(this.USERNAMEField, value) != true)) {
                    this.USERNAMEField = value;
                    this.RaisePropertyChanged("USERNAME");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PublicInterfaceWS.IPublicService")]
    public interface IPublicService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPublicService/GetBusinessObject", ReplyAction="http://tempuri.org/IPublicService/GetBusinessObjectResponse")]
        System.IAsyncResult BeginGetBusinessObject(string SystemCode, string BusinessObjectName, System.AsyncCallback callback, object asyncState);
        
        string EndGetBusinessObject(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPublicService/GetContent", ReplyAction="http://tempuri.org/IPublicService/GetContentResponse")]
        System.IAsyncResult BeginGetContent(string FORMID, System.AsyncCallback callback, object asyncState);
        
        byte[] EndGetContent(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPublicService/DeleteContent", ReplyAction="http://tempuri.org/IPublicService/DeleteContentResponse")]
        System.IAsyncResult BeginDeleteContent(string FORMID, System.AsyncCallback callback, object asyncState);
        
        bool EndDeleteContent(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPublicService/UpdateContent", ReplyAction="http://tempuri.org/IPublicService/UpdateContentResponse")]
        System.IAsyncResult BeginUpdateContent(string FormID, byte[] content, SMT.Saas.Tools.PublicInterfaceWS.UserInfo userinfo, System.AsyncCallback callback, object asyncState);
        
        bool EndUpdateContent(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPublicService/AddContent", ReplyAction="http://tempuri.org/IPublicService/AddContentResponse")]
        System.IAsyncResult BeginAddContent(string FormID, byte[] content, string CompanyID, string SystemCode, string ModelName, SMT.Saas.Tools.PublicInterfaceWS.UserInfo userinfo, System.AsyncCallback callback, object asyncState);
        
        bool EndAddContent(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPublicService/IsExits", ReplyAction="http://tempuri.org/IPublicService/IsExitsResponse")]
        System.IAsyncResult BeginIsExits(string FORMID, System.AsyncCallback callback, object asyncState);
        
        bool EndIsExits(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPublicServiceChannel : SMT.Saas.Tools.PublicInterfaceWS.IPublicService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetBusinessObjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetBusinessObjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetContentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetContentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteContentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteContentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UpdateContentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UpdateContentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddContentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddContentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class IsExitsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public IsExitsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PublicServiceClient : System.ServiceModel.ClientBase<SMT.Saas.Tools.PublicInterfaceWS.IPublicService>, SMT.Saas.Tools.PublicInterfaceWS.IPublicService {
        
        private BeginOperationDelegate onBeginGetBusinessObjectDelegate;
        
        private EndOperationDelegate onEndGetBusinessObjectDelegate;
        
        private System.Threading.SendOrPostCallback onGetBusinessObjectCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetContentDelegate;
        
        private EndOperationDelegate onEndGetContentDelegate;
        
        private System.Threading.SendOrPostCallback onGetContentCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteContentDelegate;
        
        private EndOperationDelegate onEndDeleteContentDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteContentCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateContentDelegate;
        
        private EndOperationDelegate onEndUpdateContentDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateContentCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddContentDelegate;
        
        private EndOperationDelegate onEndAddContentDelegate;
        
        private System.Threading.SendOrPostCallback onAddContentCompletedDelegate;
        
        private BeginOperationDelegate onBeginIsExitsDelegate;
        
        private EndOperationDelegate onEndIsExitsDelegate;
        
        private System.Threading.SendOrPostCallback onIsExitsCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public PublicServiceClient() {
        }
        
        public PublicServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PublicServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PublicServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PublicServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("无法设置 CookieContainer。请确保绑定包含 HttpCookieContainerBindingElement。");
                }
            }
        }
        
        public event System.EventHandler<GetBusinessObjectCompletedEventArgs> GetBusinessObjectCompleted;
        
        public event System.EventHandler<GetContentCompletedEventArgs> GetContentCompleted;
        
        public event System.EventHandler<DeleteContentCompletedEventArgs> DeleteContentCompleted;
        
        public event System.EventHandler<UpdateContentCompletedEventArgs> UpdateContentCompleted;
        
        public event System.EventHandler<AddContentCompletedEventArgs> AddContentCompleted;
        
        public event System.EventHandler<IsExitsCompletedEventArgs> IsExitsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SMT.Saas.Tools.PublicInterfaceWS.IPublicService.BeginGetBusinessObject(string SystemCode, string BusinessObjectName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetBusinessObject(SystemCode, BusinessObjectName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string SMT.Saas.Tools.PublicInterfaceWS.IPublicService.EndGetBusinessObject(System.IAsyncResult result) {
            return base.Channel.EndGetBusinessObject(result);
        }
        
        private System.IAsyncResult OnBeginGetBusinessObject(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SystemCode = ((string)(inValues[0]));
            string BusinessObjectName = ((string)(inValues[1]));
            return ((SMT.Saas.Tools.PublicInterfaceWS.IPublicService)(this)).BeginGetBusinessObject(SystemCode, BusinessObjectName, callback, asyncState);
        }
        
        private object[] OnEndGetBusinessObject(System.IAsyncResult result) {
            string retVal = ((SMT.Saas.Tools.PublicInterfaceWS.IPublicService)(this)).EndGetBusinessObject(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetBusinessObjectCompleted(object state) {
            if ((this.GetBusinessObjectCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetBusinessObjectCompleted(this, new GetBusinessObjectCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetBusinessObjectAsync(string SystemCode, string BusinessObjectName) {
            this.GetBusinessObjectAsync(SystemCode, BusinessObjectName, null);
        }
        
        public void GetBusinessObjectAsync(string SystemCode, string BusinessObjectName, object userState) {
            if ((this.onBeginGetBusinessObjectDelegate == null)) {
                this.onBeginGetBusinessObjectDelegate = new BeginOperationDelegate(this.OnBeginGetBusinessObject);
            }
            if ((this.onEndGetBusinessObjectDelegate == null)) {
                this.onEndGetBusinessObjectDelegate = new EndOperationDelegate(this.OnEndGetBusinessObject);
            }
            if ((this.onGetBusinessObjectCompletedDelegate == null)) {
                this.onGetBusinessObjectCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetBusinessObjectCompleted);
            }
            base.InvokeAsync(this.onBeginGetBusinessObjectDelegate, new object[] {
                        SystemCode,
                        BusinessObjectName}, this.onEndGetBusinessObjectDelegate, this.onGetBusinessObjectCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SMT.Saas.Tools.PublicInterfaceWS.IPublicService.BeginGetContent(string FORMID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetContent(FORMID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        byte[] SMT.Saas.Tools.PublicInterfaceWS.IPublicService.EndGetContent(System.IAsyncResult result) {
            return base.Channel.EndGetContent(result);
        }
        
        private System.IAsyncResult OnBeginGetContent(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string FORMID = ((string)(inValues[0]));
            return ((SMT.Saas.Tools.PublicInterfaceWS.IPublicService)(this)).BeginGetContent(FORMID, callback, asyncState);
        }
        
        private object[] OnEndGetContent(System.IAsyncResult result) {
            byte[] retVal = ((SMT.Saas.Tools.PublicInterfaceWS.IPublicService)(this)).EndGetContent(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetContentCompleted(object state) {
            if ((this.GetContentCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetContentCompleted(this, new GetContentCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetContentAsync(string FORMID) {
            this.GetContentAsync(FORMID, null);
        }
        
        public void GetContentAsync(string FORMID, object userState) {
            if ((this.onBeginGetContentDelegate == null)) {
                this.onBeginGetContentDelegate = new BeginOperationDelegate(this.OnBeginGetContent);
            }
            if ((this.onEndGetContentDelegate == null)) {
                this.onEndGetContentDelegate = new EndOperationDelegate(this.OnEndGetContent);
            }
            if ((this.onGetContentCompletedDelegate == null)) {
                this.onGetContentCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetContentCompleted);
            }
            base.InvokeAsync(this.onBeginGetContentDelegate, new object[] {
                        FORMID}, this.onEndGetContentDelegate, this.onGetContentCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SMT.Saas.Tools.PublicInterfaceWS.IPublicService.BeginDeleteContent(string FORMID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteContent(FORMID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool SMT.Saas.Tools.PublicInterfaceWS.IPublicService.EndDeleteContent(System.IAsyncResult result) {
            return base.Channel.EndDeleteContent(result);
        }
        
        private System.IAsyncResult OnBeginDeleteContent(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string FORMID = ((string)(inValues[0]));
            return ((SMT.Saas.Tools.PublicInterfaceWS.IPublicService)(this)).BeginDeleteContent(FORMID, callback, asyncState);
        }
        
        private object[] OnEndDeleteContent(System.IAsyncResult result) {
            bool retVal = ((SMT.Saas.Tools.PublicInterfaceWS.IPublicService)(this)).EndDeleteContent(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteContentCompleted(object state) {
            if ((this.DeleteContentCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteContentCompleted(this, new DeleteContentCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteContentAsync(string FORMID) {
            this.DeleteContentAsync(FORMID, null);
        }
        
        public void DeleteContentAsync(string FORMID, object userState) {
            if ((this.onBeginDeleteContentDelegate == null)) {
                this.onBeginDeleteContentDelegate = new BeginOperationDelegate(this.OnBeginDeleteContent);
            }
            if ((this.onEndDeleteContentDelegate == null)) {
                this.onEndDeleteContentDelegate = new EndOperationDelegate(this.OnEndDeleteContent);
            }
            if ((this.onDeleteContentCompletedDelegate == null)) {
                this.onDeleteContentCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteContentCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteContentDelegate, new object[] {
                        FORMID}, this.onEndDeleteContentDelegate, this.onDeleteContentCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SMT.Saas.Tools.PublicInterfaceWS.IPublicService.BeginUpdateContent(string FormID, byte[] content, SMT.Saas.Tools.PublicInterfaceWS.UserInfo userinfo, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateContent(FormID, content, userinfo, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool SMT.Saas.Tools.PublicInterfaceWS.IPublicService.EndUpdateContent(System.IAsyncResult result) {
            return base.Channel.EndUpdateContent(result);
        }
        
        private System.IAsyncResult OnBeginUpdateContent(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string FormID = ((string)(inValues[0]));
            byte[] content = ((byte[])(inValues[1]));
            SMT.Saas.Tools.PublicInterfaceWS.UserInfo userinfo = ((SMT.Saas.Tools.PublicInterfaceWS.UserInfo)(inValues[2]));
            return ((SMT.Saas.Tools.PublicInterfaceWS.IPublicService)(this)).BeginUpdateContent(FormID, content, userinfo, callback, asyncState);
        }
        
        private object[] OnEndUpdateContent(System.IAsyncResult result) {
            bool retVal = ((SMT.Saas.Tools.PublicInterfaceWS.IPublicService)(this)).EndUpdateContent(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUpdateContentCompleted(object state) {
            if ((this.UpdateContentCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateContentCompleted(this, new UpdateContentCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateContentAsync(string FormID, byte[] content, SMT.Saas.Tools.PublicInterfaceWS.UserInfo userinfo) {
            this.UpdateContentAsync(FormID, content, userinfo, null);
        }
        
        public void UpdateContentAsync(string FormID, byte[] content, SMT.Saas.Tools.PublicInterfaceWS.UserInfo userinfo, object userState) {
            if ((this.onBeginUpdateContentDelegate == null)) {
                this.onBeginUpdateContentDelegate = new BeginOperationDelegate(this.OnBeginUpdateContent);
            }
            if ((this.onEndUpdateContentDelegate == null)) {
                this.onEndUpdateContentDelegate = new EndOperationDelegate(this.OnEndUpdateContent);
            }
            if ((this.onUpdateContentCompletedDelegate == null)) {
                this.onUpdateContentCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateContentCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateContentDelegate, new object[] {
                        FormID,
                        content,
                        userinfo}, this.onEndUpdateContentDelegate, this.onUpdateContentCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SMT.Saas.Tools.PublicInterfaceWS.IPublicService.BeginAddContent(string FormID, byte[] content, string CompanyID, string SystemCode, string ModelName, SMT.Saas.Tools.PublicInterfaceWS.UserInfo userinfo, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddContent(FormID, content, CompanyID, SystemCode, ModelName, userinfo, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool SMT.Saas.Tools.PublicInterfaceWS.IPublicService.EndAddContent(System.IAsyncResult result) {
            return base.Channel.EndAddContent(result);
        }
        
        private System.IAsyncResult OnBeginAddContent(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string FormID = ((string)(inValues[0]));
            byte[] content = ((byte[])(inValues[1]));
            string CompanyID = ((string)(inValues[2]));
            string SystemCode = ((string)(inValues[3]));
            string ModelName = ((string)(inValues[4]));
            SMT.Saas.Tools.PublicInterfaceWS.UserInfo userinfo = ((SMT.Saas.Tools.PublicInterfaceWS.UserInfo)(inValues[5]));
            return ((SMT.Saas.Tools.PublicInterfaceWS.IPublicService)(this)).BeginAddContent(FormID, content, CompanyID, SystemCode, ModelName, userinfo, callback, asyncState);
        }
        
        private object[] OnEndAddContent(System.IAsyncResult result) {
            bool retVal = ((SMT.Saas.Tools.PublicInterfaceWS.IPublicService)(this)).EndAddContent(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddContentCompleted(object state) {
            if ((this.AddContentCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddContentCompleted(this, new AddContentCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddContentAsync(string FormID, byte[] content, string CompanyID, string SystemCode, string ModelName, SMT.Saas.Tools.PublicInterfaceWS.UserInfo userinfo) {
            this.AddContentAsync(FormID, content, CompanyID, SystemCode, ModelName, userinfo, null);
        }
        
        public void AddContentAsync(string FormID, byte[] content, string CompanyID, string SystemCode, string ModelName, SMT.Saas.Tools.PublicInterfaceWS.UserInfo userinfo, object userState) {
            if ((this.onBeginAddContentDelegate == null)) {
                this.onBeginAddContentDelegate = new BeginOperationDelegate(this.OnBeginAddContent);
            }
            if ((this.onEndAddContentDelegate == null)) {
                this.onEndAddContentDelegate = new EndOperationDelegate(this.OnEndAddContent);
            }
            if ((this.onAddContentCompletedDelegate == null)) {
                this.onAddContentCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddContentCompleted);
            }
            base.InvokeAsync(this.onBeginAddContentDelegate, new object[] {
                        FormID,
                        content,
                        CompanyID,
                        SystemCode,
                        ModelName,
                        userinfo}, this.onEndAddContentDelegate, this.onAddContentCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SMT.Saas.Tools.PublicInterfaceWS.IPublicService.BeginIsExits(string FORMID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIsExits(FORMID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool SMT.Saas.Tools.PublicInterfaceWS.IPublicService.EndIsExits(System.IAsyncResult result) {
            return base.Channel.EndIsExits(result);
        }
        
        private System.IAsyncResult OnBeginIsExits(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string FORMID = ((string)(inValues[0]));
            return ((SMT.Saas.Tools.PublicInterfaceWS.IPublicService)(this)).BeginIsExits(FORMID, callback, asyncState);
        }
        
        private object[] OnEndIsExits(System.IAsyncResult result) {
            bool retVal = ((SMT.Saas.Tools.PublicInterfaceWS.IPublicService)(this)).EndIsExits(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIsExitsCompleted(object state) {
            if ((this.IsExitsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.IsExitsCompleted(this, new IsExitsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void IsExitsAsync(string FORMID) {
            this.IsExitsAsync(FORMID, null);
        }
        
        public void IsExitsAsync(string FORMID, object userState) {
            if ((this.onBeginIsExitsDelegate == null)) {
                this.onBeginIsExitsDelegate = new BeginOperationDelegate(this.OnBeginIsExits);
            }
            if ((this.onEndIsExitsDelegate == null)) {
                this.onEndIsExitsDelegate = new EndOperationDelegate(this.OnEndIsExits);
            }
            if ((this.onIsExitsCompletedDelegate == null)) {
                this.onIsExitsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIsExitsCompleted);
            }
            base.InvokeAsync(this.onBeginIsExitsDelegate, new object[] {
                        FORMID}, this.onEndIsExitsDelegate, this.onIsExitsCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override SMT.Saas.Tools.PublicInterfaceWS.IPublicService CreateChannel() {
            return new PublicServiceClientChannel(this);
        }
        
        private class PublicServiceClientChannel : ChannelBase<SMT.Saas.Tools.PublicInterfaceWS.IPublicService>, SMT.Saas.Tools.PublicInterfaceWS.IPublicService {
            
            public PublicServiceClientChannel(System.ServiceModel.ClientBase<SMT.Saas.Tools.PublicInterfaceWS.IPublicService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetBusinessObject(string SystemCode, string BusinessObjectName, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = SystemCode;
                _args[1] = BusinessObjectName;
                System.IAsyncResult _result = base.BeginInvoke("GetBusinessObject", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetBusinessObject(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetBusinessObject", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetContent(string FORMID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = FORMID;
                System.IAsyncResult _result = base.BeginInvoke("GetContent", _args, callback, asyncState);
                return _result;
            }
            
            public byte[] EndGetContent(System.IAsyncResult result) {
                object[] _args = new object[0];
                byte[] _result = ((byte[])(base.EndInvoke("GetContent", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteContent(string FORMID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = FORMID;
                System.IAsyncResult _result = base.BeginInvoke("DeleteContent", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndDeleteContent(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("DeleteContent", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUpdateContent(string FormID, byte[] content, SMT.Saas.Tools.PublicInterfaceWS.UserInfo userinfo, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = FormID;
                _args[1] = content;
                _args[2] = userinfo;
                System.IAsyncResult _result = base.BeginInvoke("UpdateContent", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndUpdateContent(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("UpdateContent", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddContent(string FormID, byte[] content, string CompanyID, string SystemCode, string ModelName, SMT.Saas.Tools.PublicInterfaceWS.UserInfo userinfo, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[6];
                _args[0] = FormID;
                _args[1] = content;
                _args[2] = CompanyID;
                _args[3] = SystemCode;
                _args[4] = ModelName;
                _args[5] = userinfo;
                System.IAsyncResult _result = base.BeginInvoke("AddContent", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndAddContent(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("AddContent", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginIsExits(string FORMID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = FORMID;
                System.IAsyncResult _result = base.BeginInvoke("IsExits", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndIsExits(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("IsExits", _args, result)));
                return _result;
            }
        }
    }
}
