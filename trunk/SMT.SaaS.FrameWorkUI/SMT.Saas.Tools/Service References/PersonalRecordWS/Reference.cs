//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.17929
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.60310.0
// 
namespace SMT.Saas.Tools.PersonalRecordWS {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="T_PF_PERSONALRECORD", Namespace="http://schemas.datacontract.org/2004/07/EngineDataModel")]
    public partial class T_PF_PERSONALRECORD : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string CHECKSTATEField;
        
        private string CONFIGINFOField;
        
        private System.Nullable<System.DateTime> CREATEDATEField;
        
        private string FromOwnerIDField;
        
        private string FromOwnerNameField;
        
        private string ISFORWARDField;
        
        private string ISVIEWField;
        
        private string MODELCODEField;
        
        private string MODELDESCRIPTIONField;
        
        private string MODELIDField;
        
        private string OWNERCOMPANYIDField;
        
        private string OWNERDEPARTMENTIDField;
        
        private string OWNERIDField;
        
        private string OWNERPOSTIDField;
        
        private string PERSONALRECORDIDField;
        
        private string SYSTYPEField;
        
        private string ToOwnerNameField;
        
        private System.Nullable<System.DateTime> UPDATEDATEField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CHECKSTATE {
            get {
                return this.CHECKSTATEField;
            }
            set {
                if ((object.ReferenceEquals(this.CHECKSTATEField, value) != true)) {
                    this.CHECKSTATEField = value;
                    this.RaisePropertyChanged("CHECKSTATE");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CONFIGINFO {
            get {
                return this.CONFIGINFOField;
            }
            set {
                if ((object.ReferenceEquals(this.CONFIGINFOField, value) != true)) {
                    this.CONFIGINFOField = value;
                    this.RaisePropertyChanged("CONFIGINFO");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> CREATEDATE {
            get {
                return this.CREATEDATEField;
            }
            set {
                if ((this.CREATEDATEField.Equals(value) != true)) {
                    this.CREATEDATEField = value;
                    this.RaisePropertyChanged("CREATEDATE");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FromOwnerID {
            get {
                return this.FromOwnerIDField;
            }
            set {
                if ((object.ReferenceEquals(this.FromOwnerIDField, value) != true)) {
                    this.FromOwnerIDField = value;
                    this.RaisePropertyChanged("FromOwnerID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FromOwnerName {
            get {
                return this.FromOwnerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FromOwnerNameField, value) != true)) {
                    this.FromOwnerNameField = value;
                    this.RaisePropertyChanged("FromOwnerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ISFORWARD {
            get {
                return this.ISFORWARDField;
            }
            set {
                if ((object.ReferenceEquals(this.ISFORWARDField, value) != true)) {
                    this.ISFORWARDField = value;
                    this.RaisePropertyChanged("ISFORWARD");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ISVIEW {
            get {
                return this.ISVIEWField;
            }
            set {
                if ((object.ReferenceEquals(this.ISVIEWField, value) != true)) {
                    this.ISVIEWField = value;
                    this.RaisePropertyChanged("ISVIEW");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MODELCODE {
            get {
                return this.MODELCODEField;
            }
            set {
                if ((object.ReferenceEquals(this.MODELCODEField, value) != true)) {
                    this.MODELCODEField = value;
                    this.RaisePropertyChanged("MODELCODE");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MODELDESCRIPTION {
            get {
                return this.MODELDESCRIPTIONField;
            }
            set {
                if ((object.ReferenceEquals(this.MODELDESCRIPTIONField, value) != true)) {
                    this.MODELDESCRIPTIONField = value;
                    this.RaisePropertyChanged("MODELDESCRIPTION");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MODELID {
            get {
                return this.MODELIDField;
            }
            set {
                if ((object.ReferenceEquals(this.MODELIDField, value) != true)) {
                    this.MODELIDField = value;
                    this.RaisePropertyChanged("MODELID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OWNERCOMPANYID {
            get {
                return this.OWNERCOMPANYIDField;
            }
            set {
                if ((object.ReferenceEquals(this.OWNERCOMPANYIDField, value) != true)) {
                    this.OWNERCOMPANYIDField = value;
                    this.RaisePropertyChanged("OWNERCOMPANYID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OWNERDEPARTMENTID {
            get {
                return this.OWNERDEPARTMENTIDField;
            }
            set {
                if ((object.ReferenceEquals(this.OWNERDEPARTMENTIDField, value) != true)) {
                    this.OWNERDEPARTMENTIDField = value;
                    this.RaisePropertyChanged("OWNERDEPARTMENTID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OWNERID {
            get {
                return this.OWNERIDField;
            }
            set {
                if ((object.ReferenceEquals(this.OWNERIDField, value) != true)) {
                    this.OWNERIDField = value;
                    this.RaisePropertyChanged("OWNERID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OWNERPOSTID {
            get {
                return this.OWNERPOSTIDField;
            }
            set {
                if ((object.ReferenceEquals(this.OWNERPOSTIDField, value) != true)) {
                    this.OWNERPOSTIDField = value;
                    this.RaisePropertyChanged("OWNERPOSTID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PERSONALRECORDID {
            get {
                return this.PERSONALRECORDIDField;
            }
            set {
                if ((object.ReferenceEquals(this.PERSONALRECORDIDField, value) != true)) {
                    this.PERSONALRECORDIDField = value;
                    this.RaisePropertyChanged("PERSONALRECORDID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SYSTYPE {
            get {
                return this.SYSTYPEField;
            }
            set {
                if ((object.ReferenceEquals(this.SYSTYPEField, value) != true)) {
                    this.SYSTYPEField = value;
                    this.RaisePropertyChanged("SYSTYPE");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ToOwnerName {
            get {
                return this.ToOwnerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ToOwnerNameField, value) != true)) {
                    this.ToOwnerNameField = value;
                    this.RaisePropertyChanged("ToOwnerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> UPDATEDATE {
            get {
                return this.UPDATEDATEField;
            }
            set {
                if ((this.UPDATEDATEField.Equals(value) != true)) {
                    this.UPDATEDATEField = value;
                    this.RaisePropertyChanged("UPDATEDATE");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MsgParms", Namespace="http://schemas.datacontract.org/2004/07/SMT.Global.IEngineContract")]
    public partial class MsgParms : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.DateTime BeginDateField;
        
        private System.DateTime EndDateField;
        
        private int LastDayField;
        
        private string MessageBodyField;
        
        private string MessageIdField;
        
        private int PageIndexField;
        
        private int PageSizeField;
        
        private string StatusField;
        
        private int TopField;
        
        private string UserIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime BeginDate {
            get {
                return this.BeginDateField;
            }
            set {
                if ((this.BeginDateField.Equals(value) != true)) {
                    this.BeginDateField = value;
                    this.RaisePropertyChanged("BeginDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime EndDate {
            get {
                return this.EndDateField;
            }
            set {
                if ((this.EndDateField.Equals(value) != true)) {
                    this.EndDateField = value;
                    this.RaisePropertyChanged("EndDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LastDay {
            get {
                return this.LastDayField;
            }
            set {
                if ((this.LastDayField.Equals(value) != true)) {
                    this.LastDayField = value;
                    this.RaisePropertyChanged("LastDay");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MessageBody {
            get {
                return this.MessageBodyField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageBodyField, value) != true)) {
                    this.MessageBodyField = value;
                    this.RaisePropertyChanged("MessageBody");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MessageId {
            get {
                return this.MessageIdField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageIdField, value) != true)) {
                    this.MessageIdField = value;
                    this.RaisePropertyChanged("MessageId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PageIndex {
            get {
                return this.PageIndexField;
            }
            set {
                if ((this.PageIndexField.Equals(value) != true)) {
                    this.PageIndexField = value;
                    this.RaisePropertyChanged("PageIndex");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PageSize {
            get {
                return this.PageSizeField;
            }
            set {
                if ((this.PageSizeField.Equals(value) != true)) {
                    this.PageSizeField = value;
                    this.RaisePropertyChanged("PageSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Status {
            get {
                return this.StatusField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusField, value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Top {
            get {
                return this.TopField;
            }
            set {
                if ((this.TopField.Equals(value) != true)) {
                    this.TopField = value;
                    this.RaisePropertyChanged("Top");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserID {
            get {
                return this.UserIDField;
            }
            set {
                if ((object.ReferenceEquals(this.UserIDField, value) != true)) {
                    this.UserIDField = value;
                    this.RaisePropertyChanged("UserID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PersonalRecordWS.IPersonalRecordService")]
    public interface IPersonalRecordService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPersonalRecordService/AddPersonalRecord", ReplyAction="http://tempuri.org/IPersonalRecordService/AddPersonalRecordResponse")]
        System.IAsyncResult BeginAddPersonalRecord(SMT.Saas.Tools.PersonalRecordWS.T_PF_PERSONALRECORD model, System.AsyncCallback callback, object asyncState);
        
        bool EndAddPersonalRecord(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPersonalRecordService/AddPersonalRecords", ReplyAction="http://tempuri.org/IPersonalRecordService/AddPersonalRecordsResponse")]
        System.IAsyncResult BeginAddPersonalRecords(System.Collections.ObjectModel.ObservableCollection<SMT.Saas.Tools.PersonalRecordWS.T_PF_PERSONALRECORD> models, System.AsyncCallback callback, object asyncState);
        
        bool EndAddPersonalRecords(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPersonalRecordService/UpdatePersonalRecord", ReplyAction="http://tempuri.org/IPersonalRecordService/UpdatePersonalRecordResponse")]
        System.IAsyncResult BeginUpdatePersonalRecord(SMT.Saas.Tools.PersonalRecordWS.T_PF_PERSONALRECORD model, System.AsyncCallback callback, object asyncState);
        
        bool EndUpdatePersonalRecord(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPersonalRecordService/GetPersonalRecord", ReplyAction="http://tempuri.org/IPersonalRecordService/GetPersonalRecordResponse")]
        System.IAsyncResult BeginGetPersonalRecord(int pageIndex, string strOrderBy, string checkstate, string filterString, string strCreateID, string BeginDate, string EndDate, ref int pageCount, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<SMT.Saas.Tools.PersonalRecordWS.T_PF_PERSONALRECORD> EndGetPersonalRecord(ref int pageCount, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPersonalRecordService/DeletePersonalRecord", ReplyAction="http://tempuri.org/IPersonalRecordService/DeletePersonalRecordResponse")]
        System.IAsyncResult BeginDeletePersonalRecord(string _personalrecordID, System.AsyncCallback callback, object asyncState);
        
        bool EndDeletePersonalRecord(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPersonalRecordService/GetPersonalRecordModelByID", ReplyAction="http://tempuri.org/IPersonalRecordService/GetPersonalRecordModelByIDResponse")]
        System.IAsyncResult BeginGetPersonalRecordModelByID(string _personalrecordID, System.AsyncCallback callback, object asyncState);
        
        SMT.Saas.Tools.PersonalRecordWS.T_PF_PERSONALRECORD EndGetPersonalRecordModelByID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPersonalRecordService/GetPersonalRecordModelByModelID", ReplyAction="http://tempuri.org/IPersonalRecordService/GetPersonalRecordModelByModelIDResponse" +
            "")]
        System.IAsyncResult BeginGetPersonalRecordModelByModelID(string _sysType, string _modelCode, string _modelID, string _IsForward, System.AsyncCallback callback, object asyncState);
        
        SMT.Saas.Tools.PersonalRecordWS.T_PF_PERSONALRECORD EndGetPersonalRecordModelByModelID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPersonalRecordService/GetPersonalRecordList", ReplyAction="http://tempuri.org/IPersonalRecordService/GetPersonalRecordListResponse")]
        System.IAsyncResult BeginGetPersonalRecordList(int pageIndex, string strOrderBy, string checkstate, string filterString, string strCreateID, string Isforward, string BeginDate, string EndDate, ref int pageCount, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<SMT.Saas.Tools.PersonalRecordWS.T_PF_PERSONALRECORD> EndGetPersonalRecordList(ref int pageCount, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPersonalRecordService/GetPersonalRecordListNew", ReplyAction="http://tempuri.org/IPersonalRecordService/GetPersonalRecordListNewResponse")]
        System.IAsyncResult BeginGetPersonalRecordListNew(int pageIndex, string strOrderBy, string checkstate, string filterString, string ownerid, string Isforward, string BeginDate, string EndDate, ref int pageCount, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<SMT.Saas.Tools.PersonalRecordWS.T_PF_PERSONALRECORD> EndGetPersonalRecordListNew(ref int pageCount, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPersonalRecordService/GetCachePersonalRecordListNew", ReplyAction="http://tempuri.org/IPersonalRecordService/GetCachePersonalRecordListNewResponse")]
        System.IAsyncResult BeginGetCachePersonalRecordListNew(SMT.Saas.Tools.PersonalRecordWS.MsgParms msgParams, ref bool IsAutofresh, ref bool HaveNewTask, int pageIndex, string strOrderBy, string checkstate, string filterString, string ownerid, string Isforward, string BeginDate, string EndDate, ref int pageCount, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<SMT.Saas.Tools.PersonalRecordWS.T_PF_PERSONALRECORD> EndGetCachePersonalRecordListNew(ref bool IsAutofresh, ref bool HaveNewTask, ref int pageCount, System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPersonalRecordServiceChannel : SMT.Saas.Tools.PersonalRecordWS.IPersonalRecordService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddPersonalRecordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddPersonalRecordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddPersonalRecordsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddPersonalRecordsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UpdatePersonalRecordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UpdatePersonalRecordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetPersonalRecordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetPersonalRecordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int pageCount {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        public System.Collections.ObjectModel.ObservableCollection<SMT.Saas.Tools.PersonalRecordWS.T_PF_PERSONALRECORD> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<SMT.Saas.Tools.PersonalRecordWS.T_PF_PERSONALRECORD>)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeletePersonalRecordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeletePersonalRecordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetPersonalRecordModelByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetPersonalRecordModelByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SMT.Saas.Tools.PersonalRecordWS.T_PF_PERSONALRECORD Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SMT.Saas.Tools.PersonalRecordWS.T_PF_PERSONALRECORD)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetPersonalRecordModelByModelIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetPersonalRecordModelByModelIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SMT.Saas.Tools.PersonalRecordWS.T_PF_PERSONALRECORD Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SMT.Saas.Tools.PersonalRecordWS.T_PF_PERSONALRECORD)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetPersonalRecordListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetPersonalRecordListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int pageCount {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        public System.Collections.ObjectModel.ObservableCollection<SMT.Saas.Tools.PersonalRecordWS.T_PF_PERSONALRECORD> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<SMT.Saas.Tools.PersonalRecordWS.T_PF_PERSONALRECORD>)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetPersonalRecordListNewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetPersonalRecordListNewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int pageCount {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        public System.Collections.ObjectModel.ObservableCollection<SMT.Saas.Tools.PersonalRecordWS.T_PF_PERSONALRECORD> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<SMT.Saas.Tools.PersonalRecordWS.T_PF_PERSONALRECORD>)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCachePersonalRecordListNewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCachePersonalRecordListNewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool IsAutofresh {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        public bool HaveNewTask {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        public int pageCount {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[2]));
            }
        }
        
        public System.Collections.ObjectModel.ObservableCollection<SMT.Saas.Tools.PersonalRecordWS.T_PF_PERSONALRECORD> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<SMT.Saas.Tools.PersonalRecordWS.T_PF_PERSONALRECORD>)(this.results[3]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PersonalRecordServiceClient : System.ServiceModel.ClientBase<SMT.Saas.Tools.PersonalRecordWS.IPersonalRecordService>, SMT.Saas.Tools.PersonalRecordWS.IPersonalRecordService {
        
        private BeginOperationDelegate onBeginAddPersonalRecordDelegate;
        
        private EndOperationDelegate onEndAddPersonalRecordDelegate;
        
        private System.Threading.SendOrPostCallback onAddPersonalRecordCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddPersonalRecordsDelegate;
        
        private EndOperationDelegate onEndAddPersonalRecordsDelegate;
        
        private System.Threading.SendOrPostCallback onAddPersonalRecordsCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdatePersonalRecordDelegate;
        
        private EndOperationDelegate onEndUpdatePersonalRecordDelegate;
        
        private System.Threading.SendOrPostCallback onUpdatePersonalRecordCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetPersonalRecordDelegate;
        
        private EndOperationDelegate onEndGetPersonalRecordDelegate;
        
        private System.Threading.SendOrPostCallback onGetPersonalRecordCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeletePersonalRecordDelegate;
        
        private EndOperationDelegate onEndDeletePersonalRecordDelegate;
        
        private System.Threading.SendOrPostCallback onDeletePersonalRecordCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetPersonalRecordModelByIDDelegate;
        
        private EndOperationDelegate onEndGetPersonalRecordModelByIDDelegate;
        
        private System.Threading.SendOrPostCallback onGetPersonalRecordModelByIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetPersonalRecordModelByModelIDDelegate;
        
        private EndOperationDelegate onEndGetPersonalRecordModelByModelIDDelegate;
        
        private System.Threading.SendOrPostCallback onGetPersonalRecordModelByModelIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetPersonalRecordListDelegate;
        
        private EndOperationDelegate onEndGetPersonalRecordListDelegate;
        
        private System.Threading.SendOrPostCallback onGetPersonalRecordListCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetPersonalRecordListNewDelegate;
        
        private EndOperationDelegate onEndGetPersonalRecordListNewDelegate;
        
        private System.Threading.SendOrPostCallback onGetPersonalRecordListNewCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCachePersonalRecordListNewDelegate;
        
        private EndOperationDelegate onEndGetCachePersonalRecordListNewDelegate;
        
        private System.Threading.SendOrPostCallback onGetCachePersonalRecordListNewCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public PersonalRecordServiceClient() {
        }
        
        public PersonalRecordServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PersonalRecordServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PersonalRecordServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PersonalRecordServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("无法设置 CookieContainer。请确保绑定包含 HttpCookieContainerBindingElement。");
                }
            }
        }
        
        public event System.EventHandler<AddPersonalRecordCompletedEventArgs> AddPersonalRecordCompleted;
        
        public event System.EventHandler<AddPersonalRecordsCompletedEventArgs> AddPersonalRecordsCompleted;
        
        public event System.EventHandler<UpdatePersonalRecordCompletedEventArgs> UpdatePersonalRecordCompleted;
        
        public event System.EventHandler<GetPersonalRecordCompletedEventArgs> GetPersonalRecordCompleted;
        
        public event System.EventHandler<DeletePersonalRecordCompletedEventArgs> DeletePersonalRecordCompleted;
        
        public event System.EventHandler<GetPersonalRecordModelByIDCompletedEventArgs> GetPersonalRecordModelByIDCompleted;
        
        public event System.EventHandler<GetPersonalRecordModelByModelIDCompletedEventArgs> GetPersonalRecordModelByModelIDCompleted;
        
        public event System.EventHandler<GetPersonalRecordListCompletedEventArgs> GetPersonalRecordListCompleted;
        
        public event System.EventHandler<GetPersonalRecordListNewCompletedEventArgs> GetPersonalRecordListNewCompleted;
        
        public event System.EventHandler<GetCachePersonalRecordListNewCompletedEventArgs> GetCachePersonalRecordListNewCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SMT.Saas.Tools.PersonalRecordWS.IPersonalRecordService.BeginAddPersonalRecord(SMT.Saas.Tools.PersonalRecordWS.T_PF_PERSONALRECORD model, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddPersonalRecord(model, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool SMT.Saas.Tools.PersonalRecordWS.IPersonalRecordService.EndAddPersonalRecord(System.IAsyncResult result) {
            return base.Channel.EndAddPersonalRecord(result);
        }
        
        private System.IAsyncResult OnBeginAddPersonalRecord(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SMT.Saas.Tools.PersonalRecordWS.T_PF_PERSONALRECORD model = ((SMT.Saas.Tools.PersonalRecordWS.T_PF_PERSONALRECORD)(inValues[0]));
            return ((SMT.Saas.Tools.PersonalRecordWS.IPersonalRecordService)(this)).BeginAddPersonalRecord(model, callback, asyncState);
        }
        
        private object[] OnEndAddPersonalRecord(System.IAsyncResult result) {
            bool retVal = ((SMT.Saas.Tools.PersonalRecordWS.IPersonalRecordService)(this)).EndAddPersonalRecord(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddPersonalRecordCompleted(object state) {
            if ((this.AddPersonalRecordCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddPersonalRecordCompleted(this, new AddPersonalRecordCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddPersonalRecordAsync(SMT.Saas.Tools.PersonalRecordWS.T_PF_PERSONALRECORD model) {
            this.AddPersonalRecordAsync(model, null);
        }
        
        public void AddPersonalRecordAsync(SMT.Saas.Tools.PersonalRecordWS.T_PF_PERSONALRECORD model, object userState) {
            if ((this.onBeginAddPersonalRecordDelegate == null)) {
                this.onBeginAddPersonalRecordDelegate = new BeginOperationDelegate(this.OnBeginAddPersonalRecord);
            }
            if ((this.onEndAddPersonalRecordDelegate == null)) {
                this.onEndAddPersonalRecordDelegate = new EndOperationDelegate(this.OnEndAddPersonalRecord);
            }
            if ((this.onAddPersonalRecordCompletedDelegate == null)) {
                this.onAddPersonalRecordCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddPersonalRecordCompleted);
            }
            base.InvokeAsync(this.onBeginAddPersonalRecordDelegate, new object[] {
                        model}, this.onEndAddPersonalRecordDelegate, this.onAddPersonalRecordCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SMT.Saas.Tools.PersonalRecordWS.IPersonalRecordService.BeginAddPersonalRecords(System.Collections.ObjectModel.ObservableCollection<SMT.Saas.Tools.PersonalRecordWS.T_PF_PERSONALRECORD> models, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddPersonalRecords(models, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool SMT.Saas.Tools.PersonalRecordWS.IPersonalRecordService.EndAddPersonalRecords(System.IAsyncResult result) {
            return base.Channel.EndAddPersonalRecords(result);
        }
        
        private System.IAsyncResult OnBeginAddPersonalRecords(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.ObjectModel.ObservableCollection<SMT.Saas.Tools.PersonalRecordWS.T_PF_PERSONALRECORD> models = ((System.Collections.ObjectModel.ObservableCollection<SMT.Saas.Tools.PersonalRecordWS.T_PF_PERSONALRECORD>)(inValues[0]));
            return ((SMT.Saas.Tools.PersonalRecordWS.IPersonalRecordService)(this)).BeginAddPersonalRecords(models, callback, asyncState);
        }
        
        private object[] OnEndAddPersonalRecords(System.IAsyncResult result) {
            bool retVal = ((SMT.Saas.Tools.PersonalRecordWS.IPersonalRecordService)(this)).EndAddPersonalRecords(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddPersonalRecordsCompleted(object state) {
            if ((this.AddPersonalRecordsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddPersonalRecordsCompleted(this, new AddPersonalRecordsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddPersonalRecordsAsync(System.Collections.ObjectModel.ObservableCollection<SMT.Saas.Tools.PersonalRecordWS.T_PF_PERSONALRECORD> models) {
            this.AddPersonalRecordsAsync(models, null);
        }
        
        public void AddPersonalRecordsAsync(System.Collections.ObjectModel.ObservableCollection<SMT.Saas.Tools.PersonalRecordWS.T_PF_PERSONALRECORD> models, object userState) {
            if ((this.onBeginAddPersonalRecordsDelegate == null)) {
                this.onBeginAddPersonalRecordsDelegate = new BeginOperationDelegate(this.OnBeginAddPersonalRecords);
            }
            if ((this.onEndAddPersonalRecordsDelegate == null)) {
                this.onEndAddPersonalRecordsDelegate = new EndOperationDelegate(this.OnEndAddPersonalRecords);
            }
            if ((this.onAddPersonalRecordsCompletedDelegate == null)) {
                this.onAddPersonalRecordsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddPersonalRecordsCompleted);
            }
            base.InvokeAsync(this.onBeginAddPersonalRecordsDelegate, new object[] {
                        models}, this.onEndAddPersonalRecordsDelegate, this.onAddPersonalRecordsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SMT.Saas.Tools.PersonalRecordWS.IPersonalRecordService.BeginUpdatePersonalRecord(SMT.Saas.Tools.PersonalRecordWS.T_PF_PERSONALRECORD model, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdatePersonalRecord(model, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool SMT.Saas.Tools.PersonalRecordWS.IPersonalRecordService.EndUpdatePersonalRecord(System.IAsyncResult result) {
            return base.Channel.EndUpdatePersonalRecord(result);
        }
        
        private System.IAsyncResult OnBeginUpdatePersonalRecord(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SMT.Saas.Tools.PersonalRecordWS.T_PF_PERSONALRECORD model = ((SMT.Saas.Tools.PersonalRecordWS.T_PF_PERSONALRECORD)(inValues[0]));
            return ((SMT.Saas.Tools.PersonalRecordWS.IPersonalRecordService)(this)).BeginUpdatePersonalRecord(model, callback, asyncState);
        }
        
        private object[] OnEndUpdatePersonalRecord(System.IAsyncResult result) {
            bool retVal = ((SMT.Saas.Tools.PersonalRecordWS.IPersonalRecordService)(this)).EndUpdatePersonalRecord(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUpdatePersonalRecordCompleted(object state) {
            if ((this.UpdatePersonalRecordCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdatePersonalRecordCompleted(this, new UpdatePersonalRecordCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdatePersonalRecordAsync(SMT.Saas.Tools.PersonalRecordWS.T_PF_PERSONALRECORD model) {
            this.UpdatePersonalRecordAsync(model, null);
        }
        
        public void UpdatePersonalRecordAsync(SMT.Saas.Tools.PersonalRecordWS.T_PF_PERSONALRECORD model, object userState) {
            if ((this.onBeginUpdatePersonalRecordDelegate == null)) {
                this.onBeginUpdatePersonalRecordDelegate = new BeginOperationDelegate(this.OnBeginUpdatePersonalRecord);
            }
            if ((this.onEndUpdatePersonalRecordDelegate == null)) {
                this.onEndUpdatePersonalRecordDelegate = new EndOperationDelegate(this.OnEndUpdatePersonalRecord);
            }
            if ((this.onUpdatePersonalRecordCompletedDelegate == null)) {
                this.onUpdatePersonalRecordCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdatePersonalRecordCompleted);
            }
            base.InvokeAsync(this.onBeginUpdatePersonalRecordDelegate, new object[] {
                        model}, this.onEndUpdatePersonalRecordDelegate, this.onUpdatePersonalRecordCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SMT.Saas.Tools.PersonalRecordWS.IPersonalRecordService.BeginGetPersonalRecord(int pageIndex, string strOrderBy, string checkstate, string filterString, string strCreateID, string BeginDate, string EndDate, ref int pageCount, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetPersonalRecord(pageIndex, strOrderBy, checkstate, filterString, strCreateID, BeginDate, EndDate, ref pageCount, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<SMT.Saas.Tools.PersonalRecordWS.T_PF_PERSONALRECORD> SMT.Saas.Tools.PersonalRecordWS.IPersonalRecordService.EndGetPersonalRecord(ref int pageCount, System.IAsyncResult result) {
            return base.Channel.EndGetPersonalRecord(ref pageCount, result);
        }
        
        private System.IAsyncResult OnBeginGetPersonalRecord(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int pageIndex = ((int)(inValues[0]));
            string strOrderBy = ((string)(inValues[1]));
            string checkstate = ((string)(inValues[2]));
            string filterString = ((string)(inValues[3]));
            string strCreateID = ((string)(inValues[4]));
            string BeginDate = ((string)(inValues[5]));
            string EndDate = ((string)(inValues[6]));
            int pageCount = ((int)(inValues[7]));
            return ((SMT.Saas.Tools.PersonalRecordWS.IPersonalRecordService)(this)).BeginGetPersonalRecord(pageIndex, strOrderBy, checkstate, filterString, strCreateID, BeginDate, EndDate, ref pageCount, callback, asyncState);
        }
        
        private object[] OnEndGetPersonalRecord(System.IAsyncResult result) {
            int pageCount = this.GetDefaultValueForInitialization<int>();
            System.Collections.ObjectModel.ObservableCollection<SMT.Saas.Tools.PersonalRecordWS.T_PF_PERSONALRECORD> retVal = ((SMT.Saas.Tools.PersonalRecordWS.IPersonalRecordService)(this)).EndGetPersonalRecord(ref pageCount, result);
            return new object[] {
                    pageCount,
                    retVal};
        }
        
        private void OnGetPersonalRecordCompleted(object state) {
            if ((this.GetPersonalRecordCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetPersonalRecordCompleted(this, new GetPersonalRecordCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetPersonalRecordAsync(int pageIndex, string strOrderBy, string checkstate, string filterString, string strCreateID, string BeginDate, string EndDate, int pageCount) {
            this.GetPersonalRecordAsync(pageIndex, strOrderBy, checkstate, filterString, strCreateID, BeginDate, EndDate, pageCount, null);
        }
        
        public void GetPersonalRecordAsync(int pageIndex, string strOrderBy, string checkstate, string filterString, string strCreateID, string BeginDate, string EndDate, int pageCount, object userState) {
            if ((this.onBeginGetPersonalRecordDelegate == null)) {
                this.onBeginGetPersonalRecordDelegate = new BeginOperationDelegate(this.OnBeginGetPersonalRecord);
            }
            if ((this.onEndGetPersonalRecordDelegate == null)) {
                this.onEndGetPersonalRecordDelegate = new EndOperationDelegate(this.OnEndGetPersonalRecord);
            }
            if ((this.onGetPersonalRecordCompletedDelegate == null)) {
                this.onGetPersonalRecordCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetPersonalRecordCompleted);
            }
            base.InvokeAsync(this.onBeginGetPersonalRecordDelegate, new object[] {
                        pageIndex,
                        strOrderBy,
                        checkstate,
                        filterString,
                        strCreateID,
                        BeginDate,
                        EndDate,
                        pageCount}, this.onEndGetPersonalRecordDelegate, this.onGetPersonalRecordCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SMT.Saas.Tools.PersonalRecordWS.IPersonalRecordService.BeginDeletePersonalRecord(string _personalrecordID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeletePersonalRecord(_personalrecordID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool SMT.Saas.Tools.PersonalRecordWS.IPersonalRecordService.EndDeletePersonalRecord(System.IAsyncResult result) {
            return base.Channel.EndDeletePersonalRecord(result);
        }
        
        private System.IAsyncResult OnBeginDeletePersonalRecord(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string _personalrecordID = ((string)(inValues[0]));
            return ((SMT.Saas.Tools.PersonalRecordWS.IPersonalRecordService)(this)).BeginDeletePersonalRecord(_personalrecordID, callback, asyncState);
        }
        
        private object[] OnEndDeletePersonalRecord(System.IAsyncResult result) {
            bool retVal = ((SMT.Saas.Tools.PersonalRecordWS.IPersonalRecordService)(this)).EndDeletePersonalRecord(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeletePersonalRecordCompleted(object state) {
            if ((this.DeletePersonalRecordCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeletePersonalRecordCompleted(this, new DeletePersonalRecordCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeletePersonalRecordAsync(string _personalrecordID) {
            this.DeletePersonalRecordAsync(_personalrecordID, null);
        }
        
        public void DeletePersonalRecordAsync(string _personalrecordID, object userState) {
            if ((this.onBeginDeletePersonalRecordDelegate == null)) {
                this.onBeginDeletePersonalRecordDelegate = new BeginOperationDelegate(this.OnBeginDeletePersonalRecord);
            }
            if ((this.onEndDeletePersonalRecordDelegate == null)) {
                this.onEndDeletePersonalRecordDelegate = new EndOperationDelegate(this.OnEndDeletePersonalRecord);
            }
            if ((this.onDeletePersonalRecordCompletedDelegate == null)) {
                this.onDeletePersonalRecordCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeletePersonalRecordCompleted);
            }
            base.InvokeAsync(this.onBeginDeletePersonalRecordDelegate, new object[] {
                        _personalrecordID}, this.onEndDeletePersonalRecordDelegate, this.onDeletePersonalRecordCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SMT.Saas.Tools.PersonalRecordWS.IPersonalRecordService.BeginGetPersonalRecordModelByID(string _personalrecordID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetPersonalRecordModelByID(_personalrecordID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SMT.Saas.Tools.PersonalRecordWS.T_PF_PERSONALRECORD SMT.Saas.Tools.PersonalRecordWS.IPersonalRecordService.EndGetPersonalRecordModelByID(System.IAsyncResult result) {
            return base.Channel.EndGetPersonalRecordModelByID(result);
        }
        
        private System.IAsyncResult OnBeginGetPersonalRecordModelByID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string _personalrecordID = ((string)(inValues[0]));
            return ((SMT.Saas.Tools.PersonalRecordWS.IPersonalRecordService)(this)).BeginGetPersonalRecordModelByID(_personalrecordID, callback, asyncState);
        }
        
        private object[] OnEndGetPersonalRecordModelByID(System.IAsyncResult result) {
            SMT.Saas.Tools.PersonalRecordWS.T_PF_PERSONALRECORD retVal = ((SMT.Saas.Tools.PersonalRecordWS.IPersonalRecordService)(this)).EndGetPersonalRecordModelByID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetPersonalRecordModelByIDCompleted(object state) {
            if ((this.GetPersonalRecordModelByIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetPersonalRecordModelByIDCompleted(this, new GetPersonalRecordModelByIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetPersonalRecordModelByIDAsync(string _personalrecordID) {
            this.GetPersonalRecordModelByIDAsync(_personalrecordID, null);
        }
        
        public void GetPersonalRecordModelByIDAsync(string _personalrecordID, object userState) {
            if ((this.onBeginGetPersonalRecordModelByIDDelegate == null)) {
                this.onBeginGetPersonalRecordModelByIDDelegate = new BeginOperationDelegate(this.OnBeginGetPersonalRecordModelByID);
            }
            if ((this.onEndGetPersonalRecordModelByIDDelegate == null)) {
                this.onEndGetPersonalRecordModelByIDDelegate = new EndOperationDelegate(this.OnEndGetPersonalRecordModelByID);
            }
            if ((this.onGetPersonalRecordModelByIDCompletedDelegate == null)) {
                this.onGetPersonalRecordModelByIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetPersonalRecordModelByIDCompleted);
            }
            base.InvokeAsync(this.onBeginGetPersonalRecordModelByIDDelegate, new object[] {
                        _personalrecordID}, this.onEndGetPersonalRecordModelByIDDelegate, this.onGetPersonalRecordModelByIDCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SMT.Saas.Tools.PersonalRecordWS.IPersonalRecordService.BeginGetPersonalRecordModelByModelID(string _sysType, string _modelCode, string _modelID, string _IsForward, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetPersonalRecordModelByModelID(_sysType, _modelCode, _modelID, _IsForward, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SMT.Saas.Tools.PersonalRecordWS.T_PF_PERSONALRECORD SMT.Saas.Tools.PersonalRecordWS.IPersonalRecordService.EndGetPersonalRecordModelByModelID(System.IAsyncResult result) {
            return base.Channel.EndGetPersonalRecordModelByModelID(result);
        }
        
        private System.IAsyncResult OnBeginGetPersonalRecordModelByModelID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string _sysType = ((string)(inValues[0]));
            string _modelCode = ((string)(inValues[1]));
            string _modelID = ((string)(inValues[2]));
            string _IsForward = ((string)(inValues[3]));
            return ((SMT.Saas.Tools.PersonalRecordWS.IPersonalRecordService)(this)).BeginGetPersonalRecordModelByModelID(_sysType, _modelCode, _modelID, _IsForward, callback, asyncState);
        }
        
        private object[] OnEndGetPersonalRecordModelByModelID(System.IAsyncResult result) {
            SMT.Saas.Tools.PersonalRecordWS.T_PF_PERSONALRECORD retVal = ((SMT.Saas.Tools.PersonalRecordWS.IPersonalRecordService)(this)).EndGetPersonalRecordModelByModelID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetPersonalRecordModelByModelIDCompleted(object state) {
            if ((this.GetPersonalRecordModelByModelIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetPersonalRecordModelByModelIDCompleted(this, new GetPersonalRecordModelByModelIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetPersonalRecordModelByModelIDAsync(string _sysType, string _modelCode, string _modelID, string _IsForward) {
            this.GetPersonalRecordModelByModelIDAsync(_sysType, _modelCode, _modelID, _IsForward, null);
        }
        
        public void GetPersonalRecordModelByModelIDAsync(string _sysType, string _modelCode, string _modelID, string _IsForward, object userState) {
            if ((this.onBeginGetPersonalRecordModelByModelIDDelegate == null)) {
                this.onBeginGetPersonalRecordModelByModelIDDelegate = new BeginOperationDelegate(this.OnBeginGetPersonalRecordModelByModelID);
            }
            if ((this.onEndGetPersonalRecordModelByModelIDDelegate == null)) {
                this.onEndGetPersonalRecordModelByModelIDDelegate = new EndOperationDelegate(this.OnEndGetPersonalRecordModelByModelID);
            }
            if ((this.onGetPersonalRecordModelByModelIDCompletedDelegate == null)) {
                this.onGetPersonalRecordModelByModelIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetPersonalRecordModelByModelIDCompleted);
            }
            base.InvokeAsync(this.onBeginGetPersonalRecordModelByModelIDDelegate, new object[] {
                        _sysType,
                        _modelCode,
                        _modelID,
                        _IsForward}, this.onEndGetPersonalRecordModelByModelIDDelegate, this.onGetPersonalRecordModelByModelIDCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SMT.Saas.Tools.PersonalRecordWS.IPersonalRecordService.BeginGetPersonalRecordList(int pageIndex, string strOrderBy, string checkstate, string filterString, string strCreateID, string Isforward, string BeginDate, string EndDate, ref int pageCount, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetPersonalRecordList(pageIndex, strOrderBy, checkstate, filterString, strCreateID, Isforward, BeginDate, EndDate, ref pageCount, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<SMT.Saas.Tools.PersonalRecordWS.T_PF_PERSONALRECORD> SMT.Saas.Tools.PersonalRecordWS.IPersonalRecordService.EndGetPersonalRecordList(ref int pageCount, System.IAsyncResult result) {
            return base.Channel.EndGetPersonalRecordList(ref pageCount, result);
        }
        
        private System.IAsyncResult OnBeginGetPersonalRecordList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int pageIndex = ((int)(inValues[0]));
            string strOrderBy = ((string)(inValues[1]));
            string checkstate = ((string)(inValues[2]));
            string filterString = ((string)(inValues[3]));
            string strCreateID = ((string)(inValues[4]));
            string Isforward = ((string)(inValues[5]));
            string BeginDate = ((string)(inValues[6]));
            string EndDate = ((string)(inValues[7]));
            int pageCount = ((int)(inValues[8]));
            return ((SMT.Saas.Tools.PersonalRecordWS.IPersonalRecordService)(this)).BeginGetPersonalRecordList(pageIndex, strOrderBy, checkstate, filterString, strCreateID, Isforward, BeginDate, EndDate, ref pageCount, callback, asyncState);
        }
        
        private object[] OnEndGetPersonalRecordList(System.IAsyncResult result) {
            int pageCount = this.GetDefaultValueForInitialization<int>();
            System.Collections.ObjectModel.ObservableCollection<SMT.Saas.Tools.PersonalRecordWS.T_PF_PERSONALRECORD> retVal = ((SMT.Saas.Tools.PersonalRecordWS.IPersonalRecordService)(this)).EndGetPersonalRecordList(ref pageCount, result);
            return new object[] {
                    pageCount,
                    retVal};
        }
        
        private void OnGetPersonalRecordListCompleted(object state) {
            if ((this.GetPersonalRecordListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetPersonalRecordListCompleted(this, new GetPersonalRecordListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetPersonalRecordListAsync(int pageIndex, string strOrderBy, string checkstate, string filterString, string strCreateID, string Isforward, string BeginDate, string EndDate, int pageCount) {
            this.GetPersonalRecordListAsync(pageIndex, strOrderBy, checkstate, filterString, strCreateID, Isforward, BeginDate, EndDate, pageCount, null);
        }
        
        public void GetPersonalRecordListAsync(int pageIndex, string strOrderBy, string checkstate, string filterString, string strCreateID, string Isforward, string BeginDate, string EndDate, int pageCount, object userState) {
            if ((this.onBeginGetPersonalRecordListDelegate == null)) {
                this.onBeginGetPersonalRecordListDelegate = new BeginOperationDelegate(this.OnBeginGetPersonalRecordList);
            }
            if ((this.onEndGetPersonalRecordListDelegate == null)) {
                this.onEndGetPersonalRecordListDelegate = new EndOperationDelegate(this.OnEndGetPersonalRecordList);
            }
            if ((this.onGetPersonalRecordListCompletedDelegate == null)) {
                this.onGetPersonalRecordListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetPersonalRecordListCompleted);
            }
            base.InvokeAsync(this.onBeginGetPersonalRecordListDelegate, new object[] {
                        pageIndex,
                        strOrderBy,
                        checkstate,
                        filterString,
                        strCreateID,
                        Isforward,
                        BeginDate,
                        EndDate,
                        pageCount}, this.onEndGetPersonalRecordListDelegate, this.onGetPersonalRecordListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SMT.Saas.Tools.PersonalRecordWS.IPersonalRecordService.BeginGetPersonalRecordListNew(int pageIndex, string strOrderBy, string checkstate, string filterString, string ownerid, string Isforward, string BeginDate, string EndDate, ref int pageCount, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetPersonalRecordListNew(pageIndex, strOrderBy, checkstate, filterString, ownerid, Isforward, BeginDate, EndDate, ref pageCount, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<SMT.Saas.Tools.PersonalRecordWS.T_PF_PERSONALRECORD> SMT.Saas.Tools.PersonalRecordWS.IPersonalRecordService.EndGetPersonalRecordListNew(ref int pageCount, System.IAsyncResult result) {
            return base.Channel.EndGetPersonalRecordListNew(ref pageCount, result);
        }
        
        private System.IAsyncResult OnBeginGetPersonalRecordListNew(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int pageIndex = ((int)(inValues[0]));
            string strOrderBy = ((string)(inValues[1]));
            string checkstate = ((string)(inValues[2]));
            string filterString = ((string)(inValues[3]));
            string ownerid = ((string)(inValues[4]));
            string Isforward = ((string)(inValues[5]));
            string BeginDate = ((string)(inValues[6]));
            string EndDate = ((string)(inValues[7]));
            int pageCount = ((int)(inValues[8]));
            return ((SMT.Saas.Tools.PersonalRecordWS.IPersonalRecordService)(this)).BeginGetPersonalRecordListNew(pageIndex, strOrderBy, checkstate, filterString, ownerid, Isforward, BeginDate, EndDate, ref pageCount, callback, asyncState);
        }
        
        private object[] OnEndGetPersonalRecordListNew(System.IAsyncResult result) {
            int pageCount = this.GetDefaultValueForInitialization<int>();
            System.Collections.ObjectModel.ObservableCollection<SMT.Saas.Tools.PersonalRecordWS.T_PF_PERSONALRECORD> retVal = ((SMT.Saas.Tools.PersonalRecordWS.IPersonalRecordService)(this)).EndGetPersonalRecordListNew(ref pageCount, result);
            return new object[] {
                    pageCount,
                    retVal};
        }
        
        private void OnGetPersonalRecordListNewCompleted(object state) {
            if ((this.GetPersonalRecordListNewCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetPersonalRecordListNewCompleted(this, new GetPersonalRecordListNewCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetPersonalRecordListNewAsync(int pageIndex, string strOrderBy, string checkstate, string filterString, string ownerid, string Isforward, string BeginDate, string EndDate, int pageCount) {
            this.GetPersonalRecordListNewAsync(pageIndex, strOrderBy, checkstate, filterString, ownerid, Isforward, BeginDate, EndDate, pageCount, null);
        }
        
        public void GetPersonalRecordListNewAsync(int pageIndex, string strOrderBy, string checkstate, string filterString, string ownerid, string Isforward, string BeginDate, string EndDate, int pageCount, object userState) {
            if ((this.onBeginGetPersonalRecordListNewDelegate == null)) {
                this.onBeginGetPersonalRecordListNewDelegate = new BeginOperationDelegate(this.OnBeginGetPersonalRecordListNew);
            }
            if ((this.onEndGetPersonalRecordListNewDelegate == null)) {
                this.onEndGetPersonalRecordListNewDelegate = new EndOperationDelegate(this.OnEndGetPersonalRecordListNew);
            }
            if ((this.onGetPersonalRecordListNewCompletedDelegate == null)) {
                this.onGetPersonalRecordListNewCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetPersonalRecordListNewCompleted);
            }
            base.InvokeAsync(this.onBeginGetPersonalRecordListNewDelegate, new object[] {
                        pageIndex,
                        strOrderBy,
                        checkstate,
                        filterString,
                        ownerid,
                        Isforward,
                        BeginDate,
                        EndDate,
                        pageCount}, this.onEndGetPersonalRecordListNewDelegate, this.onGetPersonalRecordListNewCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SMT.Saas.Tools.PersonalRecordWS.IPersonalRecordService.BeginGetCachePersonalRecordListNew(SMT.Saas.Tools.PersonalRecordWS.MsgParms msgParams, ref bool IsAutofresh, ref bool HaveNewTask, int pageIndex, string strOrderBy, string checkstate, string filterString, string ownerid, string Isforward, string BeginDate, string EndDate, ref int pageCount, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCachePersonalRecordListNew(msgParams, ref IsAutofresh, ref HaveNewTask, pageIndex, strOrderBy, checkstate, filterString, ownerid, Isforward, BeginDate, EndDate, ref pageCount, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<SMT.Saas.Tools.PersonalRecordWS.T_PF_PERSONALRECORD> SMT.Saas.Tools.PersonalRecordWS.IPersonalRecordService.EndGetCachePersonalRecordListNew(ref bool IsAutofresh, ref bool HaveNewTask, ref int pageCount, System.IAsyncResult result) {
            return base.Channel.EndGetCachePersonalRecordListNew(ref IsAutofresh, ref HaveNewTask, ref pageCount, result);
        }
        
        private System.IAsyncResult OnBeginGetCachePersonalRecordListNew(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SMT.Saas.Tools.PersonalRecordWS.MsgParms msgParams = ((SMT.Saas.Tools.PersonalRecordWS.MsgParms)(inValues[0]));
            bool IsAutofresh = ((bool)(inValues[1]));
            bool HaveNewTask = ((bool)(inValues[2]));
            int pageIndex = ((int)(inValues[3]));
            string strOrderBy = ((string)(inValues[4]));
            string checkstate = ((string)(inValues[5]));
            string filterString = ((string)(inValues[6]));
            string ownerid = ((string)(inValues[7]));
            string Isforward = ((string)(inValues[8]));
            string BeginDate = ((string)(inValues[9]));
            string EndDate = ((string)(inValues[10]));
            int pageCount = ((int)(inValues[11]));
            return ((SMT.Saas.Tools.PersonalRecordWS.IPersonalRecordService)(this)).BeginGetCachePersonalRecordListNew(msgParams, ref IsAutofresh, ref HaveNewTask, pageIndex, strOrderBy, checkstate, filterString, ownerid, Isforward, BeginDate, EndDate, ref pageCount, callback, asyncState);
        }
        
        private object[] OnEndGetCachePersonalRecordListNew(System.IAsyncResult result) {
            bool IsAutofresh = this.GetDefaultValueForInitialization<bool>();
            bool HaveNewTask = this.GetDefaultValueForInitialization<bool>();
            int pageCount = this.GetDefaultValueForInitialization<int>();
            System.Collections.ObjectModel.ObservableCollection<SMT.Saas.Tools.PersonalRecordWS.T_PF_PERSONALRECORD> retVal = ((SMT.Saas.Tools.PersonalRecordWS.IPersonalRecordService)(this)).EndGetCachePersonalRecordListNew(ref IsAutofresh, ref HaveNewTask, ref pageCount, result);
            return new object[] {
                    IsAutofresh,
                    HaveNewTask,
                    pageCount,
                    retVal};
        }
        
        private void OnGetCachePersonalRecordListNewCompleted(object state) {
            if ((this.GetCachePersonalRecordListNewCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCachePersonalRecordListNewCompleted(this, new GetCachePersonalRecordListNewCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCachePersonalRecordListNewAsync(SMT.Saas.Tools.PersonalRecordWS.MsgParms msgParams, bool IsAutofresh, bool HaveNewTask, int pageIndex, string strOrderBy, string checkstate, string filterString, string ownerid, string Isforward, string BeginDate, string EndDate, int pageCount) {
            this.GetCachePersonalRecordListNewAsync(msgParams, IsAutofresh, HaveNewTask, pageIndex, strOrderBy, checkstate, filterString, ownerid, Isforward, BeginDate, EndDate, pageCount, null);
        }
        
        public void GetCachePersonalRecordListNewAsync(SMT.Saas.Tools.PersonalRecordWS.MsgParms msgParams, bool IsAutofresh, bool HaveNewTask, int pageIndex, string strOrderBy, string checkstate, string filterString, string ownerid, string Isforward, string BeginDate, string EndDate, int pageCount, object userState) {
            if ((this.onBeginGetCachePersonalRecordListNewDelegate == null)) {
                this.onBeginGetCachePersonalRecordListNewDelegate = new BeginOperationDelegate(this.OnBeginGetCachePersonalRecordListNew);
            }
            if ((this.onEndGetCachePersonalRecordListNewDelegate == null)) {
                this.onEndGetCachePersonalRecordListNewDelegate = new EndOperationDelegate(this.OnEndGetCachePersonalRecordListNew);
            }
            if ((this.onGetCachePersonalRecordListNewCompletedDelegate == null)) {
                this.onGetCachePersonalRecordListNewCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCachePersonalRecordListNewCompleted);
            }
            base.InvokeAsync(this.onBeginGetCachePersonalRecordListNewDelegate, new object[] {
                        msgParams,
                        IsAutofresh,
                        HaveNewTask,
                        pageIndex,
                        strOrderBy,
                        checkstate,
                        filterString,
                        ownerid,
                        Isforward,
                        BeginDate,
                        EndDate,
                        pageCount}, this.onEndGetCachePersonalRecordListNewDelegate, this.onGetCachePersonalRecordListNewCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override SMT.Saas.Tools.PersonalRecordWS.IPersonalRecordService CreateChannel() {
            return new PersonalRecordServiceClientChannel(this);
        }
        
        private class PersonalRecordServiceClientChannel : ChannelBase<SMT.Saas.Tools.PersonalRecordWS.IPersonalRecordService>, SMT.Saas.Tools.PersonalRecordWS.IPersonalRecordService {
            
            public PersonalRecordServiceClientChannel(System.ServiceModel.ClientBase<SMT.Saas.Tools.PersonalRecordWS.IPersonalRecordService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginAddPersonalRecord(SMT.Saas.Tools.PersonalRecordWS.T_PF_PERSONALRECORD model, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = model;
                System.IAsyncResult _result = base.BeginInvoke("AddPersonalRecord", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndAddPersonalRecord(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("AddPersonalRecord", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddPersonalRecords(System.Collections.ObjectModel.ObservableCollection<SMT.Saas.Tools.PersonalRecordWS.T_PF_PERSONALRECORD> models, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = models;
                System.IAsyncResult _result = base.BeginInvoke("AddPersonalRecords", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndAddPersonalRecords(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("AddPersonalRecords", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUpdatePersonalRecord(SMT.Saas.Tools.PersonalRecordWS.T_PF_PERSONALRECORD model, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = model;
                System.IAsyncResult _result = base.BeginInvoke("UpdatePersonalRecord", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndUpdatePersonalRecord(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("UpdatePersonalRecord", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetPersonalRecord(int pageIndex, string strOrderBy, string checkstate, string filterString, string strCreateID, string BeginDate, string EndDate, ref int pageCount, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[8];
                _args[0] = pageIndex;
                _args[1] = strOrderBy;
                _args[2] = checkstate;
                _args[3] = filterString;
                _args[4] = strCreateID;
                _args[5] = BeginDate;
                _args[6] = EndDate;
                _args[7] = pageCount;
                System.IAsyncResult _result = base.BeginInvoke("GetPersonalRecord", _args, callback, asyncState);
                pageCount = ((int)(_args[7]));
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<SMT.Saas.Tools.PersonalRecordWS.T_PF_PERSONALRECORD> EndGetPersonalRecord(ref int pageCount, System.IAsyncResult result) {
                object[] _args = new object[1];
                _args[0] = pageCount;
                System.Collections.ObjectModel.ObservableCollection<SMT.Saas.Tools.PersonalRecordWS.T_PF_PERSONALRECORD> _result = ((System.Collections.ObjectModel.ObservableCollection<SMT.Saas.Tools.PersonalRecordWS.T_PF_PERSONALRECORD>)(base.EndInvoke("GetPersonalRecord", _args, result)));
                pageCount = ((int)(_args[0]));
                return _result;
            }
            
            public System.IAsyncResult BeginDeletePersonalRecord(string _personalrecordID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = _personalrecordID;
                System.IAsyncResult _result = base.BeginInvoke("DeletePersonalRecord", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndDeletePersonalRecord(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("DeletePersonalRecord", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetPersonalRecordModelByID(string _personalrecordID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = _personalrecordID;
                System.IAsyncResult _result = base.BeginInvoke("GetPersonalRecordModelByID", _args, callback, asyncState);
                return _result;
            }
            
            public SMT.Saas.Tools.PersonalRecordWS.T_PF_PERSONALRECORD EndGetPersonalRecordModelByID(System.IAsyncResult result) {
                object[] _args = new object[0];
                SMT.Saas.Tools.PersonalRecordWS.T_PF_PERSONALRECORD _result = ((SMT.Saas.Tools.PersonalRecordWS.T_PF_PERSONALRECORD)(base.EndInvoke("GetPersonalRecordModelByID", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetPersonalRecordModelByModelID(string _sysType, string _modelCode, string _modelID, string _IsForward, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = _sysType;
                _args[1] = _modelCode;
                _args[2] = _modelID;
                _args[3] = _IsForward;
                System.IAsyncResult _result = base.BeginInvoke("GetPersonalRecordModelByModelID", _args, callback, asyncState);
                return _result;
            }
            
            public SMT.Saas.Tools.PersonalRecordWS.T_PF_PERSONALRECORD EndGetPersonalRecordModelByModelID(System.IAsyncResult result) {
                object[] _args = new object[0];
                SMT.Saas.Tools.PersonalRecordWS.T_PF_PERSONALRECORD _result = ((SMT.Saas.Tools.PersonalRecordWS.T_PF_PERSONALRECORD)(base.EndInvoke("GetPersonalRecordModelByModelID", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetPersonalRecordList(int pageIndex, string strOrderBy, string checkstate, string filterString, string strCreateID, string Isforward, string BeginDate, string EndDate, ref int pageCount, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[9];
                _args[0] = pageIndex;
                _args[1] = strOrderBy;
                _args[2] = checkstate;
                _args[3] = filterString;
                _args[4] = strCreateID;
                _args[5] = Isforward;
                _args[6] = BeginDate;
                _args[7] = EndDate;
                _args[8] = pageCount;
                System.IAsyncResult _result = base.BeginInvoke("GetPersonalRecordList", _args, callback, asyncState);
                pageCount = ((int)(_args[8]));
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<SMT.Saas.Tools.PersonalRecordWS.T_PF_PERSONALRECORD> EndGetPersonalRecordList(ref int pageCount, System.IAsyncResult result) {
                object[] _args = new object[1];
                _args[0] = pageCount;
                System.Collections.ObjectModel.ObservableCollection<SMT.Saas.Tools.PersonalRecordWS.T_PF_PERSONALRECORD> _result = ((System.Collections.ObjectModel.ObservableCollection<SMT.Saas.Tools.PersonalRecordWS.T_PF_PERSONALRECORD>)(base.EndInvoke("GetPersonalRecordList", _args, result)));
                pageCount = ((int)(_args[0]));
                return _result;
            }
            
            public System.IAsyncResult BeginGetPersonalRecordListNew(int pageIndex, string strOrderBy, string checkstate, string filterString, string ownerid, string Isforward, string BeginDate, string EndDate, ref int pageCount, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[9];
                _args[0] = pageIndex;
                _args[1] = strOrderBy;
                _args[2] = checkstate;
                _args[3] = filterString;
                _args[4] = ownerid;
                _args[5] = Isforward;
                _args[6] = BeginDate;
                _args[7] = EndDate;
                _args[8] = pageCount;
                System.IAsyncResult _result = base.BeginInvoke("GetPersonalRecordListNew", _args, callback, asyncState);
                pageCount = ((int)(_args[8]));
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<SMT.Saas.Tools.PersonalRecordWS.T_PF_PERSONALRECORD> EndGetPersonalRecordListNew(ref int pageCount, System.IAsyncResult result) {
                object[] _args = new object[1];
                _args[0] = pageCount;
                System.Collections.ObjectModel.ObservableCollection<SMT.Saas.Tools.PersonalRecordWS.T_PF_PERSONALRECORD> _result = ((System.Collections.ObjectModel.ObservableCollection<SMT.Saas.Tools.PersonalRecordWS.T_PF_PERSONALRECORD>)(base.EndInvoke("GetPersonalRecordListNew", _args, result)));
                pageCount = ((int)(_args[0]));
                return _result;
            }
            
            public System.IAsyncResult BeginGetCachePersonalRecordListNew(SMT.Saas.Tools.PersonalRecordWS.MsgParms msgParams, ref bool IsAutofresh, ref bool HaveNewTask, int pageIndex, string strOrderBy, string checkstate, string filterString, string ownerid, string Isforward, string BeginDate, string EndDate, ref int pageCount, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[12];
                _args[0] = msgParams;
                _args[1] = IsAutofresh;
                _args[2] = HaveNewTask;
                _args[3] = pageIndex;
                _args[4] = strOrderBy;
                _args[5] = checkstate;
                _args[6] = filterString;
                _args[7] = ownerid;
                _args[8] = Isforward;
                _args[9] = BeginDate;
                _args[10] = EndDate;
                _args[11] = pageCount;
                System.IAsyncResult _result = base.BeginInvoke("GetCachePersonalRecordListNew", _args, callback, asyncState);
                IsAutofresh = ((bool)(_args[1]));
                HaveNewTask = ((bool)(_args[2]));
                pageCount = ((int)(_args[11]));
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<SMT.Saas.Tools.PersonalRecordWS.T_PF_PERSONALRECORD> EndGetCachePersonalRecordListNew(ref bool IsAutofresh, ref bool HaveNewTask, ref int pageCount, System.IAsyncResult result) {
                object[] _args = new object[3];
                _args[0] = IsAutofresh;
                _args[1] = HaveNewTask;
                _args[2] = pageCount;
                System.Collections.ObjectModel.ObservableCollection<SMT.Saas.Tools.PersonalRecordWS.T_PF_PERSONALRECORD> _result = ((System.Collections.ObjectModel.ObservableCollection<SMT.Saas.Tools.PersonalRecordWS.T_PF_PERSONALRECORD>)(base.EndInvoke("GetCachePersonalRecordListNew", _args, result)));
                IsAutofresh = ((bool)(_args[0]));
                HaveNewTask = ((bool)(_args[1]));
                pageCount = ((int)(_args[2]));
                return _result;
            }
        }
    }
}
