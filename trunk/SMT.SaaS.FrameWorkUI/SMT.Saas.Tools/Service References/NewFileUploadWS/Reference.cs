//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.50826.0
// 
namespace SMT.Saas.Tools.NewFileUploadWS {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserFile", Namespace="http://schemas.datacontract.org/2004/07/SMT.FileUpLoad.Service")]
    public partial class UserFile : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string ApplicationIDField;
        
        private long BytesUploadedField;
        
        private string CompanyCodeField;
        
        private string CompanyNameField;
        
        private string CreateNameField;
        
        private System.DateTime CreateTimeField;
        
        private string FileNameField;
        
        private double FileSizeField;
        
        private string FileTypeField;
        
        private string FileUrlField;
        
        private decimal INDEXLField;
        
        private int MaxNumberField;
        
        private double MaxSizeField;
        
        private string ModelCodeField;
        
        private string OWNERCOMPANYIDField;
        
        private string OWNERDEPARTMENTIDField;
        
        private string OWNERIDField;
        
        private string OWNERPOSTIDField;
        
        private string RemarkField;
        
        private string SavePathField;
        
        private string SmtFileListIdField;
        
        private string SystemCodeField;
        
        private string ThumbnailUrlField;
        
        private string TypeField;
        
        private string UpdateNameField;
        
        private System.DateTime UpdateTimeField;
        
        private double UploadSpeedField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ApplicationID {
            get {
                return this.ApplicationIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ApplicationIDField, value) != true)) {
                    this.ApplicationIDField = value;
                    this.RaisePropertyChanged("ApplicationID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long BytesUploaded {
            get {
                return this.BytesUploadedField;
            }
            set {
                if ((this.BytesUploadedField.Equals(value) != true)) {
                    this.BytesUploadedField = value;
                    this.RaisePropertyChanged("BytesUploaded");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CompanyCode {
            get {
                return this.CompanyCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyCodeField, value) != true)) {
                    this.CompanyCodeField = value;
                    this.RaisePropertyChanged("CompanyCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CompanyName {
            get {
                return this.CompanyNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyNameField, value) != true)) {
                    this.CompanyNameField = value;
                    this.RaisePropertyChanged("CompanyName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreateName {
            get {
                return this.CreateNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CreateNameField, value) != true)) {
                    this.CreateNameField = value;
                    this.RaisePropertyChanged("CreateName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateTime {
            get {
                return this.CreateTimeField;
            }
            set {
                if ((this.CreateTimeField.Equals(value) != true)) {
                    this.CreateTimeField = value;
                    this.RaisePropertyChanged("CreateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileName {
            get {
                return this.FileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FileNameField, value) != true)) {
                    this.FileNameField = value;
                    this.RaisePropertyChanged("FileName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double FileSize {
            get {
                return this.FileSizeField;
            }
            set {
                if ((this.FileSizeField.Equals(value) != true)) {
                    this.FileSizeField = value;
                    this.RaisePropertyChanged("FileSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileType {
            get {
                return this.FileTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.FileTypeField, value) != true)) {
                    this.FileTypeField = value;
                    this.RaisePropertyChanged("FileType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileUrl {
            get {
                return this.FileUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.FileUrlField, value) != true)) {
                    this.FileUrlField = value;
                    this.RaisePropertyChanged("FileUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal INDEXL {
            get {
                return this.INDEXLField;
            }
            set {
                if ((this.INDEXLField.Equals(value) != true)) {
                    this.INDEXLField = value;
                    this.RaisePropertyChanged("INDEXL");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MaxNumber {
            get {
                return this.MaxNumberField;
            }
            set {
                if ((this.MaxNumberField.Equals(value) != true)) {
                    this.MaxNumberField = value;
                    this.RaisePropertyChanged("MaxNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double MaxSize {
            get {
                return this.MaxSizeField;
            }
            set {
                if ((this.MaxSizeField.Equals(value) != true)) {
                    this.MaxSizeField = value;
                    this.RaisePropertyChanged("MaxSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ModelCode {
            get {
                return this.ModelCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.ModelCodeField, value) != true)) {
                    this.ModelCodeField = value;
                    this.RaisePropertyChanged("ModelCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OWNERCOMPANYID {
            get {
                return this.OWNERCOMPANYIDField;
            }
            set {
                if ((object.ReferenceEquals(this.OWNERCOMPANYIDField, value) != true)) {
                    this.OWNERCOMPANYIDField = value;
                    this.RaisePropertyChanged("OWNERCOMPANYID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OWNERDEPARTMENTID {
            get {
                return this.OWNERDEPARTMENTIDField;
            }
            set {
                if ((object.ReferenceEquals(this.OWNERDEPARTMENTIDField, value) != true)) {
                    this.OWNERDEPARTMENTIDField = value;
                    this.RaisePropertyChanged("OWNERDEPARTMENTID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OWNERID {
            get {
                return this.OWNERIDField;
            }
            set {
                if ((object.ReferenceEquals(this.OWNERIDField, value) != true)) {
                    this.OWNERIDField = value;
                    this.RaisePropertyChanged("OWNERID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OWNERPOSTID {
            get {
                return this.OWNERPOSTIDField;
            }
            set {
                if ((object.ReferenceEquals(this.OWNERPOSTIDField, value) != true)) {
                    this.OWNERPOSTIDField = value;
                    this.RaisePropertyChanged("OWNERPOSTID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Remark {
            get {
                return this.RemarkField;
            }
            set {
                if ((object.ReferenceEquals(this.RemarkField, value) != true)) {
                    this.RemarkField = value;
                    this.RaisePropertyChanged("Remark");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SavePath {
            get {
                return this.SavePathField;
            }
            set {
                if ((object.ReferenceEquals(this.SavePathField, value) != true)) {
                    this.SavePathField = value;
                    this.RaisePropertyChanged("SavePath");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SmtFileListId {
            get {
                return this.SmtFileListIdField;
            }
            set {
                if ((object.ReferenceEquals(this.SmtFileListIdField, value) != true)) {
                    this.SmtFileListIdField = value;
                    this.RaisePropertyChanged("SmtFileListId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SystemCode {
            get {
                return this.SystemCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.SystemCodeField, value) != true)) {
                    this.SystemCodeField = value;
                    this.RaisePropertyChanged("SystemCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ThumbnailUrl {
            get {
                return this.ThumbnailUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.ThumbnailUrlField, value) != true)) {
                    this.ThumbnailUrlField = value;
                    this.RaisePropertyChanged("ThumbnailUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UpdateName {
            get {
                return this.UpdateNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UpdateNameField, value) != true)) {
                    this.UpdateNameField = value;
                    this.RaisePropertyChanged("UpdateName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime UpdateTime {
            get {
                return this.UpdateTimeField;
            }
            set {
                if ((this.UpdateTimeField.Equals(value) != true)) {
                    this.UpdateTimeField = value;
                    this.RaisePropertyChanged("UpdateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double UploadSpeed {
            get {
                return this.UploadSpeedField;
            }
            set {
                if ((this.UploadSpeedField.Equals(value) != true)) {
                    this.UploadSpeedField = value;
                    this.RaisePropertyChanged("UploadSpeed");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CallBackResult", Namespace="http://schemas.datacontract.org/2004/07/SMT.FileUpLoad.Service")]
    public partial class CallBackResult : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string DownloadUrlField;
        
        private string ErrorField;
        
        private System.Collections.ObjectModel.ObservableCollection<SMT.Saas.Tools.NewFileUploadWS.SMT_FILELIST> FileListField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DownloadUrl {
            get {
                return this.DownloadUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.DownloadUrlField, value) != true)) {
                    this.DownloadUrlField = value;
                    this.RaisePropertyChanged("DownloadUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Error {
            get {
                return this.ErrorField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorField, value) != true)) {
                    this.ErrorField = value;
                    this.RaisePropertyChanged("Error");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<SMT.Saas.Tools.NewFileUploadWS.SMT_FILELIST> FileList {
            get {
                return this.FileListField;
            }
            set {
                if ((object.ReferenceEquals(this.FileListField, value) != true)) {
                    this.FileListField = value;
                    this.RaisePropertyChanged("FileList");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SMT_FILELIST", Namespace="http://schemas.datacontract.org/2004/07/SMT_FU_EFModel", IsReference=true)]
    public partial class SMT_FILELIST : SMT.Saas.Tools.NewFileUploadWS.EntityObject {
        
        private string APPLICATIONIDField;
        
        private string COMPANYCODEField;
        
        private string COMPANYNAMEField;
        
        private string CREATENAMEField;
        
        private System.Nullable<System.DateTime> CREATETIMEField;
        
        private string CREATEUSERIDField;
        
        private string FILENAMEField;
        
        private System.Nullable<decimal> FILESIZEField;
        
        private string FILETYPEField;
        
        private string FILEURLField;
        
        private string FORMIDField;
        
        private System.Nullable<decimal> INDEXLField;
        
        private string MODELCODEField;
        
        private string OWNERCOMPANYIDField;
        
        private string OWNERDEPARTMENTIDField;
        
        private string OWNERIDField;
        
        private string OWNERPOSTIDField;
        
        private string PASSWORDField;
        
        private string REMARKField;
        
        private string SMTFILELISTIDField;
        
        private string SYSTEMCODEField;
        
        private string THUMBNAILURLField;
        
        private string UPDATENAMEField;
        
        private System.Nullable<System.DateTime> UPDATETIMEField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string APPLICATIONID {
            get {
                return this.APPLICATIONIDField;
            }
            set {
                if ((object.ReferenceEquals(this.APPLICATIONIDField, value) != true)) {
                    this.APPLICATIONIDField = value;
                    this.RaisePropertyChanged("APPLICATIONID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string COMPANYCODE {
            get {
                return this.COMPANYCODEField;
            }
            set {
                if ((object.ReferenceEquals(this.COMPANYCODEField, value) != true)) {
                    this.COMPANYCODEField = value;
                    this.RaisePropertyChanged("COMPANYCODE");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string COMPANYNAME {
            get {
                return this.COMPANYNAMEField;
            }
            set {
                if ((object.ReferenceEquals(this.COMPANYNAMEField, value) != true)) {
                    this.COMPANYNAMEField = value;
                    this.RaisePropertyChanged("COMPANYNAME");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CREATENAME {
            get {
                return this.CREATENAMEField;
            }
            set {
                if ((object.ReferenceEquals(this.CREATENAMEField, value) != true)) {
                    this.CREATENAMEField = value;
                    this.RaisePropertyChanged("CREATENAME");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> CREATETIME {
            get {
                return this.CREATETIMEField;
            }
            set {
                if ((this.CREATETIMEField.Equals(value) != true)) {
                    this.CREATETIMEField = value;
                    this.RaisePropertyChanged("CREATETIME");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CREATEUSERID {
            get {
                return this.CREATEUSERIDField;
            }
            set {
                if ((object.ReferenceEquals(this.CREATEUSERIDField, value) != true)) {
                    this.CREATEUSERIDField = value;
                    this.RaisePropertyChanged("CREATEUSERID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FILENAME {
            get {
                return this.FILENAMEField;
            }
            set {
                if ((object.ReferenceEquals(this.FILENAMEField, value) != true)) {
                    this.FILENAMEField = value;
                    this.RaisePropertyChanged("FILENAME");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> FILESIZE {
            get {
                return this.FILESIZEField;
            }
            set {
                if ((this.FILESIZEField.Equals(value) != true)) {
                    this.FILESIZEField = value;
                    this.RaisePropertyChanged("FILESIZE");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FILETYPE {
            get {
                return this.FILETYPEField;
            }
            set {
                if ((object.ReferenceEquals(this.FILETYPEField, value) != true)) {
                    this.FILETYPEField = value;
                    this.RaisePropertyChanged("FILETYPE");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FILEURL {
            get {
                return this.FILEURLField;
            }
            set {
                if ((object.ReferenceEquals(this.FILEURLField, value) != true)) {
                    this.FILEURLField = value;
                    this.RaisePropertyChanged("FILEURL");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FORMID {
            get {
                return this.FORMIDField;
            }
            set {
                if ((object.ReferenceEquals(this.FORMIDField, value) != true)) {
                    this.FORMIDField = value;
                    this.RaisePropertyChanged("FORMID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> INDEXL {
            get {
                return this.INDEXLField;
            }
            set {
                if ((this.INDEXLField.Equals(value) != true)) {
                    this.INDEXLField = value;
                    this.RaisePropertyChanged("INDEXL");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MODELCODE {
            get {
                return this.MODELCODEField;
            }
            set {
                if ((object.ReferenceEquals(this.MODELCODEField, value) != true)) {
                    this.MODELCODEField = value;
                    this.RaisePropertyChanged("MODELCODE");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OWNERCOMPANYID {
            get {
                return this.OWNERCOMPANYIDField;
            }
            set {
                if ((object.ReferenceEquals(this.OWNERCOMPANYIDField, value) != true)) {
                    this.OWNERCOMPANYIDField = value;
                    this.RaisePropertyChanged("OWNERCOMPANYID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OWNERDEPARTMENTID {
            get {
                return this.OWNERDEPARTMENTIDField;
            }
            set {
                if ((object.ReferenceEquals(this.OWNERDEPARTMENTIDField, value) != true)) {
                    this.OWNERDEPARTMENTIDField = value;
                    this.RaisePropertyChanged("OWNERDEPARTMENTID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OWNERID {
            get {
                return this.OWNERIDField;
            }
            set {
                if ((object.ReferenceEquals(this.OWNERIDField, value) != true)) {
                    this.OWNERIDField = value;
                    this.RaisePropertyChanged("OWNERID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OWNERPOSTID {
            get {
                return this.OWNERPOSTIDField;
            }
            set {
                if ((object.ReferenceEquals(this.OWNERPOSTIDField, value) != true)) {
                    this.OWNERPOSTIDField = value;
                    this.RaisePropertyChanged("OWNERPOSTID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PASSWORD {
            get {
                return this.PASSWORDField;
            }
            set {
                if ((object.ReferenceEquals(this.PASSWORDField, value) != true)) {
                    this.PASSWORDField = value;
                    this.RaisePropertyChanged("PASSWORD");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string REMARK {
            get {
                return this.REMARKField;
            }
            set {
                if ((object.ReferenceEquals(this.REMARKField, value) != true)) {
                    this.REMARKField = value;
                    this.RaisePropertyChanged("REMARK");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SMTFILELISTID {
            get {
                return this.SMTFILELISTIDField;
            }
            set {
                if ((object.ReferenceEquals(this.SMTFILELISTIDField, value) != true)) {
                    this.SMTFILELISTIDField = value;
                    this.RaisePropertyChanged("SMTFILELISTID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SYSTEMCODE {
            get {
                return this.SYSTEMCODEField;
            }
            set {
                if ((object.ReferenceEquals(this.SYSTEMCODEField, value) != true)) {
                    this.SYSTEMCODEField = value;
                    this.RaisePropertyChanged("SYSTEMCODE");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string THUMBNAILURL {
            get {
                return this.THUMBNAILURLField;
            }
            set {
                if ((object.ReferenceEquals(this.THUMBNAILURLField, value) != true)) {
                    this.THUMBNAILURLField = value;
                    this.RaisePropertyChanged("THUMBNAILURL");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UPDATENAME {
            get {
                return this.UPDATENAMEField;
            }
            set {
                if ((object.ReferenceEquals(this.UPDATENAMEField, value) != true)) {
                    this.UPDATENAMEField = value;
                    this.RaisePropertyChanged("UPDATENAME");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> UPDATETIME {
            get {
                return this.UPDATETIMEField;
            }
            set {
                if ((this.UPDATETIMEField.Equals(value) != true)) {
                    this.UPDATETIMEField = value;
                    this.RaisePropertyChanged("UPDATETIME");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StructuralObject", Namespace="http://schemas.datacontract.org/2004/07/System.Data.Objects.DataClasses", IsReference=true)]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SMT.Saas.Tools.NewFileUploadWS.EntityObject))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SMT.Saas.Tools.NewFileUploadWS.SMT_FILELIST))]
    public partial class StructuralObject : object, System.ComponentModel.INotifyPropertyChanged {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EntityObject", Namespace="http://schemas.datacontract.org/2004/07/System.Data.Objects.DataClasses", IsReference=true)]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SMT.Saas.Tools.NewFileUploadWS.SMT_FILELIST))]
    public partial class EntityObject : SMT.Saas.Tools.NewFileUploadWS.StructuralObject {
        
        private SMT.Saas.Tools.NewFileUploadWS.EntityKey EntityKeyField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SMT.Saas.Tools.NewFileUploadWS.EntityKey EntityKey {
            get {
                return this.EntityKeyField;
            }
            set {
                if ((object.ReferenceEquals(this.EntityKeyField, value) != true)) {
                    this.EntityKeyField = value;
                    this.RaisePropertyChanged("EntityKey");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EntityKey", Namespace="http://schemas.datacontract.org/2004/07/System.Data", IsReference=true)]
    public partial class EntityKey : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string EntityContainerNameField;
        
        private System.Collections.ObjectModel.ObservableCollection<SMT.Saas.Tools.NewFileUploadWS.EntityKeyMember> EntityKeyValuesField;
        
        private string EntitySetNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EntityContainerName {
            get {
                return this.EntityContainerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.EntityContainerNameField, value) != true)) {
                    this.EntityContainerNameField = value;
                    this.RaisePropertyChanged("EntityContainerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<SMT.Saas.Tools.NewFileUploadWS.EntityKeyMember> EntityKeyValues {
            get {
                return this.EntityKeyValuesField;
            }
            set {
                if ((object.ReferenceEquals(this.EntityKeyValuesField, value) != true)) {
                    this.EntityKeyValuesField = value;
                    this.RaisePropertyChanged("EntityKeyValues");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EntitySetName {
            get {
                return this.EntitySetNameField;
            }
            set {
                if ((object.ReferenceEquals(this.EntitySetNameField, value) != true)) {
                    this.EntitySetNameField = value;
                    this.RaisePropertyChanged("EntitySetName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EntityKeyMember", Namespace="http://schemas.datacontract.org/2004/07/System.Data")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SMT.Saas.Tools.NewFileUploadWS.EntityKey))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<SMT.Saas.Tools.NewFileUploadWS.EntityKeyMember>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SMT.Saas.Tools.NewFileUploadWS.EntityObject))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SMT.Saas.Tools.NewFileUploadWS.StructuralObject))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<SMT.Saas.Tools.NewFileUploadWS.SMT_FILELIST>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SMT.Saas.Tools.NewFileUploadWS.SMT_FILELIST))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SMT.Saas.Tools.NewFileUploadWS.UserFile))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SMT.Saas.Tools.NewFileUploadWS.CallBackResult))]
    public partial class EntityKeyMember : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string KeyField;
        
        private object ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Key {
            get {
                return this.KeyField;
            }
            set {
                if ((object.ReferenceEquals(this.KeyField, value) != true)) {
                    this.KeyField = value;
                    this.RaisePropertyChanged("Key");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="NewFileUploadWS.IUploadService")]
    public interface IUploadService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUploadService/GetCompanyFileSetInfo", ReplyAction="http://tempuri.org/IUploadService/GetCompanyFileSetInfoResponse")]
        System.IAsyncResult BeginGetCompanyFileSetInfo(string companycode, System.AsyncCallback callback, object asyncState);
        
        SMT.Saas.Tools.NewFileUploadWS.UserFile EndGetCompanyFileSetInfo(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUploadService/GetCompanyFileByCompanyCodeAndName", ReplyAction="http://tempuri.org/IUploadService/GetCompanyFileByCompanyCodeAndNameResponse")]
        System.IAsyncResult BeginGetCompanyFileByCompanyCodeAndName(string companycode, string CompanyName, System.AsyncCallback callback, object asyncState);
        
        SMT.Saas.Tools.NewFileUploadWS.UserFile EndGetCompanyFileByCompanyCodeAndName(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUploadService/SaveUpLoadFile", ReplyAction="http://tempuri.org/IUploadService/SaveUpLoadFileResponse")]
        System.IAsyncResult BeginSaveUpLoadFile(string strSystemCode, string strModelCode, string strFileName, string strMd5Name, string strID, string strGuid, byte[] data, int BytesUploaded, int dataLength, bool firstChunk, bool lastChunk, string strCreateUserID, SMT.Saas.Tools.NewFileUploadWS.UserFile model, System.AsyncCallback callback, object asyncState);
        
        string EndSaveUpLoadFile(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUploadService/SaveUpLoadFileIsExist", ReplyAction="http://tempuri.org/IUploadService/SaveUpLoadFileIsExistResponse")]
        System.IAsyncResult BeginSaveUpLoadFileIsExist(string strSystemCode, string strModelCode, string strFileName, string strMd5Name, string strID, string strGuid, byte[] data, int BytesUploaded, int dataLength, bool firstChunk, bool lastChunk, string strCreateUserID, SMT.Saas.Tools.NewFileUploadWS.UserFile model, System.AsyncCallback callback, object asyncState);
        
        string EndSaveUpLoadFileIsExist(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUploadService/CancelUpload", ReplyAction="http://tempuri.org/IUploadService/CancelUploadResponse")]
        System.IAsyncResult BeginCancelUpload(string filename, System.AsyncCallback callback, object asyncState);
        
        void EndCancelUpload(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUploadService/CheckFileExists", ReplyAction="http://tempuri.org/IUploadService/CheckFileExistsResponse")]
        System.IAsyncResult BeginCheckFileExists(SMT.Saas.Tools.NewFileUploadWS.UserFile model, string md5Name, System.AsyncCallback callback, object asyncState);
        
        SMT.Saas.Tools.NewFileUploadWS.UserFile EndCheckFileExists(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUploadService/GetFileListByCompanyCode", ReplyAction="http://tempuri.org/IUploadService/GetFileListByCompanyCodeResponse")]
        System.IAsyncResult BeginGetFileListByCompanyCode(string companycode, System.AsyncCallback callback, object asyncState);
        
        SMT.Saas.Tools.NewFileUploadWS.CallBackResult EndGetFileListByCompanyCode(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUploadService/GetFileListBySystemCode", ReplyAction="http://tempuri.org/IUploadService/GetFileListBySystemCodeResponse")]
        System.IAsyncResult BeginGetFileListBySystemCode(string companycode, string systemcode, System.AsyncCallback callback, object asyncState);
        
        SMT.Saas.Tools.NewFileUploadWS.CallBackResult EndGetFileListBySystemCode(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUploadService/GetFileListByModelCode", ReplyAction="http://tempuri.org/IUploadService/GetFileListByModelCodeResponse")]
        System.IAsyncResult BeginGetFileListByModelCode(string companycode, string systemcode, string modelcode, System.AsyncCallback callback, object asyncState);
        
        SMT.Saas.Tools.NewFileUploadWS.CallBackResult EndGetFileListByModelCode(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUploadService/GetFileListByApplicationID", ReplyAction="http://tempuri.org/IUploadService/GetFileListByApplicationIDResponse")]
        System.IAsyncResult BeginGetFileListByApplicationID(string companycode, string systemcode, string modelcode, string applicationid, string createname, System.AsyncCallback callback, object asyncState);
        
        SMT.Saas.Tools.NewFileUploadWS.CallBackResult EndGetFileListByApplicationID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUploadService/GetFileListByOnlyApplicationID", ReplyAction="http://tempuri.org/IUploadService/GetFileListByOnlyApplicationIDResponse")]
        System.IAsyncResult BeginGetFileListByOnlyApplicationID(string applicationid, System.AsyncCallback callback, object asyncState);
        
        SMT.Saas.Tools.NewFileUploadWS.CallBackResult EndGetFileListByOnlyApplicationID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUploadService/DeleteFile", ReplyAction="http://tempuri.org/IUploadService/DeleteFileResponse")]
        System.IAsyncResult BeginDeleteFile(string smtfilelistid, string filepath, System.AsyncCallback callback, object asyncState);
        
        string EndDeleteFile(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUploadService/DeleteFileByUrl", ReplyAction="http://tempuri.org/IUploadService/DeleteFileByUrlResponse")]
        System.IAsyncResult BeginDeleteFileByUrl(string filepath, System.AsyncCallback callback, object asyncState);
        
        string EndDeleteFileByUrl(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUploadService/DeleteFileByApplicationID", ReplyAction="http://tempuri.org/IUploadService/DeleteFileByApplicationIDResponse")]
        System.IAsyncResult BeginDeleteFileByApplicationID(string companycode, string systemcode, string modelcode, string applicationid, System.AsyncCallback callback, object asyncState);
        
        string EndDeleteFileByApplicationID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUploadService/DeleteFileByModelCode", ReplyAction="http://tempuri.org/IUploadService/DeleteFileByModelCodeResponse")]
        System.IAsyncResult BeginDeleteFileByModelCode(string companycode, string systemcode, string modelcode, System.AsyncCallback callback, object asyncState);
        
        string EndDeleteFileByModelCode(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUploadService/DeleteFileBySystemCode", ReplyAction="http://tempuri.org/IUploadService/DeleteFileBySystemCodeResponse")]
        System.IAsyncResult BeginDeleteFileBySystemCode(string companycode, string systemcode, System.AsyncCallback callback, object asyncState);
        
        string EndDeleteFileBySystemCode(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUploadService/DeleteFileByCompanycode", ReplyAction="http://tempuri.org/IUploadService/DeleteFileByCompanycodeResponse")]
        System.IAsyncResult BeginDeleteFileByCompanycode(string companycode, System.AsyncCallback callback, object asyncState);
        
        string EndDeleteFileByCompanycode(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUploadService/DeleteFileByOnlyApplicationID", ReplyAction="http://tempuri.org/IUploadService/DeleteFileByOnlyApplicationIDResponse")]
        System.IAsyncResult BeginDeleteFileByOnlyApplicationID(string applicationid, System.AsyncCallback callback, object asyncState);
        
        string EndDeleteFileByOnlyApplicationID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUploadService/DeleteFileByApplicationIDAndFileName", ReplyAction="http://tempuri.org/IUploadService/DeleteFileByApplicationIDAndFileNameResponse")]
        System.IAsyncResult BeginDeleteFileByApplicationIDAndFileName(string applicationid, string FileName, System.AsyncCallback callback, object asyncState);
        
        string EndDeleteFileByApplicationIDAndFileName(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUploadServiceChannel : SMT.Saas.Tools.NewFileUploadWS.IUploadService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCompanyFileSetInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCompanyFileSetInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SMT.Saas.Tools.NewFileUploadWS.UserFile Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SMT.Saas.Tools.NewFileUploadWS.UserFile)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCompanyFileByCompanyCodeAndNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCompanyFileByCompanyCodeAndNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SMT.Saas.Tools.NewFileUploadWS.UserFile Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SMT.Saas.Tools.NewFileUploadWS.UserFile)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SaveUpLoadFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SaveUpLoadFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SaveUpLoadFileIsExistCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SaveUpLoadFileIsExistCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CheckFileExistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CheckFileExistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SMT.Saas.Tools.NewFileUploadWS.UserFile Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SMT.Saas.Tools.NewFileUploadWS.UserFile)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFileListByCompanyCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFileListByCompanyCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SMT.Saas.Tools.NewFileUploadWS.CallBackResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SMT.Saas.Tools.NewFileUploadWS.CallBackResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFileListBySystemCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFileListBySystemCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SMT.Saas.Tools.NewFileUploadWS.CallBackResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SMT.Saas.Tools.NewFileUploadWS.CallBackResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFileListByModelCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFileListByModelCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SMT.Saas.Tools.NewFileUploadWS.CallBackResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SMT.Saas.Tools.NewFileUploadWS.CallBackResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFileListByApplicationIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFileListByApplicationIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SMT.Saas.Tools.NewFileUploadWS.CallBackResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SMT.Saas.Tools.NewFileUploadWS.CallBackResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFileListByOnlyApplicationIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFileListByOnlyApplicationIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SMT.Saas.Tools.NewFileUploadWS.CallBackResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SMT.Saas.Tools.NewFileUploadWS.CallBackResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteFileByUrlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteFileByUrlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteFileByApplicationIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteFileByApplicationIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteFileByModelCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteFileByModelCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteFileBySystemCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteFileBySystemCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteFileByCompanycodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteFileByCompanycodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteFileByOnlyApplicationIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteFileByOnlyApplicationIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteFileByApplicationIDAndFileNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteFileByApplicationIDAndFileNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UploadServiceClient : System.ServiceModel.ClientBase<SMT.Saas.Tools.NewFileUploadWS.IUploadService>, SMT.Saas.Tools.NewFileUploadWS.IUploadService {
        
        private BeginOperationDelegate onBeginGetCompanyFileSetInfoDelegate;
        
        private EndOperationDelegate onEndGetCompanyFileSetInfoDelegate;
        
        private System.Threading.SendOrPostCallback onGetCompanyFileSetInfoCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCompanyFileByCompanyCodeAndNameDelegate;
        
        private EndOperationDelegate onEndGetCompanyFileByCompanyCodeAndNameDelegate;
        
        private System.Threading.SendOrPostCallback onGetCompanyFileByCompanyCodeAndNameCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveUpLoadFileDelegate;
        
        private EndOperationDelegate onEndSaveUpLoadFileDelegate;
        
        private System.Threading.SendOrPostCallback onSaveUpLoadFileCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveUpLoadFileIsExistDelegate;
        
        private EndOperationDelegate onEndSaveUpLoadFileIsExistDelegate;
        
        private System.Threading.SendOrPostCallback onSaveUpLoadFileIsExistCompletedDelegate;
        
        private BeginOperationDelegate onBeginCancelUploadDelegate;
        
        private EndOperationDelegate onEndCancelUploadDelegate;
        
        private System.Threading.SendOrPostCallback onCancelUploadCompletedDelegate;
        
        private BeginOperationDelegate onBeginCheckFileExistsDelegate;
        
        private EndOperationDelegate onEndCheckFileExistsDelegate;
        
        private System.Threading.SendOrPostCallback onCheckFileExistsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFileListByCompanyCodeDelegate;
        
        private EndOperationDelegate onEndGetFileListByCompanyCodeDelegate;
        
        private System.Threading.SendOrPostCallback onGetFileListByCompanyCodeCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFileListBySystemCodeDelegate;
        
        private EndOperationDelegate onEndGetFileListBySystemCodeDelegate;
        
        private System.Threading.SendOrPostCallback onGetFileListBySystemCodeCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFileListByModelCodeDelegate;
        
        private EndOperationDelegate onEndGetFileListByModelCodeDelegate;
        
        private System.Threading.SendOrPostCallback onGetFileListByModelCodeCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFileListByApplicationIDDelegate;
        
        private EndOperationDelegate onEndGetFileListByApplicationIDDelegate;
        
        private System.Threading.SendOrPostCallback onGetFileListByApplicationIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFileListByOnlyApplicationIDDelegate;
        
        private EndOperationDelegate onEndGetFileListByOnlyApplicationIDDelegate;
        
        private System.Threading.SendOrPostCallback onGetFileListByOnlyApplicationIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteFileDelegate;
        
        private EndOperationDelegate onEndDeleteFileDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteFileCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteFileByUrlDelegate;
        
        private EndOperationDelegate onEndDeleteFileByUrlDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteFileByUrlCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteFileByApplicationIDDelegate;
        
        private EndOperationDelegate onEndDeleteFileByApplicationIDDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteFileByApplicationIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteFileByModelCodeDelegate;
        
        private EndOperationDelegate onEndDeleteFileByModelCodeDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteFileByModelCodeCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteFileBySystemCodeDelegate;
        
        private EndOperationDelegate onEndDeleteFileBySystemCodeDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteFileBySystemCodeCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteFileByCompanycodeDelegate;
        
        private EndOperationDelegate onEndDeleteFileByCompanycodeDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteFileByCompanycodeCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteFileByOnlyApplicationIDDelegate;
        
        private EndOperationDelegate onEndDeleteFileByOnlyApplicationIDDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteFileByOnlyApplicationIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteFileByApplicationIDAndFileNameDelegate;
        
        private EndOperationDelegate onEndDeleteFileByApplicationIDAndFileNameDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteFileByApplicationIDAndFileNameCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public UploadServiceClient() {
        }
        
        public UploadServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UploadServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UploadServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UploadServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetCompanyFileSetInfoCompletedEventArgs> GetCompanyFileSetInfoCompleted;
        
        public event System.EventHandler<GetCompanyFileByCompanyCodeAndNameCompletedEventArgs> GetCompanyFileByCompanyCodeAndNameCompleted;
        
        public event System.EventHandler<SaveUpLoadFileCompletedEventArgs> SaveUpLoadFileCompleted;
        
        public event System.EventHandler<SaveUpLoadFileIsExistCompletedEventArgs> SaveUpLoadFileIsExistCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CancelUploadCompleted;
        
        public event System.EventHandler<CheckFileExistsCompletedEventArgs> CheckFileExistsCompleted;
        
        public event System.EventHandler<GetFileListByCompanyCodeCompletedEventArgs> GetFileListByCompanyCodeCompleted;
        
        public event System.EventHandler<GetFileListBySystemCodeCompletedEventArgs> GetFileListBySystemCodeCompleted;
        
        public event System.EventHandler<GetFileListByModelCodeCompletedEventArgs> GetFileListByModelCodeCompleted;
        
        public event System.EventHandler<GetFileListByApplicationIDCompletedEventArgs> GetFileListByApplicationIDCompleted;
        
        public event System.EventHandler<GetFileListByOnlyApplicationIDCompletedEventArgs> GetFileListByOnlyApplicationIDCompleted;
        
        public event System.EventHandler<DeleteFileCompletedEventArgs> DeleteFileCompleted;
        
        public event System.EventHandler<DeleteFileByUrlCompletedEventArgs> DeleteFileByUrlCompleted;
        
        public event System.EventHandler<DeleteFileByApplicationIDCompletedEventArgs> DeleteFileByApplicationIDCompleted;
        
        public event System.EventHandler<DeleteFileByModelCodeCompletedEventArgs> DeleteFileByModelCodeCompleted;
        
        public event System.EventHandler<DeleteFileBySystemCodeCompletedEventArgs> DeleteFileBySystemCodeCompleted;
        
        public event System.EventHandler<DeleteFileByCompanycodeCompletedEventArgs> DeleteFileByCompanycodeCompleted;
        
        public event System.EventHandler<DeleteFileByOnlyApplicationIDCompletedEventArgs> DeleteFileByOnlyApplicationIDCompleted;
        
        public event System.EventHandler<DeleteFileByApplicationIDAndFileNameCompletedEventArgs> DeleteFileByApplicationIDAndFileNameCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SMT.Saas.Tools.NewFileUploadWS.IUploadService.BeginGetCompanyFileSetInfo(string companycode, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCompanyFileSetInfo(companycode, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SMT.Saas.Tools.NewFileUploadWS.UserFile SMT.Saas.Tools.NewFileUploadWS.IUploadService.EndGetCompanyFileSetInfo(System.IAsyncResult result) {
            return base.Channel.EndGetCompanyFileSetInfo(result);
        }
        
        private System.IAsyncResult OnBeginGetCompanyFileSetInfo(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string companycode = ((string)(inValues[0]));
            return ((SMT.Saas.Tools.NewFileUploadWS.IUploadService)(this)).BeginGetCompanyFileSetInfo(companycode, callback, asyncState);
        }
        
        private object[] OnEndGetCompanyFileSetInfo(System.IAsyncResult result) {
            SMT.Saas.Tools.NewFileUploadWS.UserFile retVal = ((SMT.Saas.Tools.NewFileUploadWS.IUploadService)(this)).EndGetCompanyFileSetInfo(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCompanyFileSetInfoCompleted(object state) {
            if ((this.GetCompanyFileSetInfoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCompanyFileSetInfoCompleted(this, new GetCompanyFileSetInfoCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCompanyFileSetInfoAsync(string companycode) {
            this.GetCompanyFileSetInfoAsync(companycode, null);
        }
        
        public void GetCompanyFileSetInfoAsync(string companycode, object userState) {
            if ((this.onBeginGetCompanyFileSetInfoDelegate == null)) {
                this.onBeginGetCompanyFileSetInfoDelegate = new BeginOperationDelegate(this.OnBeginGetCompanyFileSetInfo);
            }
            if ((this.onEndGetCompanyFileSetInfoDelegate == null)) {
                this.onEndGetCompanyFileSetInfoDelegate = new EndOperationDelegate(this.OnEndGetCompanyFileSetInfo);
            }
            if ((this.onGetCompanyFileSetInfoCompletedDelegate == null)) {
                this.onGetCompanyFileSetInfoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCompanyFileSetInfoCompleted);
            }
            base.InvokeAsync(this.onBeginGetCompanyFileSetInfoDelegate, new object[] {
                        companycode}, this.onEndGetCompanyFileSetInfoDelegate, this.onGetCompanyFileSetInfoCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SMT.Saas.Tools.NewFileUploadWS.IUploadService.BeginGetCompanyFileByCompanyCodeAndName(string companycode, string CompanyName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCompanyFileByCompanyCodeAndName(companycode, CompanyName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SMT.Saas.Tools.NewFileUploadWS.UserFile SMT.Saas.Tools.NewFileUploadWS.IUploadService.EndGetCompanyFileByCompanyCodeAndName(System.IAsyncResult result) {
            return base.Channel.EndGetCompanyFileByCompanyCodeAndName(result);
        }
        
        private System.IAsyncResult OnBeginGetCompanyFileByCompanyCodeAndName(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string companycode = ((string)(inValues[0]));
            string CompanyName = ((string)(inValues[1]));
            return ((SMT.Saas.Tools.NewFileUploadWS.IUploadService)(this)).BeginGetCompanyFileByCompanyCodeAndName(companycode, CompanyName, callback, asyncState);
        }
        
        private object[] OnEndGetCompanyFileByCompanyCodeAndName(System.IAsyncResult result) {
            SMT.Saas.Tools.NewFileUploadWS.UserFile retVal = ((SMT.Saas.Tools.NewFileUploadWS.IUploadService)(this)).EndGetCompanyFileByCompanyCodeAndName(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCompanyFileByCompanyCodeAndNameCompleted(object state) {
            if ((this.GetCompanyFileByCompanyCodeAndNameCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCompanyFileByCompanyCodeAndNameCompleted(this, new GetCompanyFileByCompanyCodeAndNameCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCompanyFileByCompanyCodeAndNameAsync(string companycode, string CompanyName) {
            this.GetCompanyFileByCompanyCodeAndNameAsync(companycode, CompanyName, null);
        }
        
        public void GetCompanyFileByCompanyCodeAndNameAsync(string companycode, string CompanyName, object userState) {
            if ((this.onBeginGetCompanyFileByCompanyCodeAndNameDelegate == null)) {
                this.onBeginGetCompanyFileByCompanyCodeAndNameDelegate = new BeginOperationDelegate(this.OnBeginGetCompanyFileByCompanyCodeAndName);
            }
            if ((this.onEndGetCompanyFileByCompanyCodeAndNameDelegate == null)) {
                this.onEndGetCompanyFileByCompanyCodeAndNameDelegate = new EndOperationDelegate(this.OnEndGetCompanyFileByCompanyCodeAndName);
            }
            if ((this.onGetCompanyFileByCompanyCodeAndNameCompletedDelegate == null)) {
                this.onGetCompanyFileByCompanyCodeAndNameCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCompanyFileByCompanyCodeAndNameCompleted);
            }
            base.InvokeAsync(this.onBeginGetCompanyFileByCompanyCodeAndNameDelegate, new object[] {
                        companycode,
                        CompanyName}, this.onEndGetCompanyFileByCompanyCodeAndNameDelegate, this.onGetCompanyFileByCompanyCodeAndNameCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SMT.Saas.Tools.NewFileUploadWS.IUploadService.BeginSaveUpLoadFile(string strSystemCode, string strModelCode, string strFileName, string strMd5Name, string strID, string strGuid, byte[] data, int BytesUploaded, int dataLength, bool firstChunk, bool lastChunk, string strCreateUserID, SMT.Saas.Tools.NewFileUploadWS.UserFile model, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveUpLoadFile(strSystemCode, strModelCode, strFileName, strMd5Name, strID, strGuid, data, BytesUploaded, dataLength, firstChunk, lastChunk, strCreateUserID, model, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string SMT.Saas.Tools.NewFileUploadWS.IUploadService.EndSaveUpLoadFile(System.IAsyncResult result) {
            return base.Channel.EndSaveUpLoadFile(result);
        }
        
        private System.IAsyncResult OnBeginSaveUpLoadFile(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string strSystemCode = ((string)(inValues[0]));
            string strModelCode = ((string)(inValues[1]));
            string strFileName = ((string)(inValues[2]));
            string strMd5Name = ((string)(inValues[3]));
            string strID = ((string)(inValues[4]));
            string strGuid = ((string)(inValues[5]));
            byte[] data = ((byte[])(inValues[6]));
            int BytesUploaded = ((int)(inValues[7]));
            int dataLength = ((int)(inValues[8]));
            bool firstChunk = ((bool)(inValues[9]));
            bool lastChunk = ((bool)(inValues[10]));
            string strCreateUserID = ((string)(inValues[11]));
            SMT.Saas.Tools.NewFileUploadWS.UserFile model = ((SMT.Saas.Tools.NewFileUploadWS.UserFile)(inValues[12]));
            return ((SMT.Saas.Tools.NewFileUploadWS.IUploadService)(this)).BeginSaveUpLoadFile(strSystemCode, strModelCode, strFileName, strMd5Name, strID, strGuid, data, BytesUploaded, dataLength, firstChunk, lastChunk, strCreateUserID, model, callback, asyncState);
        }
        
        private object[] OnEndSaveUpLoadFile(System.IAsyncResult result) {
            string retVal = ((SMT.Saas.Tools.NewFileUploadWS.IUploadService)(this)).EndSaveUpLoadFile(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSaveUpLoadFileCompleted(object state) {
            if ((this.SaveUpLoadFileCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveUpLoadFileCompleted(this, new SaveUpLoadFileCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveUpLoadFileAsync(string strSystemCode, string strModelCode, string strFileName, string strMd5Name, string strID, string strGuid, byte[] data, int BytesUploaded, int dataLength, bool firstChunk, bool lastChunk, string strCreateUserID, SMT.Saas.Tools.NewFileUploadWS.UserFile model) {
            this.SaveUpLoadFileAsync(strSystemCode, strModelCode, strFileName, strMd5Name, strID, strGuid, data, BytesUploaded, dataLength, firstChunk, lastChunk, strCreateUserID, model, null);
        }
        
        public void SaveUpLoadFileAsync(string strSystemCode, string strModelCode, string strFileName, string strMd5Name, string strID, string strGuid, byte[] data, int BytesUploaded, int dataLength, bool firstChunk, bool lastChunk, string strCreateUserID, SMT.Saas.Tools.NewFileUploadWS.UserFile model, object userState) {
            if ((this.onBeginSaveUpLoadFileDelegate == null)) {
                this.onBeginSaveUpLoadFileDelegate = new BeginOperationDelegate(this.OnBeginSaveUpLoadFile);
            }
            if ((this.onEndSaveUpLoadFileDelegate == null)) {
                this.onEndSaveUpLoadFileDelegate = new EndOperationDelegate(this.OnEndSaveUpLoadFile);
            }
            if ((this.onSaveUpLoadFileCompletedDelegate == null)) {
                this.onSaveUpLoadFileCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveUpLoadFileCompleted);
            }
            base.InvokeAsync(this.onBeginSaveUpLoadFileDelegate, new object[] {
                        strSystemCode,
                        strModelCode,
                        strFileName,
                        strMd5Name,
                        strID,
                        strGuid,
                        data,
                        BytesUploaded,
                        dataLength,
                        firstChunk,
                        lastChunk,
                        strCreateUserID,
                        model}, this.onEndSaveUpLoadFileDelegate, this.onSaveUpLoadFileCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SMT.Saas.Tools.NewFileUploadWS.IUploadService.BeginSaveUpLoadFileIsExist(string strSystemCode, string strModelCode, string strFileName, string strMd5Name, string strID, string strGuid, byte[] data, int BytesUploaded, int dataLength, bool firstChunk, bool lastChunk, string strCreateUserID, SMT.Saas.Tools.NewFileUploadWS.UserFile model, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveUpLoadFileIsExist(strSystemCode, strModelCode, strFileName, strMd5Name, strID, strGuid, data, BytesUploaded, dataLength, firstChunk, lastChunk, strCreateUserID, model, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string SMT.Saas.Tools.NewFileUploadWS.IUploadService.EndSaveUpLoadFileIsExist(System.IAsyncResult result) {
            return base.Channel.EndSaveUpLoadFileIsExist(result);
        }
        
        private System.IAsyncResult OnBeginSaveUpLoadFileIsExist(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string strSystemCode = ((string)(inValues[0]));
            string strModelCode = ((string)(inValues[1]));
            string strFileName = ((string)(inValues[2]));
            string strMd5Name = ((string)(inValues[3]));
            string strID = ((string)(inValues[4]));
            string strGuid = ((string)(inValues[5]));
            byte[] data = ((byte[])(inValues[6]));
            int BytesUploaded = ((int)(inValues[7]));
            int dataLength = ((int)(inValues[8]));
            bool firstChunk = ((bool)(inValues[9]));
            bool lastChunk = ((bool)(inValues[10]));
            string strCreateUserID = ((string)(inValues[11]));
            SMT.Saas.Tools.NewFileUploadWS.UserFile model = ((SMT.Saas.Tools.NewFileUploadWS.UserFile)(inValues[12]));
            return ((SMT.Saas.Tools.NewFileUploadWS.IUploadService)(this)).BeginSaveUpLoadFileIsExist(strSystemCode, strModelCode, strFileName, strMd5Name, strID, strGuid, data, BytesUploaded, dataLength, firstChunk, lastChunk, strCreateUserID, model, callback, asyncState);
        }
        
        private object[] OnEndSaveUpLoadFileIsExist(System.IAsyncResult result) {
            string retVal = ((SMT.Saas.Tools.NewFileUploadWS.IUploadService)(this)).EndSaveUpLoadFileIsExist(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSaveUpLoadFileIsExistCompleted(object state) {
            if ((this.SaveUpLoadFileIsExistCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveUpLoadFileIsExistCompleted(this, new SaveUpLoadFileIsExistCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveUpLoadFileIsExistAsync(string strSystemCode, string strModelCode, string strFileName, string strMd5Name, string strID, string strGuid, byte[] data, int BytesUploaded, int dataLength, bool firstChunk, bool lastChunk, string strCreateUserID, SMT.Saas.Tools.NewFileUploadWS.UserFile model) {
            this.SaveUpLoadFileIsExistAsync(strSystemCode, strModelCode, strFileName, strMd5Name, strID, strGuid, data, BytesUploaded, dataLength, firstChunk, lastChunk, strCreateUserID, model, null);
        }
        
        public void SaveUpLoadFileIsExistAsync(string strSystemCode, string strModelCode, string strFileName, string strMd5Name, string strID, string strGuid, byte[] data, int BytesUploaded, int dataLength, bool firstChunk, bool lastChunk, string strCreateUserID, SMT.Saas.Tools.NewFileUploadWS.UserFile model, object userState) {
            if ((this.onBeginSaveUpLoadFileIsExistDelegate == null)) {
                this.onBeginSaveUpLoadFileIsExistDelegate = new BeginOperationDelegate(this.OnBeginSaveUpLoadFileIsExist);
            }
            if ((this.onEndSaveUpLoadFileIsExistDelegate == null)) {
                this.onEndSaveUpLoadFileIsExistDelegate = new EndOperationDelegate(this.OnEndSaveUpLoadFileIsExist);
            }
            if ((this.onSaveUpLoadFileIsExistCompletedDelegate == null)) {
                this.onSaveUpLoadFileIsExistCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveUpLoadFileIsExistCompleted);
            }
            base.InvokeAsync(this.onBeginSaveUpLoadFileIsExistDelegate, new object[] {
                        strSystemCode,
                        strModelCode,
                        strFileName,
                        strMd5Name,
                        strID,
                        strGuid,
                        data,
                        BytesUploaded,
                        dataLength,
                        firstChunk,
                        lastChunk,
                        strCreateUserID,
                        model}, this.onEndSaveUpLoadFileIsExistDelegate, this.onSaveUpLoadFileIsExistCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SMT.Saas.Tools.NewFileUploadWS.IUploadService.BeginCancelUpload(string filename, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCancelUpload(filename, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void SMT.Saas.Tools.NewFileUploadWS.IUploadService.EndCancelUpload(System.IAsyncResult result) {
            base.Channel.EndCancelUpload(result);
        }
        
        private System.IAsyncResult OnBeginCancelUpload(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string filename = ((string)(inValues[0]));
            return ((SMT.Saas.Tools.NewFileUploadWS.IUploadService)(this)).BeginCancelUpload(filename, callback, asyncState);
        }
        
        private object[] OnEndCancelUpload(System.IAsyncResult result) {
            ((SMT.Saas.Tools.NewFileUploadWS.IUploadService)(this)).EndCancelUpload(result);
            return null;
        }
        
        private void OnCancelUploadCompleted(object state) {
            if ((this.CancelUploadCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CancelUploadCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CancelUploadAsync(string filename) {
            this.CancelUploadAsync(filename, null);
        }
        
        public void CancelUploadAsync(string filename, object userState) {
            if ((this.onBeginCancelUploadDelegate == null)) {
                this.onBeginCancelUploadDelegate = new BeginOperationDelegate(this.OnBeginCancelUpload);
            }
            if ((this.onEndCancelUploadDelegate == null)) {
                this.onEndCancelUploadDelegate = new EndOperationDelegate(this.OnEndCancelUpload);
            }
            if ((this.onCancelUploadCompletedDelegate == null)) {
                this.onCancelUploadCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCancelUploadCompleted);
            }
            base.InvokeAsync(this.onBeginCancelUploadDelegate, new object[] {
                        filename}, this.onEndCancelUploadDelegate, this.onCancelUploadCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SMT.Saas.Tools.NewFileUploadWS.IUploadService.BeginCheckFileExists(SMT.Saas.Tools.NewFileUploadWS.UserFile model, string md5Name, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCheckFileExists(model, md5Name, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SMT.Saas.Tools.NewFileUploadWS.UserFile SMT.Saas.Tools.NewFileUploadWS.IUploadService.EndCheckFileExists(System.IAsyncResult result) {
            return base.Channel.EndCheckFileExists(result);
        }
        
        private System.IAsyncResult OnBeginCheckFileExists(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SMT.Saas.Tools.NewFileUploadWS.UserFile model = ((SMT.Saas.Tools.NewFileUploadWS.UserFile)(inValues[0]));
            string md5Name = ((string)(inValues[1]));
            return ((SMT.Saas.Tools.NewFileUploadWS.IUploadService)(this)).BeginCheckFileExists(model, md5Name, callback, asyncState);
        }
        
        private object[] OnEndCheckFileExists(System.IAsyncResult result) {
            SMT.Saas.Tools.NewFileUploadWS.UserFile retVal = ((SMT.Saas.Tools.NewFileUploadWS.IUploadService)(this)).EndCheckFileExists(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCheckFileExistsCompleted(object state) {
            if ((this.CheckFileExistsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CheckFileExistsCompleted(this, new CheckFileExistsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CheckFileExistsAsync(SMT.Saas.Tools.NewFileUploadWS.UserFile model, string md5Name) {
            this.CheckFileExistsAsync(model, md5Name, null);
        }
        
        public void CheckFileExistsAsync(SMT.Saas.Tools.NewFileUploadWS.UserFile model, string md5Name, object userState) {
            if ((this.onBeginCheckFileExistsDelegate == null)) {
                this.onBeginCheckFileExistsDelegate = new BeginOperationDelegate(this.OnBeginCheckFileExists);
            }
            if ((this.onEndCheckFileExistsDelegate == null)) {
                this.onEndCheckFileExistsDelegate = new EndOperationDelegate(this.OnEndCheckFileExists);
            }
            if ((this.onCheckFileExistsCompletedDelegate == null)) {
                this.onCheckFileExistsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCheckFileExistsCompleted);
            }
            base.InvokeAsync(this.onBeginCheckFileExistsDelegate, new object[] {
                        model,
                        md5Name}, this.onEndCheckFileExistsDelegate, this.onCheckFileExistsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SMT.Saas.Tools.NewFileUploadWS.IUploadService.BeginGetFileListByCompanyCode(string companycode, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFileListByCompanyCode(companycode, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SMT.Saas.Tools.NewFileUploadWS.CallBackResult SMT.Saas.Tools.NewFileUploadWS.IUploadService.EndGetFileListByCompanyCode(System.IAsyncResult result) {
            return base.Channel.EndGetFileListByCompanyCode(result);
        }
        
        private System.IAsyncResult OnBeginGetFileListByCompanyCode(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string companycode = ((string)(inValues[0]));
            return ((SMT.Saas.Tools.NewFileUploadWS.IUploadService)(this)).BeginGetFileListByCompanyCode(companycode, callback, asyncState);
        }
        
        private object[] OnEndGetFileListByCompanyCode(System.IAsyncResult result) {
            SMT.Saas.Tools.NewFileUploadWS.CallBackResult retVal = ((SMT.Saas.Tools.NewFileUploadWS.IUploadService)(this)).EndGetFileListByCompanyCode(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFileListByCompanyCodeCompleted(object state) {
            if ((this.GetFileListByCompanyCodeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFileListByCompanyCodeCompleted(this, new GetFileListByCompanyCodeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFileListByCompanyCodeAsync(string companycode) {
            this.GetFileListByCompanyCodeAsync(companycode, null);
        }
        
        public void GetFileListByCompanyCodeAsync(string companycode, object userState) {
            if ((this.onBeginGetFileListByCompanyCodeDelegate == null)) {
                this.onBeginGetFileListByCompanyCodeDelegate = new BeginOperationDelegate(this.OnBeginGetFileListByCompanyCode);
            }
            if ((this.onEndGetFileListByCompanyCodeDelegate == null)) {
                this.onEndGetFileListByCompanyCodeDelegate = new EndOperationDelegate(this.OnEndGetFileListByCompanyCode);
            }
            if ((this.onGetFileListByCompanyCodeCompletedDelegate == null)) {
                this.onGetFileListByCompanyCodeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFileListByCompanyCodeCompleted);
            }
            base.InvokeAsync(this.onBeginGetFileListByCompanyCodeDelegate, new object[] {
                        companycode}, this.onEndGetFileListByCompanyCodeDelegate, this.onGetFileListByCompanyCodeCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SMT.Saas.Tools.NewFileUploadWS.IUploadService.BeginGetFileListBySystemCode(string companycode, string systemcode, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFileListBySystemCode(companycode, systemcode, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SMT.Saas.Tools.NewFileUploadWS.CallBackResult SMT.Saas.Tools.NewFileUploadWS.IUploadService.EndGetFileListBySystemCode(System.IAsyncResult result) {
            return base.Channel.EndGetFileListBySystemCode(result);
        }
        
        private System.IAsyncResult OnBeginGetFileListBySystemCode(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string companycode = ((string)(inValues[0]));
            string systemcode = ((string)(inValues[1]));
            return ((SMT.Saas.Tools.NewFileUploadWS.IUploadService)(this)).BeginGetFileListBySystemCode(companycode, systemcode, callback, asyncState);
        }
        
        private object[] OnEndGetFileListBySystemCode(System.IAsyncResult result) {
            SMT.Saas.Tools.NewFileUploadWS.CallBackResult retVal = ((SMT.Saas.Tools.NewFileUploadWS.IUploadService)(this)).EndGetFileListBySystemCode(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFileListBySystemCodeCompleted(object state) {
            if ((this.GetFileListBySystemCodeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFileListBySystemCodeCompleted(this, new GetFileListBySystemCodeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFileListBySystemCodeAsync(string companycode, string systemcode) {
            this.GetFileListBySystemCodeAsync(companycode, systemcode, null);
        }
        
        public void GetFileListBySystemCodeAsync(string companycode, string systemcode, object userState) {
            if ((this.onBeginGetFileListBySystemCodeDelegate == null)) {
                this.onBeginGetFileListBySystemCodeDelegate = new BeginOperationDelegate(this.OnBeginGetFileListBySystemCode);
            }
            if ((this.onEndGetFileListBySystemCodeDelegate == null)) {
                this.onEndGetFileListBySystemCodeDelegate = new EndOperationDelegate(this.OnEndGetFileListBySystemCode);
            }
            if ((this.onGetFileListBySystemCodeCompletedDelegate == null)) {
                this.onGetFileListBySystemCodeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFileListBySystemCodeCompleted);
            }
            base.InvokeAsync(this.onBeginGetFileListBySystemCodeDelegate, new object[] {
                        companycode,
                        systemcode}, this.onEndGetFileListBySystemCodeDelegate, this.onGetFileListBySystemCodeCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SMT.Saas.Tools.NewFileUploadWS.IUploadService.BeginGetFileListByModelCode(string companycode, string systemcode, string modelcode, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFileListByModelCode(companycode, systemcode, modelcode, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SMT.Saas.Tools.NewFileUploadWS.CallBackResult SMT.Saas.Tools.NewFileUploadWS.IUploadService.EndGetFileListByModelCode(System.IAsyncResult result) {
            return base.Channel.EndGetFileListByModelCode(result);
        }
        
        private System.IAsyncResult OnBeginGetFileListByModelCode(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string companycode = ((string)(inValues[0]));
            string systemcode = ((string)(inValues[1]));
            string modelcode = ((string)(inValues[2]));
            return ((SMT.Saas.Tools.NewFileUploadWS.IUploadService)(this)).BeginGetFileListByModelCode(companycode, systemcode, modelcode, callback, asyncState);
        }
        
        private object[] OnEndGetFileListByModelCode(System.IAsyncResult result) {
            SMT.Saas.Tools.NewFileUploadWS.CallBackResult retVal = ((SMT.Saas.Tools.NewFileUploadWS.IUploadService)(this)).EndGetFileListByModelCode(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFileListByModelCodeCompleted(object state) {
            if ((this.GetFileListByModelCodeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFileListByModelCodeCompleted(this, new GetFileListByModelCodeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFileListByModelCodeAsync(string companycode, string systemcode, string modelcode) {
            this.GetFileListByModelCodeAsync(companycode, systemcode, modelcode, null);
        }
        
        public void GetFileListByModelCodeAsync(string companycode, string systemcode, string modelcode, object userState) {
            if ((this.onBeginGetFileListByModelCodeDelegate == null)) {
                this.onBeginGetFileListByModelCodeDelegate = new BeginOperationDelegate(this.OnBeginGetFileListByModelCode);
            }
            if ((this.onEndGetFileListByModelCodeDelegate == null)) {
                this.onEndGetFileListByModelCodeDelegate = new EndOperationDelegate(this.OnEndGetFileListByModelCode);
            }
            if ((this.onGetFileListByModelCodeCompletedDelegate == null)) {
                this.onGetFileListByModelCodeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFileListByModelCodeCompleted);
            }
            base.InvokeAsync(this.onBeginGetFileListByModelCodeDelegate, new object[] {
                        companycode,
                        systemcode,
                        modelcode}, this.onEndGetFileListByModelCodeDelegate, this.onGetFileListByModelCodeCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SMT.Saas.Tools.NewFileUploadWS.IUploadService.BeginGetFileListByApplicationID(string companycode, string systemcode, string modelcode, string applicationid, string createname, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFileListByApplicationID(companycode, systemcode, modelcode, applicationid, createname, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SMT.Saas.Tools.NewFileUploadWS.CallBackResult SMT.Saas.Tools.NewFileUploadWS.IUploadService.EndGetFileListByApplicationID(System.IAsyncResult result) {
            return base.Channel.EndGetFileListByApplicationID(result);
        }
        
        private System.IAsyncResult OnBeginGetFileListByApplicationID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string companycode = ((string)(inValues[0]));
            string systemcode = ((string)(inValues[1]));
            string modelcode = ((string)(inValues[2]));
            string applicationid = ((string)(inValues[3]));
            string createname = ((string)(inValues[4]));
            return ((SMT.Saas.Tools.NewFileUploadWS.IUploadService)(this)).BeginGetFileListByApplicationID(companycode, systemcode, modelcode, applicationid, createname, callback, asyncState);
        }
        
        private object[] OnEndGetFileListByApplicationID(System.IAsyncResult result) {
            SMT.Saas.Tools.NewFileUploadWS.CallBackResult retVal = ((SMT.Saas.Tools.NewFileUploadWS.IUploadService)(this)).EndGetFileListByApplicationID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFileListByApplicationIDCompleted(object state) {
            if ((this.GetFileListByApplicationIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFileListByApplicationIDCompleted(this, new GetFileListByApplicationIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFileListByApplicationIDAsync(string companycode, string systemcode, string modelcode, string applicationid, string createname) {
            this.GetFileListByApplicationIDAsync(companycode, systemcode, modelcode, applicationid, createname, null);
        }
        
        public void GetFileListByApplicationIDAsync(string companycode, string systemcode, string modelcode, string applicationid, string createname, object userState) {
            if ((this.onBeginGetFileListByApplicationIDDelegate == null)) {
                this.onBeginGetFileListByApplicationIDDelegate = new BeginOperationDelegate(this.OnBeginGetFileListByApplicationID);
            }
            if ((this.onEndGetFileListByApplicationIDDelegate == null)) {
                this.onEndGetFileListByApplicationIDDelegate = new EndOperationDelegate(this.OnEndGetFileListByApplicationID);
            }
            if ((this.onGetFileListByApplicationIDCompletedDelegate == null)) {
                this.onGetFileListByApplicationIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFileListByApplicationIDCompleted);
            }
            base.InvokeAsync(this.onBeginGetFileListByApplicationIDDelegate, new object[] {
                        companycode,
                        systemcode,
                        modelcode,
                        applicationid,
                        createname}, this.onEndGetFileListByApplicationIDDelegate, this.onGetFileListByApplicationIDCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SMT.Saas.Tools.NewFileUploadWS.IUploadService.BeginGetFileListByOnlyApplicationID(string applicationid, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFileListByOnlyApplicationID(applicationid, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SMT.Saas.Tools.NewFileUploadWS.CallBackResult SMT.Saas.Tools.NewFileUploadWS.IUploadService.EndGetFileListByOnlyApplicationID(System.IAsyncResult result) {
            return base.Channel.EndGetFileListByOnlyApplicationID(result);
        }
        
        private System.IAsyncResult OnBeginGetFileListByOnlyApplicationID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string applicationid = ((string)(inValues[0]));
            return ((SMT.Saas.Tools.NewFileUploadWS.IUploadService)(this)).BeginGetFileListByOnlyApplicationID(applicationid, callback, asyncState);
        }
        
        private object[] OnEndGetFileListByOnlyApplicationID(System.IAsyncResult result) {
            SMT.Saas.Tools.NewFileUploadWS.CallBackResult retVal = ((SMT.Saas.Tools.NewFileUploadWS.IUploadService)(this)).EndGetFileListByOnlyApplicationID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFileListByOnlyApplicationIDCompleted(object state) {
            if ((this.GetFileListByOnlyApplicationIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFileListByOnlyApplicationIDCompleted(this, new GetFileListByOnlyApplicationIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFileListByOnlyApplicationIDAsync(string applicationid) {
            this.GetFileListByOnlyApplicationIDAsync(applicationid, null);
        }
        
        public void GetFileListByOnlyApplicationIDAsync(string applicationid, object userState) {
            if ((this.onBeginGetFileListByOnlyApplicationIDDelegate == null)) {
                this.onBeginGetFileListByOnlyApplicationIDDelegate = new BeginOperationDelegate(this.OnBeginGetFileListByOnlyApplicationID);
            }
            if ((this.onEndGetFileListByOnlyApplicationIDDelegate == null)) {
                this.onEndGetFileListByOnlyApplicationIDDelegate = new EndOperationDelegate(this.OnEndGetFileListByOnlyApplicationID);
            }
            if ((this.onGetFileListByOnlyApplicationIDCompletedDelegate == null)) {
                this.onGetFileListByOnlyApplicationIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFileListByOnlyApplicationIDCompleted);
            }
            base.InvokeAsync(this.onBeginGetFileListByOnlyApplicationIDDelegate, new object[] {
                        applicationid}, this.onEndGetFileListByOnlyApplicationIDDelegate, this.onGetFileListByOnlyApplicationIDCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SMT.Saas.Tools.NewFileUploadWS.IUploadService.BeginDeleteFile(string smtfilelistid, string filepath, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteFile(smtfilelistid, filepath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string SMT.Saas.Tools.NewFileUploadWS.IUploadService.EndDeleteFile(System.IAsyncResult result) {
            return base.Channel.EndDeleteFile(result);
        }
        
        private System.IAsyncResult OnBeginDeleteFile(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string smtfilelistid = ((string)(inValues[0]));
            string filepath = ((string)(inValues[1]));
            return ((SMT.Saas.Tools.NewFileUploadWS.IUploadService)(this)).BeginDeleteFile(smtfilelistid, filepath, callback, asyncState);
        }
        
        private object[] OnEndDeleteFile(System.IAsyncResult result) {
            string retVal = ((SMT.Saas.Tools.NewFileUploadWS.IUploadService)(this)).EndDeleteFile(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteFileCompleted(object state) {
            if ((this.DeleteFileCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteFileCompleted(this, new DeleteFileCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteFileAsync(string smtfilelistid, string filepath) {
            this.DeleteFileAsync(smtfilelistid, filepath, null);
        }
        
        public void DeleteFileAsync(string smtfilelistid, string filepath, object userState) {
            if ((this.onBeginDeleteFileDelegate == null)) {
                this.onBeginDeleteFileDelegate = new BeginOperationDelegate(this.OnBeginDeleteFile);
            }
            if ((this.onEndDeleteFileDelegate == null)) {
                this.onEndDeleteFileDelegate = new EndOperationDelegate(this.OnEndDeleteFile);
            }
            if ((this.onDeleteFileCompletedDelegate == null)) {
                this.onDeleteFileCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteFileCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteFileDelegate, new object[] {
                        smtfilelistid,
                        filepath}, this.onEndDeleteFileDelegate, this.onDeleteFileCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SMT.Saas.Tools.NewFileUploadWS.IUploadService.BeginDeleteFileByUrl(string filepath, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteFileByUrl(filepath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string SMT.Saas.Tools.NewFileUploadWS.IUploadService.EndDeleteFileByUrl(System.IAsyncResult result) {
            return base.Channel.EndDeleteFileByUrl(result);
        }
        
        private System.IAsyncResult OnBeginDeleteFileByUrl(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string filepath = ((string)(inValues[0]));
            return ((SMT.Saas.Tools.NewFileUploadWS.IUploadService)(this)).BeginDeleteFileByUrl(filepath, callback, asyncState);
        }
        
        private object[] OnEndDeleteFileByUrl(System.IAsyncResult result) {
            string retVal = ((SMT.Saas.Tools.NewFileUploadWS.IUploadService)(this)).EndDeleteFileByUrl(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteFileByUrlCompleted(object state) {
            if ((this.DeleteFileByUrlCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteFileByUrlCompleted(this, new DeleteFileByUrlCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteFileByUrlAsync(string filepath) {
            this.DeleteFileByUrlAsync(filepath, null);
        }
        
        public void DeleteFileByUrlAsync(string filepath, object userState) {
            if ((this.onBeginDeleteFileByUrlDelegate == null)) {
                this.onBeginDeleteFileByUrlDelegate = new BeginOperationDelegate(this.OnBeginDeleteFileByUrl);
            }
            if ((this.onEndDeleteFileByUrlDelegate == null)) {
                this.onEndDeleteFileByUrlDelegate = new EndOperationDelegate(this.OnEndDeleteFileByUrl);
            }
            if ((this.onDeleteFileByUrlCompletedDelegate == null)) {
                this.onDeleteFileByUrlCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteFileByUrlCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteFileByUrlDelegate, new object[] {
                        filepath}, this.onEndDeleteFileByUrlDelegate, this.onDeleteFileByUrlCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SMT.Saas.Tools.NewFileUploadWS.IUploadService.BeginDeleteFileByApplicationID(string companycode, string systemcode, string modelcode, string applicationid, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteFileByApplicationID(companycode, systemcode, modelcode, applicationid, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string SMT.Saas.Tools.NewFileUploadWS.IUploadService.EndDeleteFileByApplicationID(System.IAsyncResult result) {
            return base.Channel.EndDeleteFileByApplicationID(result);
        }
        
        private System.IAsyncResult OnBeginDeleteFileByApplicationID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string companycode = ((string)(inValues[0]));
            string systemcode = ((string)(inValues[1]));
            string modelcode = ((string)(inValues[2]));
            string applicationid = ((string)(inValues[3]));
            return ((SMT.Saas.Tools.NewFileUploadWS.IUploadService)(this)).BeginDeleteFileByApplicationID(companycode, systemcode, modelcode, applicationid, callback, asyncState);
        }
        
        private object[] OnEndDeleteFileByApplicationID(System.IAsyncResult result) {
            string retVal = ((SMT.Saas.Tools.NewFileUploadWS.IUploadService)(this)).EndDeleteFileByApplicationID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteFileByApplicationIDCompleted(object state) {
            if ((this.DeleteFileByApplicationIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteFileByApplicationIDCompleted(this, new DeleteFileByApplicationIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteFileByApplicationIDAsync(string companycode, string systemcode, string modelcode, string applicationid) {
            this.DeleteFileByApplicationIDAsync(companycode, systemcode, modelcode, applicationid, null);
        }
        
        public void DeleteFileByApplicationIDAsync(string companycode, string systemcode, string modelcode, string applicationid, object userState) {
            if ((this.onBeginDeleteFileByApplicationIDDelegate == null)) {
                this.onBeginDeleteFileByApplicationIDDelegate = new BeginOperationDelegate(this.OnBeginDeleteFileByApplicationID);
            }
            if ((this.onEndDeleteFileByApplicationIDDelegate == null)) {
                this.onEndDeleteFileByApplicationIDDelegate = new EndOperationDelegate(this.OnEndDeleteFileByApplicationID);
            }
            if ((this.onDeleteFileByApplicationIDCompletedDelegate == null)) {
                this.onDeleteFileByApplicationIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteFileByApplicationIDCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteFileByApplicationIDDelegate, new object[] {
                        companycode,
                        systemcode,
                        modelcode,
                        applicationid}, this.onEndDeleteFileByApplicationIDDelegate, this.onDeleteFileByApplicationIDCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SMT.Saas.Tools.NewFileUploadWS.IUploadService.BeginDeleteFileByModelCode(string companycode, string systemcode, string modelcode, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteFileByModelCode(companycode, systemcode, modelcode, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string SMT.Saas.Tools.NewFileUploadWS.IUploadService.EndDeleteFileByModelCode(System.IAsyncResult result) {
            return base.Channel.EndDeleteFileByModelCode(result);
        }
        
        private System.IAsyncResult OnBeginDeleteFileByModelCode(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string companycode = ((string)(inValues[0]));
            string systemcode = ((string)(inValues[1]));
            string modelcode = ((string)(inValues[2]));
            return ((SMT.Saas.Tools.NewFileUploadWS.IUploadService)(this)).BeginDeleteFileByModelCode(companycode, systemcode, modelcode, callback, asyncState);
        }
        
        private object[] OnEndDeleteFileByModelCode(System.IAsyncResult result) {
            string retVal = ((SMT.Saas.Tools.NewFileUploadWS.IUploadService)(this)).EndDeleteFileByModelCode(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteFileByModelCodeCompleted(object state) {
            if ((this.DeleteFileByModelCodeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteFileByModelCodeCompleted(this, new DeleteFileByModelCodeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteFileByModelCodeAsync(string companycode, string systemcode, string modelcode) {
            this.DeleteFileByModelCodeAsync(companycode, systemcode, modelcode, null);
        }
        
        public void DeleteFileByModelCodeAsync(string companycode, string systemcode, string modelcode, object userState) {
            if ((this.onBeginDeleteFileByModelCodeDelegate == null)) {
                this.onBeginDeleteFileByModelCodeDelegate = new BeginOperationDelegate(this.OnBeginDeleteFileByModelCode);
            }
            if ((this.onEndDeleteFileByModelCodeDelegate == null)) {
                this.onEndDeleteFileByModelCodeDelegate = new EndOperationDelegate(this.OnEndDeleteFileByModelCode);
            }
            if ((this.onDeleteFileByModelCodeCompletedDelegate == null)) {
                this.onDeleteFileByModelCodeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteFileByModelCodeCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteFileByModelCodeDelegate, new object[] {
                        companycode,
                        systemcode,
                        modelcode}, this.onEndDeleteFileByModelCodeDelegate, this.onDeleteFileByModelCodeCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SMT.Saas.Tools.NewFileUploadWS.IUploadService.BeginDeleteFileBySystemCode(string companycode, string systemcode, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteFileBySystemCode(companycode, systemcode, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string SMT.Saas.Tools.NewFileUploadWS.IUploadService.EndDeleteFileBySystemCode(System.IAsyncResult result) {
            return base.Channel.EndDeleteFileBySystemCode(result);
        }
        
        private System.IAsyncResult OnBeginDeleteFileBySystemCode(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string companycode = ((string)(inValues[0]));
            string systemcode = ((string)(inValues[1]));
            return ((SMT.Saas.Tools.NewFileUploadWS.IUploadService)(this)).BeginDeleteFileBySystemCode(companycode, systemcode, callback, asyncState);
        }
        
        private object[] OnEndDeleteFileBySystemCode(System.IAsyncResult result) {
            string retVal = ((SMT.Saas.Tools.NewFileUploadWS.IUploadService)(this)).EndDeleteFileBySystemCode(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteFileBySystemCodeCompleted(object state) {
            if ((this.DeleteFileBySystemCodeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteFileBySystemCodeCompleted(this, new DeleteFileBySystemCodeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteFileBySystemCodeAsync(string companycode, string systemcode) {
            this.DeleteFileBySystemCodeAsync(companycode, systemcode, null);
        }
        
        public void DeleteFileBySystemCodeAsync(string companycode, string systemcode, object userState) {
            if ((this.onBeginDeleteFileBySystemCodeDelegate == null)) {
                this.onBeginDeleteFileBySystemCodeDelegate = new BeginOperationDelegate(this.OnBeginDeleteFileBySystemCode);
            }
            if ((this.onEndDeleteFileBySystemCodeDelegate == null)) {
                this.onEndDeleteFileBySystemCodeDelegate = new EndOperationDelegate(this.OnEndDeleteFileBySystemCode);
            }
            if ((this.onDeleteFileBySystemCodeCompletedDelegate == null)) {
                this.onDeleteFileBySystemCodeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteFileBySystemCodeCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteFileBySystemCodeDelegate, new object[] {
                        companycode,
                        systemcode}, this.onEndDeleteFileBySystemCodeDelegate, this.onDeleteFileBySystemCodeCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SMT.Saas.Tools.NewFileUploadWS.IUploadService.BeginDeleteFileByCompanycode(string companycode, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteFileByCompanycode(companycode, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string SMT.Saas.Tools.NewFileUploadWS.IUploadService.EndDeleteFileByCompanycode(System.IAsyncResult result) {
            return base.Channel.EndDeleteFileByCompanycode(result);
        }
        
        private System.IAsyncResult OnBeginDeleteFileByCompanycode(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string companycode = ((string)(inValues[0]));
            return ((SMT.Saas.Tools.NewFileUploadWS.IUploadService)(this)).BeginDeleteFileByCompanycode(companycode, callback, asyncState);
        }
        
        private object[] OnEndDeleteFileByCompanycode(System.IAsyncResult result) {
            string retVal = ((SMT.Saas.Tools.NewFileUploadWS.IUploadService)(this)).EndDeleteFileByCompanycode(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteFileByCompanycodeCompleted(object state) {
            if ((this.DeleteFileByCompanycodeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteFileByCompanycodeCompleted(this, new DeleteFileByCompanycodeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteFileByCompanycodeAsync(string companycode) {
            this.DeleteFileByCompanycodeAsync(companycode, null);
        }
        
        public void DeleteFileByCompanycodeAsync(string companycode, object userState) {
            if ((this.onBeginDeleteFileByCompanycodeDelegate == null)) {
                this.onBeginDeleteFileByCompanycodeDelegate = new BeginOperationDelegate(this.OnBeginDeleteFileByCompanycode);
            }
            if ((this.onEndDeleteFileByCompanycodeDelegate == null)) {
                this.onEndDeleteFileByCompanycodeDelegate = new EndOperationDelegate(this.OnEndDeleteFileByCompanycode);
            }
            if ((this.onDeleteFileByCompanycodeCompletedDelegate == null)) {
                this.onDeleteFileByCompanycodeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteFileByCompanycodeCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteFileByCompanycodeDelegate, new object[] {
                        companycode}, this.onEndDeleteFileByCompanycodeDelegate, this.onDeleteFileByCompanycodeCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SMT.Saas.Tools.NewFileUploadWS.IUploadService.BeginDeleteFileByOnlyApplicationID(string applicationid, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteFileByOnlyApplicationID(applicationid, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string SMT.Saas.Tools.NewFileUploadWS.IUploadService.EndDeleteFileByOnlyApplicationID(System.IAsyncResult result) {
            return base.Channel.EndDeleteFileByOnlyApplicationID(result);
        }
        
        private System.IAsyncResult OnBeginDeleteFileByOnlyApplicationID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string applicationid = ((string)(inValues[0]));
            return ((SMT.Saas.Tools.NewFileUploadWS.IUploadService)(this)).BeginDeleteFileByOnlyApplicationID(applicationid, callback, asyncState);
        }
        
        private object[] OnEndDeleteFileByOnlyApplicationID(System.IAsyncResult result) {
            string retVal = ((SMT.Saas.Tools.NewFileUploadWS.IUploadService)(this)).EndDeleteFileByOnlyApplicationID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteFileByOnlyApplicationIDCompleted(object state) {
            if ((this.DeleteFileByOnlyApplicationIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteFileByOnlyApplicationIDCompleted(this, new DeleteFileByOnlyApplicationIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteFileByOnlyApplicationIDAsync(string applicationid) {
            this.DeleteFileByOnlyApplicationIDAsync(applicationid, null);
        }
        
        public void DeleteFileByOnlyApplicationIDAsync(string applicationid, object userState) {
            if ((this.onBeginDeleteFileByOnlyApplicationIDDelegate == null)) {
                this.onBeginDeleteFileByOnlyApplicationIDDelegate = new BeginOperationDelegate(this.OnBeginDeleteFileByOnlyApplicationID);
            }
            if ((this.onEndDeleteFileByOnlyApplicationIDDelegate == null)) {
                this.onEndDeleteFileByOnlyApplicationIDDelegate = new EndOperationDelegate(this.OnEndDeleteFileByOnlyApplicationID);
            }
            if ((this.onDeleteFileByOnlyApplicationIDCompletedDelegate == null)) {
                this.onDeleteFileByOnlyApplicationIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteFileByOnlyApplicationIDCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteFileByOnlyApplicationIDDelegate, new object[] {
                        applicationid}, this.onEndDeleteFileByOnlyApplicationIDDelegate, this.onDeleteFileByOnlyApplicationIDCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SMT.Saas.Tools.NewFileUploadWS.IUploadService.BeginDeleteFileByApplicationIDAndFileName(string applicationid, string FileName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteFileByApplicationIDAndFileName(applicationid, FileName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string SMT.Saas.Tools.NewFileUploadWS.IUploadService.EndDeleteFileByApplicationIDAndFileName(System.IAsyncResult result) {
            return base.Channel.EndDeleteFileByApplicationIDAndFileName(result);
        }
        
        private System.IAsyncResult OnBeginDeleteFileByApplicationIDAndFileName(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string applicationid = ((string)(inValues[0]));
            string FileName = ((string)(inValues[1]));
            return ((SMT.Saas.Tools.NewFileUploadWS.IUploadService)(this)).BeginDeleteFileByApplicationIDAndFileName(applicationid, FileName, callback, asyncState);
        }
        
        private object[] OnEndDeleteFileByApplicationIDAndFileName(System.IAsyncResult result) {
            string retVal = ((SMT.Saas.Tools.NewFileUploadWS.IUploadService)(this)).EndDeleteFileByApplicationIDAndFileName(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteFileByApplicationIDAndFileNameCompleted(object state) {
            if ((this.DeleteFileByApplicationIDAndFileNameCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteFileByApplicationIDAndFileNameCompleted(this, new DeleteFileByApplicationIDAndFileNameCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteFileByApplicationIDAndFileNameAsync(string applicationid, string FileName) {
            this.DeleteFileByApplicationIDAndFileNameAsync(applicationid, FileName, null);
        }
        
        public void DeleteFileByApplicationIDAndFileNameAsync(string applicationid, string FileName, object userState) {
            if ((this.onBeginDeleteFileByApplicationIDAndFileNameDelegate == null)) {
                this.onBeginDeleteFileByApplicationIDAndFileNameDelegate = new BeginOperationDelegate(this.OnBeginDeleteFileByApplicationIDAndFileName);
            }
            if ((this.onEndDeleteFileByApplicationIDAndFileNameDelegate == null)) {
                this.onEndDeleteFileByApplicationIDAndFileNameDelegate = new EndOperationDelegate(this.OnEndDeleteFileByApplicationIDAndFileName);
            }
            if ((this.onDeleteFileByApplicationIDAndFileNameCompletedDelegate == null)) {
                this.onDeleteFileByApplicationIDAndFileNameCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteFileByApplicationIDAndFileNameCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteFileByApplicationIDAndFileNameDelegate, new object[] {
                        applicationid,
                        FileName}, this.onEndDeleteFileByApplicationIDAndFileNameDelegate, this.onDeleteFileByApplicationIDAndFileNameCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override SMT.Saas.Tools.NewFileUploadWS.IUploadService CreateChannel() {
            return new UploadServiceClientChannel(this);
        }
        
        private class UploadServiceClientChannel : ChannelBase<SMT.Saas.Tools.NewFileUploadWS.IUploadService>, SMT.Saas.Tools.NewFileUploadWS.IUploadService {
            
            public UploadServiceClientChannel(System.ServiceModel.ClientBase<SMT.Saas.Tools.NewFileUploadWS.IUploadService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetCompanyFileSetInfo(string companycode, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = companycode;
                System.IAsyncResult _result = base.BeginInvoke("GetCompanyFileSetInfo", _args, callback, asyncState);
                return _result;
            }
            
            public SMT.Saas.Tools.NewFileUploadWS.UserFile EndGetCompanyFileSetInfo(System.IAsyncResult result) {
                object[] _args = new object[0];
                SMT.Saas.Tools.NewFileUploadWS.UserFile _result = ((SMT.Saas.Tools.NewFileUploadWS.UserFile)(base.EndInvoke("GetCompanyFileSetInfo", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetCompanyFileByCompanyCodeAndName(string companycode, string CompanyName, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = companycode;
                _args[1] = CompanyName;
                System.IAsyncResult _result = base.BeginInvoke("GetCompanyFileByCompanyCodeAndName", _args, callback, asyncState);
                return _result;
            }
            
            public SMT.Saas.Tools.NewFileUploadWS.UserFile EndGetCompanyFileByCompanyCodeAndName(System.IAsyncResult result) {
                object[] _args = new object[0];
                SMT.Saas.Tools.NewFileUploadWS.UserFile _result = ((SMT.Saas.Tools.NewFileUploadWS.UserFile)(base.EndInvoke("GetCompanyFileByCompanyCodeAndName", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSaveUpLoadFile(string strSystemCode, string strModelCode, string strFileName, string strMd5Name, string strID, string strGuid, byte[] data, int BytesUploaded, int dataLength, bool firstChunk, bool lastChunk, string strCreateUserID, SMT.Saas.Tools.NewFileUploadWS.UserFile model, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[13];
                _args[0] = strSystemCode;
                _args[1] = strModelCode;
                _args[2] = strFileName;
                _args[3] = strMd5Name;
                _args[4] = strID;
                _args[5] = strGuid;
                _args[6] = data;
                _args[7] = BytesUploaded;
                _args[8] = dataLength;
                _args[9] = firstChunk;
                _args[10] = lastChunk;
                _args[11] = strCreateUserID;
                _args[12] = model;
                System.IAsyncResult _result = base.BeginInvoke("SaveUpLoadFile", _args, callback, asyncState);
                return _result;
            }
            
            public string EndSaveUpLoadFile(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("SaveUpLoadFile", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSaveUpLoadFileIsExist(string strSystemCode, string strModelCode, string strFileName, string strMd5Name, string strID, string strGuid, byte[] data, int BytesUploaded, int dataLength, bool firstChunk, bool lastChunk, string strCreateUserID, SMT.Saas.Tools.NewFileUploadWS.UserFile model, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[13];
                _args[0] = strSystemCode;
                _args[1] = strModelCode;
                _args[2] = strFileName;
                _args[3] = strMd5Name;
                _args[4] = strID;
                _args[5] = strGuid;
                _args[6] = data;
                _args[7] = BytesUploaded;
                _args[8] = dataLength;
                _args[9] = firstChunk;
                _args[10] = lastChunk;
                _args[11] = strCreateUserID;
                _args[12] = model;
                System.IAsyncResult _result = base.BeginInvoke("SaveUpLoadFileIsExist", _args, callback, asyncState);
                return _result;
            }
            
            public string EndSaveUpLoadFileIsExist(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("SaveUpLoadFileIsExist", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCancelUpload(string filename, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = filename;
                System.IAsyncResult _result = base.BeginInvoke("CancelUpload", _args, callback, asyncState);
                return _result;
            }
            
            public void EndCancelUpload(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("CancelUpload", _args, result);
            }
            
            public System.IAsyncResult BeginCheckFileExists(SMT.Saas.Tools.NewFileUploadWS.UserFile model, string md5Name, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = model;
                _args[1] = md5Name;
                System.IAsyncResult _result = base.BeginInvoke("CheckFileExists", _args, callback, asyncState);
                return _result;
            }
            
            public SMT.Saas.Tools.NewFileUploadWS.UserFile EndCheckFileExists(System.IAsyncResult result) {
                object[] _args = new object[0];
                SMT.Saas.Tools.NewFileUploadWS.UserFile _result = ((SMT.Saas.Tools.NewFileUploadWS.UserFile)(base.EndInvoke("CheckFileExists", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetFileListByCompanyCode(string companycode, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = companycode;
                System.IAsyncResult _result = base.BeginInvoke("GetFileListByCompanyCode", _args, callback, asyncState);
                return _result;
            }
            
            public SMT.Saas.Tools.NewFileUploadWS.CallBackResult EndGetFileListByCompanyCode(System.IAsyncResult result) {
                object[] _args = new object[0];
                SMT.Saas.Tools.NewFileUploadWS.CallBackResult _result = ((SMT.Saas.Tools.NewFileUploadWS.CallBackResult)(base.EndInvoke("GetFileListByCompanyCode", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetFileListBySystemCode(string companycode, string systemcode, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = companycode;
                _args[1] = systemcode;
                System.IAsyncResult _result = base.BeginInvoke("GetFileListBySystemCode", _args, callback, asyncState);
                return _result;
            }
            
            public SMT.Saas.Tools.NewFileUploadWS.CallBackResult EndGetFileListBySystemCode(System.IAsyncResult result) {
                object[] _args = new object[0];
                SMT.Saas.Tools.NewFileUploadWS.CallBackResult _result = ((SMT.Saas.Tools.NewFileUploadWS.CallBackResult)(base.EndInvoke("GetFileListBySystemCode", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetFileListByModelCode(string companycode, string systemcode, string modelcode, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = companycode;
                _args[1] = systemcode;
                _args[2] = modelcode;
                System.IAsyncResult _result = base.BeginInvoke("GetFileListByModelCode", _args, callback, asyncState);
                return _result;
            }
            
            public SMT.Saas.Tools.NewFileUploadWS.CallBackResult EndGetFileListByModelCode(System.IAsyncResult result) {
                object[] _args = new object[0];
                SMT.Saas.Tools.NewFileUploadWS.CallBackResult _result = ((SMT.Saas.Tools.NewFileUploadWS.CallBackResult)(base.EndInvoke("GetFileListByModelCode", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetFileListByApplicationID(string companycode, string systemcode, string modelcode, string applicationid, string createname, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = companycode;
                _args[1] = systemcode;
                _args[2] = modelcode;
                _args[3] = applicationid;
                _args[4] = createname;
                System.IAsyncResult _result = base.BeginInvoke("GetFileListByApplicationID", _args, callback, asyncState);
                return _result;
            }
            
            public SMT.Saas.Tools.NewFileUploadWS.CallBackResult EndGetFileListByApplicationID(System.IAsyncResult result) {
                object[] _args = new object[0];
                SMT.Saas.Tools.NewFileUploadWS.CallBackResult _result = ((SMT.Saas.Tools.NewFileUploadWS.CallBackResult)(base.EndInvoke("GetFileListByApplicationID", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetFileListByOnlyApplicationID(string applicationid, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = applicationid;
                System.IAsyncResult _result = base.BeginInvoke("GetFileListByOnlyApplicationID", _args, callback, asyncState);
                return _result;
            }
            
            public SMT.Saas.Tools.NewFileUploadWS.CallBackResult EndGetFileListByOnlyApplicationID(System.IAsyncResult result) {
                object[] _args = new object[0];
                SMT.Saas.Tools.NewFileUploadWS.CallBackResult _result = ((SMT.Saas.Tools.NewFileUploadWS.CallBackResult)(base.EndInvoke("GetFileListByOnlyApplicationID", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteFile(string smtfilelistid, string filepath, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = smtfilelistid;
                _args[1] = filepath;
                System.IAsyncResult _result = base.BeginInvoke("DeleteFile", _args, callback, asyncState);
                return _result;
            }
            
            public string EndDeleteFile(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("DeleteFile", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteFileByUrl(string filepath, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = filepath;
                System.IAsyncResult _result = base.BeginInvoke("DeleteFileByUrl", _args, callback, asyncState);
                return _result;
            }
            
            public string EndDeleteFileByUrl(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("DeleteFileByUrl", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteFileByApplicationID(string companycode, string systemcode, string modelcode, string applicationid, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = companycode;
                _args[1] = systemcode;
                _args[2] = modelcode;
                _args[3] = applicationid;
                System.IAsyncResult _result = base.BeginInvoke("DeleteFileByApplicationID", _args, callback, asyncState);
                return _result;
            }
            
            public string EndDeleteFileByApplicationID(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("DeleteFileByApplicationID", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteFileByModelCode(string companycode, string systemcode, string modelcode, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = companycode;
                _args[1] = systemcode;
                _args[2] = modelcode;
                System.IAsyncResult _result = base.BeginInvoke("DeleteFileByModelCode", _args, callback, asyncState);
                return _result;
            }
            
            public string EndDeleteFileByModelCode(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("DeleteFileByModelCode", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteFileBySystemCode(string companycode, string systemcode, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = companycode;
                _args[1] = systemcode;
                System.IAsyncResult _result = base.BeginInvoke("DeleteFileBySystemCode", _args, callback, asyncState);
                return _result;
            }
            
            public string EndDeleteFileBySystemCode(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("DeleteFileBySystemCode", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteFileByCompanycode(string companycode, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = companycode;
                System.IAsyncResult _result = base.BeginInvoke("DeleteFileByCompanycode", _args, callback, asyncState);
                return _result;
            }
            
            public string EndDeleteFileByCompanycode(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("DeleteFileByCompanycode", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteFileByOnlyApplicationID(string applicationid, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = applicationid;
                System.IAsyncResult _result = base.BeginInvoke("DeleteFileByOnlyApplicationID", _args, callback, asyncState);
                return _result;
            }
            
            public string EndDeleteFileByOnlyApplicationID(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("DeleteFileByOnlyApplicationID", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteFileByApplicationIDAndFileName(string applicationid, string FileName, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = applicationid;
                _args[1] = FileName;
                System.IAsyncResult _result = base.BeginInvoke("DeleteFileByApplicationIDAndFileName", _args, callback, asyncState);
                return _result;
            }
            
            public string EndDeleteFileByApplicationIDAndFileName(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("DeleteFileByApplicationIDAndFileName", _args, result)));
                return _result;
            }
        }
    }
}
