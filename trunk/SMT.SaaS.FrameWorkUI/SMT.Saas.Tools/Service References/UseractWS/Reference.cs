//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.1
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.50401.0
// 
namespace SMT.Saas.Tools.UseractWS {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StructuralObject", Namespace="http://schemas.datacontract.org/2004/07/System.Data.Objects.DataClasses", IsReference=true)]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SMT.Saas.Tools.UseractWS.EntityObject))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SMT.Saas.Tools.UseractWS.T_SYS_USERACTLOG))]
    public partial class StructuralObject : object, System.ComponentModel.INotifyPropertyChanged {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EntityObject", Namespace="http://schemas.datacontract.org/2004/07/System.Data.Objects.DataClasses", IsReference=true)]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SMT.Saas.Tools.UseractWS.T_SYS_USERACTLOG))]
    public partial class EntityObject : SMT.Saas.Tools.UseractWS.StructuralObject {
        
        private SMT.Saas.Tools.UseractWS.EntityKey EntityKeyField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SMT.Saas.Tools.UseractWS.EntityKey EntityKey {
            get {
                return this.EntityKeyField;
            }
            set {
                if ((object.ReferenceEquals(this.EntityKeyField, value) != true)) {
                    this.EntityKeyField = value;
                    this.RaisePropertyChanged("EntityKey");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="T_SYS_USERACTLOG", Namespace="http://schemas.datacontract.org/2004/07/SMT_System_EFModel", IsReference=true)]
    public partial class T_SYS_USERACTLOG : SMT.Saas.Tools.UseractWS.EntityObject {
        
        private string CLIENTBROWSERField;
        
        private string CLIENTHOSTADDRESSField;
        
        private string CLIENTNETRUNTIMEField;
        
        private string CLIENTOSField;
        
        private string CLIENTOSLANGUAGEField;
        
        private string COMPANYNAMEField;
        
        private System.Nullable<System.DateTime> CREATEDATEField;
        
        private string DEPARTMENTNAMEField;
        
        private string EMPLOYEENAMEField;
        
        private string ENTITYMENUField;
        
        private string LOGCONTEXTField;
        
        private string LOGIDField;
        
        private string LOGTYPEField;
        
        private string OWNERCOMPANYIDField;
        
        private string OWNERDEPARTMENTIDField;
        
        private string OWNERIDField;
        
        private string OWNERPOSTIDField;
        
        private string POSTNAMEField;
        
        private string SERVERNETRUNTIMEField;
        
        private string SERVEROSField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CLIENTBROWSER {
            get {
                return this.CLIENTBROWSERField;
            }
            set {
                if ((object.ReferenceEquals(this.CLIENTBROWSERField, value) != true)) {
                    this.CLIENTBROWSERField = value;
                    this.RaisePropertyChanged("CLIENTBROWSER");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CLIENTHOSTADDRESS {
            get {
                return this.CLIENTHOSTADDRESSField;
            }
            set {
                if ((object.ReferenceEquals(this.CLIENTHOSTADDRESSField, value) != true)) {
                    this.CLIENTHOSTADDRESSField = value;
                    this.RaisePropertyChanged("CLIENTHOSTADDRESS");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CLIENTNETRUNTIME {
            get {
                return this.CLIENTNETRUNTIMEField;
            }
            set {
                if ((object.ReferenceEquals(this.CLIENTNETRUNTIMEField, value) != true)) {
                    this.CLIENTNETRUNTIMEField = value;
                    this.RaisePropertyChanged("CLIENTNETRUNTIME");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CLIENTOS {
            get {
                return this.CLIENTOSField;
            }
            set {
                if ((object.ReferenceEquals(this.CLIENTOSField, value) != true)) {
                    this.CLIENTOSField = value;
                    this.RaisePropertyChanged("CLIENTOS");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CLIENTOSLANGUAGE {
            get {
                return this.CLIENTOSLANGUAGEField;
            }
            set {
                if ((object.ReferenceEquals(this.CLIENTOSLANGUAGEField, value) != true)) {
                    this.CLIENTOSLANGUAGEField = value;
                    this.RaisePropertyChanged("CLIENTOSLANGUAGE");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string COMPANYNAME {
            get {
                return this.COMPANYNAMEField;
            }
            set {
                if ((object.ReferenceEquals(this.COMPANYNAMEField, value) != true)) {
                    this.COMPANYNAMEField = value;
                    this.RaisePropertyChanged("COMPANYNAME");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> CREATEDATE {
            get {
                return this.CREATEDATEField;
            }
            set {
                if ((this.CREATEDATEField.Equals(value) != true)) {
                    this.CREATEDATEField = value;
                    this.RaisePropertyChanged("CREATEDATE");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DEPARTMENTNAME {
            get {
                return this.DEPARTMENTNAMEField;
            }
            set {
                if ((object.ReferenceEquals(this.DEPARTMENTNAMEField, value) != true)) {
                    this.DEPARTMENTNAMEField = value;
                    this.RaisePropertyChanged("DEPARTMENTNAME");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EMPLOYEENAME {
            get {
                return this.EMPLOYEENAMEField;
            }
            set {
                if ((object.ReferenceEquals(this.EMPLOYEENAMEField, value) != true)) {
                    this.EMPLOYEENAMEField = value;
                    this.RaisePropertyChanged("EMPLOYEENAME");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ENTITYMENU {
            get {
                return this.ENTITYMENUField;
            }
            set {
                if ((object.ReferenceEquals(this.ENTITYMENUField, value) != true)) {
                    this.ENTITYMENUField = value;
                    this.RaisePropertyChanged("ENTITYMENU");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LOGCONTEXT {
            get {
                return this.LOGCONTEXTField;
            }
            set {
                if ((object.ReferenceEquals(this.LOGCONTEXTField, value) != true)) {
                    this.LOGCONTEXTField = value;
                    this.RaisePropertyChanged("LOGCONTEXT");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LOGID {
            get {
                return this.LOGIDField;
            }
            set {
                if ((object.ReferenceEquals(this.LOGIDField, value) != true)) {
                    this.LOGIDField = value;
                    this.RaisePropertyChanged("LOGID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LOGTYPE {
            get {
                return this.LOGTYPEField;
            }
            set {
                if ((object.ReferenceEquals(this.LOGTYPEField, value) != true)) {
                    this.LOGTYPEField = value;
                    this.RaisePropertyChanged("LOGTYPE");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OWNERCOMPANYID {
            get {
                return this.OWNERCOMPANYIDField;
            }
            set {
                if ((object.ReferenceEquals(this.OWNERCOMPANYIDField, value) != true)) {
                    this.OWNERCOMPANYIDField = value;
                    this.RaisePropertyChanged("OWNERCOMPANYID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OWNERDEPARTMENTID {
            get {
                return this.OWNERDEPARTMENTIDField;
            }
            set {
                if ((object.ReferenceEquals(this.OWNERDEPARTMENTIDField, value) != true)) {
                    this.OWNERDEPARTMENTIDField = value;
                    this.RaisePropertyChanged("OWNERDEPARTMENTID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OWNERID {
            get {
                return this.OWNERIDField;
            }
            set {
                if ((object.ReferenceEquals(this.OWNERIDField, value) != true)) {
                    this.OWNERIDField = value;
                    this.RaisePropertyChanged("OWNERID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OWNERPOSTID {
            get {
                return this.OWNERPOSTIDField;
            }
            set {
                if ((object.ReferenceEquals(this.OWNERPOSTIDField, value) != true)) {
                    this.OWNERPOSTIDField = value;
                    this.RaisePropertyChanged("OWNERPOSTID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string POSTNAME {
            get {
                return this.POSTNAMEField;
            }
            set {
                if ((object.ReferenceEquals(this.POSTNAMEField, value) != true)) {
                    this.POSTNAMEField = value;
                    this.RaisePropertyChanged("POSTNAME");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SERVERNETRUNTIME {
            get {
                return this.SERVERNETRUNTIMEField;
            }
            set {
                if ((object.ReferenceEquals(this.SERVERNETRUNTIMEField, value) != true)) {
                    this.SERVERNETRUNTIMEField = value;
                    this.RaisePropertyChanged("SERVERNETRUNTIME");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SERVEROS {
            get {
                return this.SERVEROSField;
            }
            set {
                if ((object.ReferenceEquals(this.SERVEROSField, value) != true)) {
                    this.SERVEROSField = value;
                    this.RaisePropertyChanged("SERVEROS");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EntityKey", Namespace="http://schemas.datacontract.org/2004/07/System.Data", IsReference=true)]
    public partial class EntityKey : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string EntityContainerNameField;
        
        private System.Collections.ObjectModel.ObservableCollection<SMT.Saas.Tools.UseractWS.EntityKeyMember> EntityKeyValuesField;
        
        private string EntitySetNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EntityContainerName {
            get {
                return this.EntityContainerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.EntityContainerNameField, value) != true)) {
                    this.EntityContainerNameField = value;
                    this.RaisePropertyChanged("EntityContainerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<SMT.Saas.Tools.UseractWS.EntityKeyMember> EntityKeyValues {
            get {
                return this.EntityKeyValuesField;
            }
            set {
                if ((object.ReferenceEquals(this.EntityKeyValuesField, value) != true)) {
                    this.EntityKeyValuesField = value;
                    this.RaisePropertyChanged("EntityKeyValues");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EntitySetName {
            get {
                return this.EntitySetNameField;
            }
            set {
                if ((object.ReferenceEquals(this.EntitySetNameField, value) != true)) {
                    this.EntitySetNameField = value;
                    this.RaisePropertyChanged("EntitySetName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EntityKeyMember", Namespace="http://schemas.datacontract.org/2004/07/System.Data")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SMT.Saas.Tools.UseractWS.LoginUserInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<object>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SMT.Saas.Tools.UseractWS.EntityObject))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SMT.Saas.Tools.UseractWS.StructuralObject))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SMT.Saas.Tools.UseractWS.EntityKey))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<SMT.Saas.Tools.UseractWS.EntityKeyMember>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SMT.Saas.Tools.UseractWS.T_SYS_USERACTLOG))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<SMT.Saas.Tools.UseractWS.T_SYS_USERACTLOG>))]
    public partial class EntityKeyMember : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string KeyField;
        
        private object ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Key {
            get {
                return this.KeyField;
            }
            set {
                if ((object.ReferenceEquals(this.KeyField, value) != true)) {
                    this.KeyField = value;
                    this.RaisePropertyChanged("Key");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LoginUserInfo", Namespace="http://schemas.datacontract.org/2004/07/SMT.SaaS.Permission.Services")]
    public partial class LoginUserInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string companyIDField;
        
        private string companyNameField;
        
        private string departmentIDField;
        
        private string departmentNameField;
        
        private string postIDField;
        
        private string postNameField;
        
        private string userIDField;
        
        private string userNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string companyID {
            get {
                return this.companyIDField;
            }
            set {
                if ((object.ReferenceEquals(this.companyIDField, value) != true)) {
                    this.companyIDField = value;
                    this.RaisePropertyChanged("companyID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string companyName {
            get {
                return this.companyNameField;
            }
            set {
                if ((object.ReferenceEquals(this.companyNameField, value) != true)) {
                    this.companyNameField = value;
                    this.RaisePropertyChanged("companyName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string departmentID {
            get {
                return this.departmentIDField;
            }
            set {
                if ((object.ReferenceEquals(this.departmentIDField, value) != true)) {
                    this.departmentIDField = value;
                    this.RaisePropertyChanged("departmentID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string departmentName {
            get {
                return this.departmentNameField;
            }
            set {
                if ((object.ReferenceEquals(this.departmentNameField, value) != true)) {
                    this.departmentNameField = value;
                    this.RaisePropertyChanged("departmentName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string postID {
            get {
                return this.postIDField;
            }
            set {
                if ((object.ReferenceEquals(this.postIDField, value) != true)) {
                    this.postIDField = value;
                    this.RaisePropertyChanged("postID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string postName {
            get {
                return this.postNameField;
            }
            set {
                if ((object.ReferenceEquals(this.postNameField, value) != true)) {
                    this.postNameField = value;
                    this.RaisePropertyChanged("postName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string userID {
            get {
                return this.userIDField;
            }
            set {
                if ((object.ReferenceEquals(this.userIDField, value) != true)) {
                    this.userIDField = value;
                    this.RaisePropertyChanged("userID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string userName {
            get {
                return this.userNameField;
            }
            set {
                if ((object.ReferenceEquals(this.userNameField, value) != true)) {
                    this.userNameField = value;
                    this.RaisePropertyChanged("userName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="UseractWS.UseractLogService")]
    public interface UseractLogService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/UseractLogService/AddUseractLog", ReplyAction="http://tempuri.org/UseractLogService/AddUseractLogResponse")]
        System.IAsyncResult BeginAddUseractLog(SMT.Saas.Tools.UseractWS.T_SYS_USERACTLOG entity, System.AsyncCallback callback, object asyncState);
        
        bool EndAddUseractLog(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/UseractLogService/UpdateUseractLog", ReplyAction="http://tempuri.org/UseractLogService/UpdateUseractLogResponse")]
        System.IAsyncResult BeginUpdateUseractLog(SMT.Saas.Tools.UseractWS.T_SYS_USERACTLOG entity, System.AsyncCallback callback, object asyncState);
        
        bool EndUpdateUseractLog(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/UseractLogService/DeleteUseractLog", ReplyAction="http://tempuri.org/UseractLogService/DeleteUseractLogResponse")]
        System.IAsyncResult BeginDeleteUseractLog(SMT.Saas.Tools.UseractWS.T_SYS_USERACTLOG entity, System.AsyncCallback callback, object asyncState);
        
        bool EndDeleteUseractLog(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/UseractLogService/GetSysUseractLogWithPaging", ReplyAction="http://tempuri.org/UseractLogService/GetSysUseractLogWithPagingResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SMT.Saas.Tools.UseractWS.LoginUserInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<object>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SMT.Saas.Tools.UseractWS.EntityObject))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SMT.Saas.Tools.UseractWS.StructuralObject))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SMT.Saas.Tools.UseractWS.EntityKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<SMT.Saas.Tools.UseractWS.EntityKeyMember>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SMT.Saas.Tools.UseractWS.EntityKeyMember))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SMT.Saas.Tools.UseractWS.T_SYS_USERACTLOG))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<SMT.Saas.Tools.UseractWS.T_SYS_USERACTLOG>))]
        System.IAsyncResult BeginGetSysUseractLogWithPaging(int pageIndex, int pageSize, string sort, string filterString, System.Collections.ObjectModel.ObservableCollection<object> paras, ref int pageCount, SMT.Saas.Tools.UseractWS.LoginUserInfo loginUserInfo, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<SMT.Saas.Tools.UseractWS.T_SYS_USERACTLOG> EndGetSysUseractLogWithPaging(ref int pageCount, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/UseractLogService/GetSysUseractLogList", ReplyAction="http://tempuri.org/UseractLogService/GetSysUseractLogListResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SMT.Saas.Tools.UseractWS.LoginUserInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<object>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SMT.Saas.Tools.UseractWS.EntityObject))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SMT.Saas.Tools.UseractWS.StructuralObject))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SMT.Saas.Tools.UseractWS.EntityKey))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<SMT.Saas.Tools.UseractWS.EntityKeyMember>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SMT.Saas.Tools.UseractWS.EntityKeyMember))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SMT.Saas.Tools.UseractWS.T_SYS_USERACTLOG))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<SMT.Saas.Tools.UseractWS.T_SYS_USERACTLOG>))]
        System.IAsyncResult BeginGetSysUseractLogList(System.AsyncCallback callback, object asyncState);
        
        object EndGetSysUseractLogList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/UseractLogService/GetSysUseractLogByID", ReplyAction="http://tempuri.org/UseractLogService/GetSysUseractLogByIDResponse")]
        System.IAsyncResult BeginGetSysUseractLogByID(string id, System.AsyncCallback callback, object asyncState);
        
        SMT.Saas.Tools.UseractWS.T_SYS_USERACTLOG EndGetSysUseractLogByID(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface UseractLogServiceChannel : SMT.Saas.Tools.UseractWS.UseractLogService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddUseractLogCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddUseractLogCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UpdateUseractLogCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UpdateUseractLogCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteUseractLogCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteUseractLogCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetSysUseractLogWithPagingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetSysUseractLogWithPagingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int pageCount {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        public System.Collections.ObjectModel.ObservableCollection<SMT.Saas.Tools.UseractWS.T_SYS_USERACTLOG> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<SMT.Saas.Tools.UseractWS.T_SYS_USERACTLOG>)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetSysUseractLogListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetSysUseractLogListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public object Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetSysUseractLogByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetSysUseractLogByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SMT.Saas.Tools.UseractWS.T_SYS_USERACTLOG Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SMT.Saas.Tools.UseractWS.T_SYS_USERACTLOG)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UseractLogServiceClient : System.ServiceModel.ClientBase<SMT.Saas.Tools.UseractWS.UseractLogService>, SMT.Saas.Tools.UseractWS.UseractLogService {
        
        private BeginOperationDelegate onBeginAddUseractLogDelegate;
        
        private EndOperationDelegate onEndAddUseractLogDelegate;
        
        private System.Threading.SendOrPostCallback onAddUseractLogCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateUseractLogDelegate;
        
        private EndOperationDelegate onEndUpdateUseractLogDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateUseractLogCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteUseractLogDelegate;
        
        private EndOperationDelegate onEndDeleteUseractLogDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteUseractLogCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetSysUseractLogWithPagingDelegate;
        
        private EndOperationDelegate onEndGetSysUseractLogWithPagingDelegate;
        
        private System.Threading.SendOrPostCallback onGetSysUseractLogWithPagingCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetSysUseractLogListDelegate;
        
        private EndOperationDelegate onEndGetSysUseractLogListDelegate;
        
        private System.Threading.SendOrPostCallback onGetSysUseractLogListCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetSysUseractLogByIDDelegate;
        
        private EndOperationDelegate onEndGetSysUseractLogByIDDelegate;
        
        private System.Threading.SendOrPostCallback onGetSysUseractLogByIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public UseractLogServiceClient() {
        }
        
        public UseractLogServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UseractLogServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UseractLogServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UseractLogServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("无法设置 CookieContainer。请确保绑定包含 HttpCookieContainerBindingElement。");
                }
            }
        }
        
        public event System.EventHandler<AddUseractLogCompletedEventArgs> AddUseractLogCompleted;
        
        public event System.EventHandler<UpdateUseractLogCompletedEventArgs> UpdateUseractLogCompleted;
        
        public event System.EventHandler<DeleteUseractLogCompletedEventArgs> DeleteUseractLogCompleted;
        
        public event System.EventHandler<GetSysUseractLogWithPagingCompletedEventArgs> GetSysUseractLogWithPagingCompleted;
        
        public event System.EventHandler<GetSysUseractLogListCompletedEventArgs> GetSysUseractLogListCompleted;
        
        public event System.EventHandler<GetSysUseractLogByIDCompletedEventArgs> GetSysUseractLogByIDCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SMT.Saas.Tools.UseractWS.UseractLogService.BeginAddUseractLog(SMT.Saas.Tools.UseractWS.T_SYS_USERACTLOG entity, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddUseractLog(entity, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool SMT.Saas.Tools.UseractWS.UseractLogService.EndAddUseractLog(System.IAsyncResult result) {
            return base.Channel.EndAddUseractLog(result);
        }
        
        private System.IAsyncResult OnBeginAddUseractLog(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SMT.Saas.Tools.UseractWS.T_SYS_USERACTLOG entity = ((SMT.Saas.Tools.UseractWS.T_SYS_USERACTLOG)(inValues[0]));
            return ((SMT.Saas.Tools.UseractWS.UseractLogService)(this)).BeginAddUseractLog(entity, callback, asyncState);
        }
        
        private object[] OnEndAddUseractLog(System.IAsyncResult result) {
            bool retVal = ((SMT.Saas.Tools.UseractWS.UseractLogService)(this)).EndAddUseractLog(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddUseractLogCompleted(object state) {
            if ((this.AddUseractLogCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddUseractLogCompleted(this, new AddUseractLogCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddUseractLogAsync(SMT.Saas.Tools.UseractWS.T_SYS_USERACTLOG entity) {
            this.AddUseractLogAsync(entity, null);
        }
        
        public void AddUseractLogAsync(SMT.Saas.Tools.UseractWS.T_SYS_USERACTLOG entity, object userState) {
            if ((this.onBeginAddUseractLogDelegate == null)) {
                this.onBeginAddUseractLogDelegate = new BeginOperationDelegate(this.OnBeginAddUseractLog);
            }
            if ((this.onEndAddUseractLogDelegate == null)) {
                this.onEndAddUseractLogDelegate = new EndOperationDelegate(this.OnEndAddUseractLog);
            }
            if ((this.onAddUseractLogCompletedDelegate == null)) {
                this.onAddUseractLogCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddUseractLogCompleted);
            }
            base.InvokeAsync(this.onBeginAddUseractLogDelegate, new object[] {
                        entity}, this.onEndAddUseractLogDelegate, this.onAddUseractLogCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SMT.Saas.Tools.UseractWS.UseractLogService.BeginUpdateUseractLog(SMT.Saas.Tools.UseractWS.T_SYS_USERACTLOG entity, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateUseractLog(entity, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool SMT.Saas.Tools.UseractWS.UseractLogService.EndUpdateUseractLog(System.IAsyncResult result) {
            return base.Channel.EndUpdateUseractLog(result);
        }
        
        private System.IAsyncResult OnBeginUpdateUseractLog(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SMT.Saas.Tools.UseractWS.T_SYS_USERACTLOG entity = ((SMT.Saas.Tools.UseractWS.T_SYS_USERACTLOG)(inValues[0]));
            return ((SMT.Saas.Tools.UseractWS.UseractLogService)(this)).BeginUpdateUseractLog(entity, callback, asyncState);
        }
        
        private object[] OnEndUpdateUseractLog(System.IAsyncResult result) {
            bool retVal = ((SMT.Saas.Tools.UseractWS.UseractLogService)(this)).EndUpdateUseractLog(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUpdateUseractLogCompleted(object state) {
            if ((this.UpdateUseractLogCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateUseractLogCompleted(this, new UpdateUseractLogCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateUseractLogAsync(SMT.Saas.Tools.UseractWS.T_SYS_USERACTLOG entity) {
            this.UpdateUseractLogAsync(entity, null);
        }
        
        public void UpdateUseractLogAsync(SMT.Saas.Tools.UseractWS.T_SYS_USERACTLOG entity, object userState) {
            if ((this.onBeginUpdateUseractLogDelegate == null)) {
                this.onBeginUpdateUseractLogDelegate = new BeginOperationDelegate(this.OnBeginUpdateUseractLog);
            }
            if ((this.onEndUpdateUseractLogDelegate == null)) {
                this.onEndUpdateUseractLogDelegate = new EndOperationDelegate(this.OnEndUpdateUseractLog);
            }
            if ((this.onUpdateUseractLogCompletedDelegate == null)) {
                this.onUpdateUseractLogCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateUseractLogCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateUseractLogDelegate, new object[] {
                        entity}, this.onEndUpdateUseractLogDelegate, this.onUpdateUseractLogCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SMT.Saas.Tools.UseractWS.UseractLogService.BeginDeleteUseractLog(SMT.Saas.Tools.UseractWS.T_SYS_USERACTLOG entity, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteUseractLog(entity, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool SMT.Saas.Tools.UseractWS.UseractLogService.EndDeleteUseractLog(System.IAsyncResult result) {
            return base.Channel.EndDeleteUseractLog(result);
        }
        
        private System.IAsyncResult OnBeginDeleteUseractLog(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SMT.Saas.Tools.UseractWS.T_SYS_USERACTLOG entity = ((SMT.Saas.Tools.UseractWS.T_SYS_USERACTLOG)(inValues[0]));
            return ((SMT.Saas.Tools.UseractWS.UseractLogService)(this)).BeginDeleteUseractLog(entity, callback, asyncState);
        }
        
        private object[] OnEndDeleteUseractLog(System.IAsyncResult result) {
            bool retVal = ((SMT.Saas.Tools.UseractWS.UseractLogService)(this)).EndDeleteUseractLog(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteUseractLogCompleted(object state) {
            if ((this.DeleteUseractLogCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteUseractLogCompleted(this, new DeleteUseractLogCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteUseractLogAsync(SMT.Saas.Tools.UseractWS.T_SYS_USERACTLOG entity) {
            this.DeleteUseractLogAsync(entity, null);
        }
        
        public void DeleteUseractLogAsync(SMT.Saas.Tools.UseractWS.T_SYS_USERACTLOG entity, object userState) {
            if ((this.onBeginDeleteUseractLogDelegate == null)) {
                this.onBeginDeleteUseractLogDelegate = new BeginOperationDelegate(this.OnBeginDeleteUseractLog);
            }
            if ((this.onEndDeleteUseractLogDelegate == null)) {
                this.onEndDeleteUseractLogDelegate = new EndOperationDelegate(this.OnEndDeleteUseractLog);
            }
            if ((this.onDeleteUseractLogCompletedDelegate == null)) {
                this.onDeleteUseractLogCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteUseractLogCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteUseractLogDelegate, new object[] {
                        entity}, this.onEndDeleteUseractLogDelegate, this.onDeleteUseractLogCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SMT.Saas.Tools.UseractWS.UseractLogService.BeginGetSysUseractLogWithPaging(int pageIndex, int pageSize, string sort, string filterString, System.Collections.ObjectModel.ObservableCollection<object> paras, ref int pageCount, SMT.Saas.Tools.UseractWS.LoginUserInfo loginUserInfo, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetSysUseractLogWithPaging(pageIndex, pageSize, sort, filterString, paras, ref pageCount, loginUserInfo, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<SMT.Saas.Tools.UseractWS.T_SYS_USERACTLOG> SMT.Saas.Tools.UseractWS.UseractLogService.EndGetSysUseractLogWithPaging(ref int pageCount, System.IAsyncResult result) {
            return base.Channel.EndGetSysUseractLogWithPaging(ref pageCount, result);
        }
        
        private System.IAsyncResult OnBeginGetSysUseractLogWithPaging(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int pageIndex = ((int)(inValues[0]));
            int pageSize = ((int)(inValues[1]));
            string sort = ((string)(inValues[2]));
            string filterString = ((string)(inValues[3]));
            System.Collections.ObjectModel.ObservableCollection<object> paras = ((System.Collections.ObjectModel.ObservableCollection<object>)(inValues[4]));
            int pageCount = ((int)(inValues[5]));
            SMT.Saas.Tools.UseractWS.LoginUserInfo loginUserInfo = ((SMT.Saas.Tools.UseractWS.LoginUserInfo)(inValues[6]));
            return ((SMT.Saas.Tools.UseractWS.UseractLogService)(this)).BeginGetSysUseractLogWithPaging(pageIndex, pageSize, sort, filterString, paras, ref pageCount, loginUserInfo, callback, asyncState);
        }
        
        private object[] OnEndGetSysUseractLogWithPaging(System.IAsyncResult result) {
            int pageCount = this.GetDefaultValueForInitialization<int>();
            System.Collections.ObjectModel.ObservableCollection<SMT.Saas.Tools.UseractWS.T_SYS_USERACTLOG> retVal = ((SMT.Saas.Tools.UseractWS.UseractLogService)(this)).EndGetSysUseractLogWithPaging(ref pageCount, result);
            return new object[] {
                    pageCount,
                    retVal};
        }
        
        private void OnGetSysUseractLogWithPagingCompleted(object state) {
            if ((this.GetSysUseractLogWithPagingCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetSysUseractLogWithPagingCompleted(this, new GetSysUseractLogWithPagingCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetSysUseractLogWithPagingAsync(int pageIndex, int pageSize, string sort, string filterString, System.Collections.ObjectModel.ObservableCollection<object> paras, int pageCount, SMT.Saas.Tools.UseractWS.LoginUserInfo loginUserInfo) {
            this.GetSysUseractLogWithPagingAsync(pageIndex, pageSize, sort, filterString, paras, pageCount, loginUserInfo, null);
        }
        
        public void GetSysUseractLogWithPagingAsync(int pageIndex, int pageSize, string sort, string filterString, System.Collections.ObjectModel.ObservableCollection<object> paras, int pageCount, SMT.Saas.Tools.UseractWS.LoginUserInfo loginUserInfo, object userState) {
            if ((this.onBeginGetSysUseractLogWithPagingDelegate == null)) {
                this.onBeginGetSysUseractLogWithPagingDelegate = new BeginOperationDelegate(this.OnBeginGetSysUseractLogWithPaging);
            }
            if ((this.onEndGetSysUseractLogWithPagingDelegate == null)) {
                this.onEndGetSysUseractLogWithPagingDelegate = new EndOperationDelegate(this.OnEndGetSysUseractLogWithPaging);
            }
            if ((this.onGetSysUseractLogWithPagingCompletedDelegate == null)) {
                this.onGetSysUseractLogWithPagingCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetSysUseractLogWithPagingCompleted);
            }
            base.InvokeAsync(this.onBeginGetSysUseractLogWithPagingDelegate, new object[] {
                        pageIndex,
                        pageSize,
                        sort,
                        filterString,
                        paras,
                        pageCount,
                        loginUserInfo}, this.onEndGetSysUseractLogWithPagingDelegate, this.onGetSysUseractLogWithPagingCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SMT.Saas.Tools.UseractWS.UseractLogService.BeginGetSysUseractLogList(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetSysUseractLogList(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        object SMT.Saas.Tools.UseractWS.UseractLogService.EndGetSysUseractLogList(System.IAsyncResult result) {
            return base.Channel.EndGetSysUseractLogList(result);
        }
        
        private System.IAsyncResult OnBeginGetSysUseractLogList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((SMT.Saas.Tools.UseractWS.UseractLogService)(this)).BeginGetSysUseractLogList(callback, asyncState);
        }
        
        private object[] OnEndGetSysUseractLogList(System.IAsyncResult result) {
            object retVal = ((SMT.Saas.Tools.UseractWS.UseractLogService)(this)).EndGetSysUseractLogList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetSysUseractLogListCompleted(object state) {
            if ((this.GetSysUseractLogListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetSysUseractLogListCompleted(this, new GetSysUseractLogListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetSysUseractLogListAsync() {
            this.GetSysUseractLogListAsync(null);
        }
        
        public void GetSysUseractLogListAsync(object userState) {
            if ((this.onBeginGetSysUseractLogListDelegate == null)) {
                this.onBeginGetSysUseractLogListDelegate = new BeginOperationDelegate(this.OnBeginGetSysUseractLogList);
            }
            if ((this.onEndGetSysUseractLogListDelegate == null)) {
                this.onEndGetSysUseractLogListDelegate = new EndOperationDelegate(this.OnEndGetSysUseractLogList);
            }
            if ((this.onGetSysUseractLogListCompletedDelegate == null)) {
                this.onGetSysUseractLogListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetSysUseractLogListCompleted);
            }
            base.InvokeAsync(this.onBeginGetSysUseractLogListDelegate, null, this.onEndGetSysUseractLogListDelegate, this.onGetSysUseractLogListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SMT.Saas.Tools.UseractWS.UseractLogService.BeginGetSysUseractLogByID(string id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetSysUseractLogByID(id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SMT.Saas.Tools.UseractWS.T_SYS_USERACTLOG SMT.Saas.Tools.UseractWS.UseractLogService.EndGetSysUseractLogByID(System.IAsyncResult result) {
            return base.Channel.EndGetSysUseractLogByID(result);
        }
        
        private System.IAsyncResult OnBeginGetSysUseractLogByID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string id = ((string)(inValues[0]));
            return ((SMT.Saas.Tools.UseractWS.UseractLogService)(this)).BeginGetSysUseractLogByID(id, callback, asyncState);
        }
        
        private object[] OnEndGetSysUseractLogByID(System.IAsyncResult result) {
            SMT.Saas.Tools.UseractWS.T_SYS_USERACTLOG retVal = ((SMT.Saas.Tools.UseractWS.UseractLogService)(this)).EndGetSysUseractLogByID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetSysUseractLogByIDCompleted(object state) {
            if ((this.GetSysUseractLogByIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetSysUseractLogByIDCompleted(this, new GetSysUseractLogByIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetSysUseractLogByIDAsync(string id) {
            this.GetSysUseractLogByIDAsync(id, null);
        }
        
        public void GetSysUseractLogByIDAsync(string id, object userState) {
            if ((this.onBeginGetSysUseractLogByIDDelegate == null)) {
                this.onBeginGetSysUseractLogByIDDelegate = new BeginOperationDelegate(this.OnBeginGetSysUseractLogByID);
            }
            if ((this.onEndGetSysUseractLogByIDDelegate == null)) {
                this.onEndGetSysUseractLogByIDDelegate = new EndOperationDelegate(this.OnEndGetSysUseractLogByID);
            }
            if ((this.onGetSysUseractLogByIDCompletedDelegate == null)) {
                this.onGetSysUseractLogByIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetSysUseractLogByIDCompleted);
            }
            base.InvokeAsync(this.onBeginGetSysUseractLogByIDDelegate, new object[] {
                        id}, this.onEndGetSysUseractLogByIDDelegate, this.onGetSysUseractLogByIDCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override SMT.Saas.Tools.UseractWS.UseractLogService CreateChannel() {
            return new UseractLogServiceClientChannel(this);
        }
        
        private class UseractLogServiceClientChannel : ChannelBase<SMT.Saas.Tools.UseractWS.UseractLogService>, SMT.Saas.Tools.UseractWS.UseractLogService {
            
            public UseractLogServiceClientChannel(System.ServiceModel.ClientBase<SMT.Saas.Tools.UseractWS.UseractLogService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginAddUseractLog(SMT.Saas.Tools.UseractWS.T_SYS_USERACTLOG entity, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = entity;
                System.IAsyncResult _result = base.BeginInvoke("AddUseractLog", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndAddUseractLog(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("AddUseractLog", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUpdateUseractLog(SMT.Saas.Tools.UseractWS.T_SYS_USERACTLOG entity, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = entity;
                System.IAsyncResult _result = base.BeginInvoke("UpdateUseractLog", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndUpdateUseractLog(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("UpdateUseractLog", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteUseractLog(SMT.Saas.Tools.UseractWS.T_SYS_USERACTLOG entity, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = entity;
                System.IAsyncResult _result = base.BeginInvoke("DeleteUseractLog", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndDeleteUseractLog(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("DeleteUseractLog", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetSysUseractLogWithPaging(int pageIndex, int pageSize, string sort, string filterString, System.Collections.ObjectModel.ObservableCollection<object> paras, ref int pageCount, SMT.Saas.Tools.UseractWS.LoginUserInfo loginUserInfo, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[7];
                _args[0] = pageIndex;
                _args[1] = pageSize;
                _args[2] = sort;
                _args[3] = filterString;
                _args[4] = paras;
                _args[5] = pageCount;
                _args[6] = loginUserInfo;
                System.IAsyncResult _result = base.BeginInvoke("GetSysUseractLogWithPaging", _args, callback, asyncState);
                pageCount = ((int)(_args[5]));
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<SMT.Saas.Tools.UseractWS.T_SYS_USERACTLOG> EndGetSysUseractLogWithPaging(ref int pageCount, System.IAsyncResult result) {
                object[] _args = new object[1];
                _args[0] = pageCount;
                System.Collections.ObjectModel.ObservableCollection<SMT.Saas.Tools.UseractWS.T_SYS_USERACTLOG> _result = ((System.Collections.ObjectModel.ObservableCollection<SMT.Saas.Tools.UseractWS.T_SYS_USERACTLOG>)(base.EndInvoke("GetSysUseractLogWithPaging", _args, result)));
                pageCount = ((int)(_args[0]));
                return _result;
            }
            
            public System.IAsyncResult BeginGetSysUseractLogList(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetSysUseractLogList", _args, callback, asyncState);
                return _result;
            }
            
            public object EndGetSysUseractLogList(System.IAsyncResult result) {
                object[] _args = new object[0];
                object _result = ((object)(base.EndInvoke("GetSysUseractLogList", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetSysUseractLogByID(string id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = id;
                System.IAsyncResult _result = base.BeginInvoke("GetSysUseractLogByID", _args, callback, asyncState);
                return _result;
            }
            
            public SMT.Saas.Tools.UseractWS.T_SYS_USERACTLOG EndGetSysUseractLogByID(System.IAsyncResult result) {
                object[] _args = new object[0];
                SMT.Saas.Tools.UseractWS.T_SYS_USERACTLOG _result = ((SMT.Saas.Tools.UseractWS.T_SYS_USERACTLOG)(base.EndInvoke("GetSysUseractLogByID", _args, result)));
                return _result;
            }
        }
    }
}
